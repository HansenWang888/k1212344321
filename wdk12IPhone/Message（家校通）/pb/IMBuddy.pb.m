// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMBuddy.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImbuddyRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImbuddyRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImbaseDefineRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMSyncUserReq ()
@property (strong) NSString* name;
@property (strong) NSString* nick;
@property (strong) NSString* py;
@property (strong) NSString* ps;
@property (strong) NSString* avatar;
@property (strong) NSString* remark;
@property (strong) NSString* telphone;
@property (strong) NSString* email;
@property UInt32 sex;
@property (strong) NSData* attachData;
@end

@implementation IMSyncUserReq

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasNick {
  return !!hasNick_;
}
- (void) setHasNick:(BOOL) _value_ {
  hasNick_ = !!_value_;
}
@synthesize nick;
- (BOOL) hasPy {
  return !!hasPy_;
}
- (void) setHasPy:(BOOL) _value_ {
  hasPy_ = !!_value_;
}
@synthesize py;
- (BOOL) hasPs {
  return !!hasPs_;
}
- (void) setHasPs:(BOOL) _value_ {
  hasPs_ = !!_value_;
}
@synthesize ps;
- (BOOL) hasAvatar {
  return !!hasAvatar_;
}
- (void) setHasAvatar:(BOOL) _value_ {
  hasAvatar_ = !!_value_;
}
@synthesize avatar;
- (BOOL) hasRemark {
  return !!hasRemark_;
}
- (void) setHasRemark:(BOOL) _value_ {
  hasRemark_ = !!_value_;
}
@synthesize remark;
- (BOOL) hasTelphone {
  return !!hasTelphone_;
}
- (void) setHasTelphone:(BOOL) _value_ {
  hasTelphone_ = !!_value_;
}
@synthesize telphone;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) _value_ {
  hasEmail_ = !!_value_;
}
@synthesize email;
- (BOOL) hasSex {
  return !!hasSex_;
}
- (void) setHasSex:(BOOL) _value_ {
  hasSex_ = !!_value_;
}
@synthesize sex;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.nick = @"";
    self.py = @"";
    self.ps = @"";
    self.avatar = @"";
    self.remark = @"";
    self.telphone = @"";
    self.email = @"";
    self.sex = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMSyncUserReq* defaultIMSyncUserReqInstance = nil;
+ (void) initialize {
  if (self == [IMSyncUserReq class]) {
    defaultIMSyncUserReqInstance = [[IMSyncUserReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSyncUserReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSyncUserReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasNick) {
    return NO;
  }
  if (!self.hasPy) {
    return NO;
  }
  if (!self.hasPs) {
    return NO;
  }
  if (!self.hasAvatar) {
    return NO;
  }
  if (!self.hasRemark) {
    return NO;
  }
  if (!self.hasTelphone) {
    return NO;
  }
  if (!self.hasEmail) {
    return NO;
  }
  if (!self.hasSex) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasNick) {
    [output writeString:2 value:self.nick];
  }
  if (self.hasPy) {
    [output writeString:3 value:self.py];
  }
  if (self.hasPs) {
    [output writeString:4 value:self.ps];
  }
  if (self.hasAvatar) {
    [output writeString:5 value:self.avatar];
  }
  if (self.hasRemark) {
    [output writeString:6 value:self.remark];
  }
  if (self.hasTelphone) {
    [output writeString:7 value:self.telphone];
  }
  if (self.hasEmail) {
    [output writeString:8 value:self.email];
  }
  if (self.hasSex) {
    [output writeUInt32:9 value:self.sex];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasNick) {
    size_ += computeStringSize(2, self.nick);
  }
  if (self.hasPy) {
    size_ += computeStringSize(3, self.py);
  }
  if (self.hasPs) {
    size_ += computeStringSize(4, self.ps);
  }
  if (self.hasAvatar) {
    size_ += computeStringSize(5, self.avatar);
  }
  if (self.hasRemark) {
    size_ += computeStringSize(6, self.remark);
  }
  if (self.hasTelphone) {
    size_ += computeStringSize(7, self.telphone);
  }
  if (self.hasEmail) {
    size_ += computeStringSize(8, self.email);
  }
  if (self.hasSex) {
    size_ += computeUInt32Size(9, self.sex);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSyncUserReq*) parseFromData:(NSData*) data {
  return (IMSyncUserReq*)[[[IMSyncUserReq builder] mergeFromData:data] build];
}
+ (IMSyncUserReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSyncUserReq*)[[[IMSyncUserReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSyncUserReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMSyncUserReq*)[[[IMSyncUserReq builder] mergeFromInputStream:input] build];
}
+ (IMSyncUserReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSyncUserReq*)[[[IMSyncUserReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSyncUserReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSyncUserReq*)[[[IMSyncUserReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMSyncUserReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSyncUserReq*)[[[IMSyncUserReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSyncUserReqBuilder*) builder {
  return [[IMSyncUserReqBuilder alloc] init];
}
+ (IMSyncUserReqBuilder*) builderWithPrototype:(IMSyncUserReq*) prototype {
  return [[IMSyncUserReq builder] mergeFrom:prototype];
}
- (IMSyncUserReqBuilder*) builder {
  return [IMSyncUserReq builder];
}
- (IMSyncUserReqBuilder*) toBuilder {
  return [IMSyncUserReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasNick) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nick", self.nick];
  }
  if (self.hasPy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"py", self.py];
  }
  if (self.hasPs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ps", self.ps];
  }
  if (self.hasAvatar) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatar", self.avatar];
  }
  if (self.hasRemark) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remark", self.remark];
  }
  if (self.hasTelphone) {
    [output appendFormat:@"%@%@: %@\n", indent, @"telphone", self.telphone];
  }
  if (self.hasEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"email", self.email];
  }
  if (self.hasSex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sex", [NSNumber numberWithInteger:self.sex]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasNick) {
    [dictionary setObject: self.nick forKey: @"nick"];
  }
  if (self.hasPy) {
    [dictionary setObject: self.py forKey: @"py"];
  }
  if (self.hasPs) {
    [dictionary setObject: self.ps forKey: @"ps"];
  }
  if (self.hasAvatar) {
    [dictionary setObject: self.avatar forKey: @"avatar"];
  }
  if (self.hasRemark) {
    [dictionary setObject: self.remark forKey: @"remark"];
  }
  if (self.hasTelphone) {
    [dictionary setObject: self.telphone forKey: @"telphone"];
  }
  if (self.hasEmail) {
    [dictionary setObject: self.email forKey: @"email"];
  }
  if (self.hasSex) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sex] forKey: @"sex"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSyncUserReq class]]) {
    return NO;
  }
  IMSyncUserReq *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasNick == otherMessage.hasNick &&
      (!self.hasNick || [self.nick isEqual:otherMessage.nick]) &&
      self.hasPy == otherMessage.hasPy &&
      (!self.hasPy || [self.py isEqual:otherMessage.py]) &&
      self.hasPs == otherMessage.hasPs &&
      (!self.hasPs || [self.ps isEqual:otherMessage.ps]) &&
      self.hasAvatar == otherMessage.hasAvatar &&
      (!self.hasAvatar || [self.avatar isEqual:otherMessage.avatar]) &&
      self.hasRemark == otherMessage.hasRemark &&
      (!self.hasRemark || [self.remark isEqual:otherMessage.remark]) &&
      self.hasTelphone == otherMessage.hasTelphone &&
      (!self.hasTelphone || [self.telphone isEqual:otherMessage.telphone]) &&
      self.hasEmail == otherMessage.hasEmail &&
      (!self.hasEmail || [self.email isEqual:otherMessage.email]) &&
      self.hasSex == otherMessage.hasSex &&
      (!self.hasSex || self.sex == otherMessage.sex) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasNick) {
    hashCode = hashCode * 31 + [self.nick hash];
  }
  if (self.hasPy) {
    hashCode = hashCode * 31 + [self.py hash];
  }
  if (self.hasPs) {
    hashCode = hashCode * 31 + [self.ps hash];
  }
  if (self.hasAvatar) {
    hashCode = hashCode * 31 + [self.avatar hash];
  }
  if (self.hasRemark) {
    hashCode = hashCode * 31 + [self.remark hash];
  }
  if (self.hasTelphone) {
    hashCode = hashCode * 31 + [self.telphone hash];
  }
  if (self.hasEmail) {
    hashCode = hashCode * 31 + [self.email hash];
  }
  if (self.hasSex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sex] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSyncUserReqBuilder()
@property (strong) IMSyncUserReq* resultImsyncUserReq;
@end

@implementation IMSyncUserReqBuilder
@synthesize resultImsyncUserReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsyncUserReq = [[IMSyncUserReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsyncUserReq;
}
- (IMSyncUserReqBuilder*) clear {
  self.resultImsyncUserReq = [[IMSyncUserReq alloc] init];
  return self;
}
- (IMSyncUserReqBuilder*) clone {
  return [IMSyncUserReq builderWithPrototype:resultImsyncUserReq];
}
- (IMSyncUserReq*) defaultInstance {
  return [IMSyncUserReq defaultInstance];
}
- (IMSyncUserReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSyncUserReq*) buildPartial {
  IMSyncUserReq* returnMe = resultImsyncUserReq;
  self.resultImsyncUserReq = nil;
  return returnMe;
}
- (IMSyncUserReqBuilder*) mergeFrom:(IMSyncUserReq*) other {
  if (other == [IMSyncUserReq defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasNick) {
    [self setNick:other.nick];
  }
  if (other.hasPy) {
    [self setPy:other.py];
  }
  if (other.hasPs) {
    [self setPs:other.ps];
  }
  if (other.hasAvatar) {
    [self setAvatar:other.avatar];
  }
  if (other.hasRemark) {
    [self setRemark:other.remark];
  }
  if (other.hasTelphone) {
    [self setTelphone:other.telphone];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasSex) {
    [self setSex:other.sex];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSyncUserReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSyncUserReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setNick:[input readString]];
        break;
      }
      case 26: {
        [self setPy:[input readString]];
        break;
      }
      case 34: {
        [self setPs:[input readString]];
        break;
      }
      case 42: {
        [self setAvatar:[input readString]];
        break;
      }
      case 50: {
        [self setRemark:[input readString]];
        break;
      }
      case 58: {
        [self setTelphone:[input readString]];
        break;
      }
      case 66: {
        [self setEmail:[input readString]];
        break;
      }
      case 72: {
        [self setSex:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultImsyncUserReq.hasName;
}
- (NSString*) name {
  return resultImsyncUserReq.name;
}
- (IMSyncUserReqBuilder*) setName:(NSString*) value {
  resultImsyncUserReq.hasName = YES;
  resultImsyncUserReq.name = value;
  return self;
}
- (IMSyncUserReqBuilder*) clearName {
  resultImsyncUserReq.hasName = NO;
  resultImsyncUserReq.name = @"";
  return self;
}
- (BOOL) hasNick {
  return resultImsyncUserReq.hasNick;
}
- (NSString*) nick {
  return resultImsyncUserReq.nick;
}
- (IMSyncUserReqBuilder*) setNick:(NSString*) value {
  resultImsyncUserReq.hasNick = YES;
  resultImsyncUserReq.nick = value;
  return self;
}
- (IMSyncUserReqBuilder*) clearNick {
  resultImsyncUserReq.hasNick = NO;
  resultImsyncUserReq.nick = @"";
  return self;
}
- (BOOL) hasPy {
  return resultImsyncUserReq.hasPy;
}
- (NSString*) py {
  return resultImsyncUserReq.py;
}
- (IMSyncUserReqBuilder*) setPy:(NSString*) value {
  resultImsyncUserReq.hasPy = YES;
  resultImsyncUserReq.py = value;
  return self;
}
- (IMSyncUserReqBuilder*) clearPy {
  resultImsyncUserReq.hasPy = NO;
  resultImsyncUserReq.py = @"";
  return self;
}
- (BOOL) hasPs {
  return resultImsyncUserReq.hasPs;
}
- (NSString*) ps {
  return resultImsyncUserReq.ps;
}
- (IMSyncUserReqBuilder*) setPs:(NSString*) value {
  resultImsyncUserReq.hasPs = YES;
  resultImsyncUserReq.ps = value;
  return self;
}
- (IMSyncUserReqBuilder*) clearPs {
  resultImsyncUserReq.hasPs = NO;
  resultImsyncUserReq.ps = @"";
  return self;
}
- (BOOL) hasAvatar {
  return resultImsyncUserReq.hasAvatar;
}
- (NSString*) avatar {
  return resultImsyncUserReq.avatar;
}
- (IMSyncUserReqBuilder*) setAvatar:(NSString*) value {
  resultImsyncUserReq.hasAvatar = YES;
  resultImsyncUserReq.avatar = value;
  return self;
}
- (IMSyncUserReqBuilder*) clearAvatar {
  resultImsyncUserReq.hasAvatar = NO;
  resultImsyncUserReq.avatar = @"";
  return self;
}
- (BOOL) hasRemark {
  return resultImsyncUserReq.hasRemark;
}
- (NSString*) remark {
  return resultImsyncUserReq.remark;
}
- (IMSyncUserReqBuilder*) setRemark:(NSString*) value {
  resultImsyncUserReq.hasRemark = YES;
  resultImsyncUserReq.remark = value;
  return self;
}
- (IMSyncUserReqBuilder*) clearRemark {
  resultImsyncUserReq.hasRemark = NO;
  resultImsyncUserReq.remark = @"";
  return self;
}
- (BOOL) hasTelphone {
  return resultImsyncUserReq.hasTelphone;
}
- (NSString*) telphone {
  return resultImsyncUserReq.telphone;
}
- (IMSyncUserReqBuilder*) setTelphone:(NSString*) value {
  resultImsyncUserReq.hasTelphone = YES;
  resultImsyncUserReq.telphone = value;
  return self;
}
- (IMSyncUserReqBuilder*) clearTelphone {
  resultImsyncUserReq.hasTelphone = NO;
  resultImsyncUserReq.telphone = @"";
  return self;
}
- (BOOL) hasEmail {
  return resultImsyncUserReq.hasEmail;
}
- (NSString*) email {
  return resultImsyncUserReq.email;
}
- (IMSyncUserReqBuilder*) setEmail:(NSString*) value {
  resultImsyncUserReq.hasEmail = YES;
  resultImsyncUserReq.email = value;
  return self;
}
- (IMSyncUserReqBuilder*) clearEmail {
  resultImsyncUserReq.hasEmail = NO;
  resultImsyncUserReq.email = @"";
  return self;
}
- (BOOL) hasSex {
  return resultImsyncUserReq.hasSex;
}
- (UInt32) sex {
  return resultImsyncUserReq.sex;
}
- (IMSyncUserReqBuilder*) setSex:(UInt32) value {
  resultImsyncUserReq.hasSex = YES;
  resultImsyncUserReq.sex = value;
  return self;
}
- (IMSyncUserReqBuilder*) clearSex {
  resultImsyncUserReq.hasSex = NO;
  resultImsyncUserReq.sex = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImsyncUserReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImsyncUserReq.attachData;
}
- (IMSyncUserReqBuilder*) setAttachData:(NSData*) value {
  resultImsyncUserReq.hasAttachData = YES;
  resultImsyncUserReq.attachData = value;
  return self;
}
- (IMSyncUserReqBuilder*) clearAttachData {
  resultImsyncUserReq.hasAttachData = NO;
  resultImsyncUserReq.attachData = [NSData data];
  return self;
}
@end

@interface IMSyncUserRsp ()
@property (strong) NSString* name;
@property UInt64 id;
@property (strong) NSData* attachData;
@end

@implementation IMSyncUserRsp

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.id = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMSyncUserRsp* defaultIMSyncUserRspInstance = nil;
+ (void) initialize {
  if (self == [IMSyncUserRsp class]) {
    defaultIMSyncUserRspInstance = [[IMSyncUserRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSyncUserRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSyncUserRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasId) {
    [output writeUInt64:2 value:self.id];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasId) {
    size_ += computeUInt64Size(2, self.id);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSyncUserRsp*) parseFromData:(NSData*) data {
  return (IMSyncUserRsp*)[[[IMSyncUserRsp builder] mergeFromData:data] build];
}
+ (IMSyncUserRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSyncUserRsp*)[[[IMSyncUserRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSyncUserRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMSyncUserRsp*)[[[IMSyncUserRsp builder] mergeFromInputStream:input] build];
}
+ (IMSyncUserRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSyncUserRsp*)[[[IMSyncUserRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSyncUserRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSyncUserRsp*)[[[IMSyncUserRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMSyncUserRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSyncUserRsp*)[[[IMSyncUserRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSyncUserRspBuilder*) builder {
  return [[IMSyncUserRspBuilder alloc] init];
}
+ (IMSyncUserRspBuilder*) builderWithPrototype:(IMSyncUserRsp*) prototype {
  return [[IMSyncUserRsp builder] mergeFrom:prototype];
}
- (IMSyncUserRspBuilder*) builder {
  return [IMSyncUserRsp builder];
}
- (IMSyncUserRspBuilder*) toBuilder {
  return [IMSyncUserRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithLongLong:self.id]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.id] forKey: @"id"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSyncUserRsp class]]) {
    return NO;
  }
  IMSyncUserRsp *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.id] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSyncUserRspBuilder()
@property (strong) IMSyncUserRsp* resultImsyncUserRsp;
@end

@implementation IMSyncUserRspBuilder
@synthesize resultImsyncUserRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsyncUserRsp = [[IMSyncUserRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsyncUserRsp;
}
- (IMSyncUserRspBuilder*) clear {
  self.resultImsyncUserRsp = [[IMSyncUserRsp alloc] init];
  return self;
}
- (IMSyncUserRspBuilder*) clone {
  return [IMSyncUserRsp builderWithPrototype:resultImsyncUserRsp];
}
- (IMSyncUserRsp*) defaultInstance {
  return [IMSyncUserRsp defaultInstance];
}
- (IMSyncUserRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSyncUserRsp*) buildPartial {
  IMSyncUserRsp* returnMe = resultImsyncUserRsp;
  self.resultImsyncUserRsp = nil;
  return returnMe;
}
- (IMSyncUserRspBuilder*) mergeFrom:(IMSyncUserRsp*) other {
  if (other == [IMSyncUserRsp defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSyncUserRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSyncUserRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setId:[input readUInt64]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultImsyncUserRsp.hasName;
}
- (NSString*) name {
  return resultImsyncUserRsp.name;
}
- (IMSyncUserRspBuilder*) setName:(NSString*) value {
  resultImsyncUserRsp.hasName = YES;
  resultImsyncUserRsp.name = value;
  return self;
}
- (IMSyncUserRspBuilder*) clearName {
  resultImsyncUserRsp.hasName = NO;
  resultImsyncUserRsp.name = @"";
  return self;
}
- (BOOL) hasId {
  return resultImsyncUserRsp.hasId;
}
- (UInt64) id {
  return resultImsyncUserRsp.id;
}
- (IMSyncUserRspBuilder*) setId:(UInt64) value {
  resultImsyncUserRsp.hasId = YES;
  resultImsyncUserRsp.id = value;
  return self;
}
- (IMSyncUserRspBuilder*) clearId {
  resultImsyncUserRsp.hasId = NO;
  resultImsyncUserRsp.id = 0L;
  return self;
}
- (BOOL) hasAttachData {
  return resultImsyncUserRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImsyncUserRsp.attachData;
}
- (IMSyncUserRspBuilder*) setAttachData:(NSData*) value {
  resultImsyncUserRsp.hasAttachData = YES;
  resultImsyncUserRsp.attachData = value;
  return self;
}
- (IMSyncUserRspBuilder*) clearAttachData {
  resultImsyncUserRsp.hasAttachData = NO;
  resultImsyncUserRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMRecentContactSessionReq ()
@property UInt64 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSData* attachData;
@end

@implementation IMRecentContactSessionReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMRecentContactSessionReq* defaultIMRecentContactSessionReqInstance = nil;
+ (void) initialize {
  if (self == [IMRecentContactSessionReq class]) {
    defaultIMRecentContactSessionReqInstance = [[IMRecentContactSessionReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRecentContactSessionReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRecentContactSessionReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRecentContactSessionReq*) parseFromData:(NSData*) data {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromData:data] build];
}
+ (IMRecentContactSessionReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromInputStream:input] build];
}
+ (IMRecentContactSessionReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMRecentContactSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionReq*)[[[IMRecentContactSessionReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionReqBuilder*) builder {
  return [[IMRecentContactSessionReqBuilder alloc] init];
}
+ (IMRecentContactSessionReqBuilder*) builderWithPrototype:(IMRecentContactSessionReq*) prototype {
  return [[IMRecentContactSessionReq builder] mergeFrom:prototype];
}
- (IMRecentContactSessionReqBuilder*) builder {
  return [IMRecentContactSessionReq builder];
}
- (IMRecentContactSessionReqBuilder*) toBuilder {
  return [IMRecentContactSessionReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRecentContactSessionReq class]]) {
    return NO;
  }
  IMRecentContactSessionReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRecentContactSessionReqBuilder()
@property (strong) IMRecentContactSessionReq* resultImrecentContactSessionReq;
@end

@implementation IMRecentContactSessionReqBuilder
@synthesize resultImrecentContactSessionReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImrecentContactSessionReq = [[IMRecentContactSessionReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImrecentContactSessionReq;
}
- (IMRecentContactSessionReqBuilder*) clear {
  self.resultImrecentContactSessionReq = [[IMRecentContactSessionReq alloc] init];
  return self;
}
- (IMRecentContactSessionReqBuilder*) clone {
  return [IMRecentContactSessionReq builderWithPrototype:resultImrecentContactSessionReq];
}
- (IMRecentContactSessionReq*) defaultInstance {
  return [IMRecentContactSessionReq defaultInstance];
}
- (IMRecentContactSessionReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRecentContactSessionReq*) buildPartial {
  IMRecentContactSessionReq* returnMe = resultImrecentContactSessionReq;
  self.resultImrecentContactSessionReq = nil;
  return returnMe;
}
- (IMRecentContactSessionReqBuilder*) mergeFrom:(IMRecentContactSessionReq*) other {
  if (other == [IMRecentContactSessionReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRecentContactSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRecentContactSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImrecentContactSessionReq.hasUserId;
}
- (UInt64) userId {
  return resultImrecentContactSessionReq.userId;
}
- (IMRecentContactSessionReqBuilder*) setUserId:(UInt64) value {
  resultImrecentContactSessionReq.hasUserId = YES;
  resultImrecentContactSessionReq.userId = value;
  return self;
}
- (IMRecentContactSessionReqBuilder*) clearUserId {
  resultImrecentContactSessionReq.hasUserId = NO;
  resultImrecentContactSessionReq.userId = 0L;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImrecentContactSessionReq.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImrecentContactSessionReq.latestUpdateTime;
}
- (IMRecentContactSessionReqBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImrecentContactSessionReq.hasLatestUpdateTime = YES;
  resultImrecentContactSessionReq.latestUpdateTime = value;
  return self;
}
- (IMRecentContactSessionReqBuilder*) clearLatestUpdateTime {
  resultImrecentContactSessionReq.hasLatestUpdateTime = NO;
  resultImrecentContactSessionReq.latestUpdateTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImrecentContactSessionReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImrecentContactSessionReq.attachData;
}
- (IMRecentContactSessionReqBuilder*) setAttachData:(NSData*) value {
  resultImrecentContactSessionReq.hasAttachData = YES;
  resultImrecentContactSessionReq.attachData = value;
  return self;
}
- (IMRecentContactSessionReqBuilder*) clearAttachData {
  resultImrecentContactSessionReq.hasAttachData = NO;
  resultImrecentContactSessionReq.attachData = [NSData data];
  return self;
}
@end

@interface IMRecentContactSessionRsp ()
@property UInt64 userId;
@property (strong) NSMutableArray * contactSessionListArray;
@property (strong) NSData* attachData;
@end

@implementation IMRecentContactSessionRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize contactSessionListArray;
@dynamic contactSessionList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMRecentContactSessionRsp* defaultIMRecentContactSessionRspInstance = nil;
+ (void) initialize {
  if (self == [IMRecentContactSessionRsp class]) {
    defaultIMRecentContactSessionRspInstance = [[IMRecentContactSessionRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRecentContactSessionRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRecentContactSessionRspInstance;
}
- (NSArray *)contactSessionList {
  return contactSessionListArray;
}
- (ContactSessionInfo*)contactSessionListAtIndex:(NSUInteger)index {
  return [contactSessionListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInitcontactSessionList = YES;
   [self.contactSessionList enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcontactSessionList = NO;
      *stop = YES;
    }
  }];
  if (!isInitcontactSessionList) return isInitcontactSessionList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  [self.contactSessionListArray enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  [self.contactSessionListArray enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRecentContactSessionRsp*) parseFromData:(NSData*) data {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromData:data] build];
}
+ (IMRecentContactSessionRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromInputStream:input] build];
}
+ (IMRecentContactSessionRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMRecentContactSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRecentContactSessionRsp*)[[[IMRecentContactSessionRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRecentContactSessionRspBuilder*) builder {
  return [[IMRecentContactSessionRspBuilder alloc] init];
}
+ (IMRecentContactSessionRspBuilder*) builderWithPrototype:(IMRecentContactSessionRsp*) prototype {
  return [[IMRecentContactSessionRsp builder] mergeFrom:prototype];
}
- (IMRecentContactSessionRspBuilder*) builder {
  return [IMRecentContactSessionRsp builder];
}
- (IMRecentContactSessionRspBuilder*) toBuilder {
  return [IMRecentContactSessionRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  [self.contactSessionListArray enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"contactSessionList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  for (ContactSessionInfo* element in self.contactSessionListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"contactSessionList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRecentContactSessionRsp class]]) {
    return NO;
  }
  IMRecentContactSessionRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.contactSessionListArray isEqualToArray:otherMessage.contactSessionListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  [self.contactSessionListArray enumerateObjectsUsingBlock:^(ContactSessionInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRecentContactSessionRspBuilder()
@property (strong) IMRecentContactSessionRsp* resultImrecentContactSessionRsp;
@end

@implementation IMRecentContactSessionRspBuilder
@synthesize resultImrecentContactSessionRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImrecentContactSessionRsp = [[IMRecentContactSessionRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImrecentContactSessionRsp;
}
- (IMRecentContactSessionRspBuilder*) clear {
  self.resultImrecentContactSessionRsp = [[IMRecentContactSessionRsp alloc] init];
  return self;
}
- (IMRecentContactSessionRspBuilder*) clone {
  return [IMRecentContactSessionRsp builderWithPrototype:resultImrecentContactSessionRsp];
}
- (IMRecentContactSessionRsp*) defaultInstance {
  return [IMRecentContactSessionRsp defaultInstance];
}
- (IMRecentContactSessionRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRecentContactSessionRsp*) buildPartial {
  IMRecentContactSessionRsp* returnMe = resultImrecentContactSessionRsp;
  self.resultImrecentContactSessionRsp = nil;
  return returnMe;
}
- (IMRecentContactSessionRspBuilder*) mergeFrom:(IMRecentContactSessionRsp*) other {
  if (other == [IMRecentContactSessionRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.contactSessionListArray.count > 0) {
    if (resultImrecentContactSessionRsp.contactSessionListArray == nil) {
      resultImrecentContactSessionRsp.contactSessionListArray = [[NSMutableArray alloc] initWithArray:other.contactSessionListArray];
    } else {
      [resultImrecentContactSessionRsp.contactSessionListArray addObjectsFromArray:other.contactSessionListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRecentContactSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRecentContactSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        ContactSessionInfoBuilder* subBuilder = [ContactSessionInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContactSessionList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImrecentContactSessionRsp.hasUserId;
}
- (UInt64) userId {
  return resultImrecentContactSessionRsp.userId;
}
- (IMRecentContactSessionRspBuilder*) setUserId:(UInt64) value {
  resultImrecentContactSessionRsp.hasUserId = YES;
  resultImrecentContactSessionRsp.userId = value;
  return self;
}
- (IMRecentContactSessionRspBuilder*) clearUserId {
  resultImrecentContactSessionRsp.hasUserId = NO;
  resultImrecentContactSessionRsp.userId = 0L;
  return self;
}
- (NSMutableArray *)contactSessionList {
  return resultImrecentContactSessionRsp.contactSessionListArray;
}
- (ContactSessionInfo*)contactSessionListAtIndex:(NSUInteger)index {
  return [resultImrecentContactSessionRsp contactSessionListAtIndex:index];
}
- (IMRecentContactSessionRspBuilder *)addContactSessionList:(ContactSessionInfo*)value {
  if (resultImrecentContactSessionRsp.contactSessionListArray == nil) {
    resultImrecentContactSessionRsp.contactSessionListArray = [[NSMutableArray alloc]init];
  }
  [resultImrecentContactSessionRsp.contactSessionListArray addObject:value];
  return self;
}
- (IMRecentContactSessionRspBuilder *)setContactSessionListArray:(NSArray *)array {
  resultImrecentContactSessionRsp.contactSessionListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMRecentContactSessionRspBuilder *)clearContactSessionList {
  resultImrecentContactSessionRsp.contactSessionListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImrecentContactSessionRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImrecentContactSessionRsp.attachData;
}
- (IMRecentContactSessionRspBuilder*) setAttachData:(NSData*) value {
  resultImrecentContactSessionRsp.hasAttachData = YES;
  resultImrecentContactSessionRsp.attachData = value;
  return self;
}
- (IMRecentContactSessionRspBuilder*) clearAttachData {
  resultImrecentContactSessionRsp.hasAttachData = NO;
  resultImrecentContactSessionRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMUserStatNotify ()
@property (strong) UserStat* userStat;
@end

@implementation IMUserStatNotify

- (BOOL) hasUserStat {
  return !!hasUserStat_;
}
- (void) setHasUserStat:(BOOL) _value_ {
  hasUserStat_ = !!_value_;
}
@synthesize userStat;
- (instancetype) init {
  if ((self = [super init])) {
    self.userStat = [UserStat defaultInstance];
  }
  return self;
}
static IMUserStatNotify* defaultIMUserStatNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMUserStatNotify class]) {
    defaultIMUserStatNotifyInstance = [[IMUserStatNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUserStatNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUserStatNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserStat) {
    return NO;
  }
  if (!self.userStat.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserStat) {
    [output writeMessage:1 value:self.userStat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserStat) {
    size_ += computeMessageSize(1, self.userStat);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUserStatNotify*) parseFromData:(NSData*) data {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromData:data] build];
}
+ (IMUserStatNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUserStatNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromInputStream:input] build];
}
+ (IMUserStatNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUserStatNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMUserStatNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUserStatNotify*)[[[IMUserStatNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUserStatNotifyBuilder*) builder {
  return [[IMUserStatNotifyBuilder alloc] init];
}
+ (IMUserStatNotifyBuilder*) builderWithPrototype:(IMUserStatNotify*) prototype {
  return [[IMUserStatNotify builder] mergeFrom:prototype];
}
- (IMUserStatNotifyBuilder*) builder {
  return [IMUserStatNotify builder];
}
- (IMUserStatNotifyBuilder*) toBuilder {
  return [IMUserStatNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserStat) {
    [output appendFormat:@"%@%@ {\n", indent, @"userStat"];
    [self.userStat writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserStat) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userStat storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userStat"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUserStatNotify class]]) {
    return NO;
  }
  IMUserStatNotify *otherMessage = other;
  return
      self.hasUserStat == otherMessage.hasUserStat &&
      (!self.hasUserStat || [self.userStat isEqual:otherMessage.userStat]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserStat) {
    hashCode = hashCode * 31 + [self.userStat hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUserStatNotifyBuilder()
@property (strong) IMUserStatNotify* resultImuserStatNotify;
@end

@implementation IMUserStatNotifyBuilder
@synthesize resultImuserStatNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImuserStatNotify = [[IMUserStatNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImuserStatNotify;
}
- (IMUserStatNotifyBuilder*) clear {
  self.resultImuserStatNotify = [[IMUserStatNotify alloc] init];
  return self;
}
- (IMUserStatNotifyBuilder*) clone {
  return [IMUserStatNotify builderWithPrototype:resultImuserStatNotify];
}
- (IMUserStatNotify*) defaultInstance {
  return [IMUserStatNotify defaultInstance];
}
- (IMUserStatNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUserStatNotify*) buildPartial {
  IMUserStatNotify* returnMe = resultImuserStatNotify;
  self.resultImuserStatNotify = nil;
  return returnMe;
}
- (IMUserStatNotifyBuilder*) mergeFrom:(IMUserStatNotify*) other {
  if (other == [IMUserStatNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserStat) {
    [self mergeUserStat:other.userStat];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUserStatNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUserStatNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        UserStatBuilder* subBuilder = [UserStat builder];
        if (self.hasUserStat) {
          [subBuilder mergeFrom:self.userStat];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserStat:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserStat {
  return resultImuserStatNotify.hasUserStat;
}
- (UserStat*) userStat {
  return resultImuserStatNotify.userStat;
}
- (IMUserStatNotifyBuilder*) setUserStat:(UserStat*) value {
  resultImuserStatNotify.hasUserStat = YES;
  resultImuserStatNotify.userStat = value;
  return self;
}
- (IMUserStatNotifyBuilder*) setUserStatBuilder:(UserStatBuilder*) builderForValue {
  return [self setUserStat:[builderForValue build]];
}
- (IMUserStatNotifyBuilder*) mergeUserStat:(UserStat*) value {
  if (resultImuserStatNotify.hasUserStat &&
      resultImuserStatNotify.userStat != [UserStat defaultInstance]) {
    resultImuserStatNotify.userStat =
      [[[UserStat builderWithPrototype:resultImuserStatNotify.userStat] mergeFrom:value] buildPartial];
  } else {
    resultImuserStatNotify.userStat = value;
  }
  resultImuserStatNotify.hasUserStat = YES;
  return self;
}
- (IMUserStatNotifyBuilder*) clearUserStat {
  resultImuserStatNotify.hasUserStat = NO;
  resultImuserStatNotify.userStat = [UserStat defaultInstance];
  return self;
}
@end

@interface IMUsersInfoReq ()
@property UInt64 userId;
@property (strong) PBAppendableArray * userIdListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUsersInfoReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize userIdListArray;
@dynamic userIdList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUsersInfoReq* defaultIMUsersInfoReqInstance = nil;
+ (void) initialize {
  if (self == [IMUsersInfoReq class]) {
    defaultIMUsersInfoReqInstance = [[IMUsersInfoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUsersInfoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUsersInfoReqInstance;
}
- (PBArray *)userIdList {
  return userIdListArray;
}
- (UInt64)userIdListAtIndex:(NSUInteger)index {
  return [userIdListArray uint64AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  const NSUInteger userIdListArrayCount = self.userIdListArray.count;
  if (userIdListArrayCount > 0) {
    const UInt64 *values = (const UInt64 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < userIdListArrayCount; ++i) {
      [output writeUInt64:2 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userIdListArray.count;
    const UInt64 *values = (const UInt64 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt64SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUsersInfoReq*) parseFromData:(NSData*) data {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromData:data] build];
}
+ (IMUsersInfoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromInputStream:input] build];
}
+ (IMUsersInfoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMUsersInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoReq*)[[[IMUsersInfoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoReqBuilder*) builder {
  return [[IMUsersInfoReqBuilder alloc] init];
}
+ (IMUsersInfoReqBuilder*) builderWithPrototype:(IMUsersInfoReq*) prototype {
  return [[IMUsersInfoReq builder] mergeFrom:prototype];
}
- (IMUsersInfoReqBuilder*) builder {
  return [IMUsersInfoReq builder];
}
- (IMUsersInfoReqBuilder*) toBuilder {
  return [IMUsersInfoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIdList", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  NSMutableArray * userIdListArrayArray = [NSMutableArray new];
  NSUInteger userIdListArrayCount=self.userIdListArray.count;
  for(int i=0;i<userIdListArrayCount;i++){
    [userIdListArrayArray addObject: @([self.userIdListArray uint64AtIndex:i])];
  }
  [dictionary setObject: userIdListArrayArray forKey: @"userIdList"];
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUsersInfoReq class]]) {
    return NO;
  }
  IMUsersInfoReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userIdListArray isEqualToArray:otherMessage.userIdListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUsersInfoReqBuilder()
@property (strong) IMUsersInfoReq* resultImusersInfoReq;
@end

@implementation IMUsersInfoReqBuilder
@synthesize resultImusersInfoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImusersInfoReq = [[IMUsersInfoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImusersInfoReq;
}
- (IMUsersInfoReqBuilder*) clear {
  self.resultImusersInfoReq = [[IMUsersInfoReq alloc] init];
  return self;
}
- (IMUsersInfoReqBuilder*) clone {
  return [IMUsersInfoReq builderWithPrototype:resultImusersInfoReq];
}
- (IMUsersInfoReq*) defaultInstance {
  return [IMUsersInfoReq defaultInstance];
}
- (IMUsersInfoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUsersInfoReq*) buildPartial {
  IMUsersInfoReq* returnMe = resultImusersInfoReq;
  self.resultImusersInfoReq = nil;
  return returnMe;
}
- (IMUsersInfoReqBuilder*) mergeFrom:(IMUsersInfoReq*) other {
  if (other == [IMUsersInfoReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userIdListArray.count > 0) {
    if (resultImusersInfoReq.userIdListArray == nil) {
      resultImusersInfoReq.userIdListArray = [other.userIdListArray copy];
    } else {
      [resultImusersInfoReq.userIdListArray appendArray:other.userIdListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUsersInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUsersInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self addUserIdList:[input readUInt64]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImusersInfoReq.hasUserId;
}
- (UInt64) userId {
  return resultImusersInfoReq.userId;
}
- (IMUsersInfoReqBuilder*) setUserId:(UInt64) value {
  resultImusersInfoReq.hasUserId = YES;
  resultImusersInfoReq.userId = value;
  return self;
}
- (IMUsersInfoReqBuilder*) clearUserId {
  resultImusersInfoReq.hasUserId = NO;
  resultImusersInfoReq.userId = 0L;
  return self;
}
- (PBAppendableArray *)userIdList {
  return resultImusersInfoReq.userIdListArray;
}
- (UInt64)userIdListAtIndex:(NSUInteger)index {
  return [resultImusersInfoReq userIdListAtIndex:index];
}
- (IMUsersInfoReqBuilder *)addUserIdList:(UInt64)value {
  if (resultImusersInfoReq.userIdListArray == nil) {
    resultImusersInfoReq.userIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt64];
  }
  [resultImusersInfoReq.userIdListArray addUint64:value];
  return self;
}
- (IMUsersInfoReqBuilder *)setUserIdListArray:(NSArray *)array {
  resultImusersInfoReq.userIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt64];
  return self;
}
- (IMUsersInfoReqBuilder *)setUserIdListValues:(const UInt64 *)values count:(NSUInteger)count {
  resultImusersInfoReq.userIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt64];
  return self;
}
- (IMUsersInfoReqBuilder *)clearUserIdList {
  resultImusersInfoReq.userIdListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImusersInfoReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImusersInfoReq.attachData;
}
- (IMUsersInfoReqBuilder*) setAttachData:(NSData*) value {
  resultImusersInfoReq.hasAttachData = YES;
  resultImusersInfoReq.attachData = value;
  return self;
}
- (IMUsersInfoReqBuilder*) clearAttachData {
  resultImusersInfoReq.hasAttachData = NO;
  resultImusersInfoReq.attachData = [NSData data];
  return self;
}
@end

@interface IMUsersInfoRsp ()
@property UInt64 userId;
@property (strong) NSMutableArray * userInfoListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUsersInfoRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize userInfoListArray;
@dynamic userInfoList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUsersInfoRsp* defaultIMUsersInfoRspInstance = nil;
+ (void) initialize {
  if (self == [IMUsersInfoRsp class]) {
    defaultIMUsersInfoRspInstance = [[IMUsersInfoRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUsersInfoRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUsersInfoRspInstance;
}
- (NSArray *)userInfoList {
  return userInfoListArray;
}
- (UserInfo*)userInfoListAtIndex:(NSUInteger)index {
  return [userInfoListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInituserInfoList = YES;
   [self.userInfoList enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserInfoList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserInfoList) return isInituserInfoList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUsersInfoRsp*) parseFromData:(NSData*) data {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromData:data] build];
}
+ (IMUsersInfoRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromInputStream:input] build];
}
+ (IMUsersInfoRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMUsersInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersInfoRsp*)[[[IMUsersInfoRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersInfoRspBuilder*) builder {
  return [[IMUsersInfoRspBuilder alloc] init];
}
+ (IMUsersInfoRspBuilder*) builderWithPrototype:(IMUsersInfoRsp*) prototype {
  return [[IMUsersInfoRsp builder] mergeFrom:prototype];
}
- (IMUsersInfoRspBuilder*) builder {
  return [IMUsersInfoRsp builder];
}
- (IMUsersInfoRspBuilder*) toBuilder {
  return [IMUsersInfoRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userInfoList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  for (UserInfo* element in self.userInfoListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userInfoList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUsersInfoRsp class]]) {
    return NO;
  }
  IMUsersInfoRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userInfoListArray isEqualToArray:otherMessage.userInfoListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUsersInfoRspBuilder()
@property (strong) IMUsersInfoRsp* resultImusersInfoRsp;
@end

@implementation IMUsersInfoRspBuilder
@synthesize resultImusersInfoRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImusersInfoRsp = [[IMUsersInfoRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImusersInfoRsp;
}
- (IMUsersInfoRspBuilder*) clear {
  self.resultImusersInfoRsp = [[IMUsersInfoRsp alloc] init];
  return self;
}
- (IMUsersInfoRspBuilder*) clone {
  return [IMUsersInfoRsp builderWithPrototype:resultImusersInfoRsp];
}
- (IMUsersInfoRsp*) defaultInstance {
  return [IMUsersInfoRsp defaultInstance];
}
- (IMUsersInfoRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUsersInfoRsp*) buildPartial {
  IMUsersInfoRsp* returnMe = resultImusersInfoRsp;
  self.resultImusersInfoRsp = nil;
  return returnMe;
}
- (IMUsersInfoRspBuilder*) mergeFrom:(IMUsersInfoRsp*) other {
  if (other == [IMUsersInfoRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userInfoListArray.count > 0) {
    if (resultImusersInfoRsp.userInfoListArray == nil) {
      resultImusersInfoRsp.userInfoListArray = [[NSMutableArray alloc] initWithArray:other.userInfoListArray];
    } else {
      [resultImusersInfoRsp.userInfoListArray addObjectsFromArray:other.userInfoListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUsersInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUsersInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        UserInfoBuilder* subBuilder = [UserInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserInfoList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImusersInfoRsp.hasUserId;
}
- (UInt64) userId {
  return resultImusersInfoRsp.userId;
}
- (IMUsersInfoRspBuilder*) setUserId:(UInt64) value {
  resultImusersInfoRsp.hasUserId = YES;
  resultImusersInfoRsp.userId = value;
  return self;
}
- (IMUsersInfoRspBuilder*) clearUserId {
  resultImusersInfoRsp.hasUserId = NO;
  resultImusersInfoRsp.userId = 0L;
  return self;
}
- (NSMutableArray *)userInfoList {
  return resultImusersInfoRsp.userInfoListArray;
}
- (UserInfo*)userInfoListAtIndex:(NSUInteger)index {
  return [resultImusersInfoRsp userInfoListAtIndex:index];
}
- (IMUsersInfoRspBuilder *)addUserInfoList:(UserInfo*)value {
  if (resultImusersInfoRsp.userInfoListArray == nil) {
    resultImusersInfoRsp.userInfoListArray = [[NSMutableArray alloc]init];
  }
  [resultImusersInfoRsp.userInfoListArray addObject:value];
  return self;
}
- (IMUsersInfoRspBuilder *)setUserInfoListArray:(NSArray *)array {
  resultImusersInfoRsp.userInfoListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMUsersInfoRspBuilder *)clearUserInfoList {
  resultImusersInfoRsp.userInfoListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImusersInfoRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImusersInfoRsp.attachData;
}
- (IMUsersInfoRspBuilder*) setAttachData:(NSData*) value {
  resultImusersInfoRsp.hasAttachData = YES;
  resultImusersInfoRsp.attachData = value;
  return self;
}
- (IMUsersInfoRspBuilder*) clearAttachData {
  resultImusersInfoRsp.hasAttachData = NO;
  resultImusersInfoRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMUpdatedUserInfoReq ()
@property UInt64 userId;
@property UInt64 requestUserId;
@property UInt32 latestUpdateTime;
@property (strong) NSData* attachData;
@end

@implementation IMUpdatedUserInfoReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasRequestUserId {
  return !!hasRequestUserId_;
}
- (void) setHasRequestUserId:(BOOL) _value_ {
  hasRequestUserId_ = !!_value_;
}
@synthesize requestUserId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.requestUserId = 0L;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUpdatedUserInfoReq* defaultIMUpdatedUserInfoReqInstance = nil;
+ (void) initialize {
  if (self == [IMUpdatedUserInfoReq class]) {
    defaultIMUpdatedUserInfoReqInstance = [[IMUpdatedUserInfoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUpdatedUserInfoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUpdatedUserInfoReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasRequestUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasRequestUserId) {
    [output writeUInt64:2 value:self.requestUserId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:3 value:self.latestUpdateTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasRequestUserId) {
    size_ += computeUInt64Size(2, self.requestUserId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(3, self.latestUpdateTime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUpdatedUserInfoReq*) parseFromData:(NSData*) data {
  return (IMUpdatedUserInfoReq*)[[[IMUpdatedUserInfoReq builder] mergeFromData:data] build];
}
+ (IMUpdatedUserInfoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUpdatedUserInfoReq*)[[[IMUpdatedUserInfoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUpdatedUserInfoReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMUpdatedUserInfoReq*)[[[IMUpdatedUserInfoReq builder] mergeFromInputStream:input] build];
}
+ (IMUpdatedUserInfoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUpdatedUserInfoReq*)[[[IMUpdatedUserInfoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUpdatedUserInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUpdatedUserInfoReq*)[[[IMUpdatedUserInfoReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMUpdatedUserInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUpdatedUserInfoReq*)[[[IMUpdatedUserInfoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUpdatedUserInfoReqBuilder*) builder {
  return [[IMUpdatedUserInfoReqBuilder alloc] init];
}
+ (IMUpdatedUserInfoReqBuilder*) builderWithPrototype:(IMUpdatedUserInfoReq*) prototype {
  return [[IMUpdatedUserInfoReq builder] mergeFrom:prototype];
}
- (IMUpdatedUserInfoReqBuilder*) builder {
  return [IMUpdatedUserInfoReq builder];
}
- (IMUpdatedUserInfoReqBuilder*) toBuilder {
  return [IMUpdatedUserInfoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasRequestUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestUserId", [NSNumber numberWithLongLong:self.requestUserId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasRequestUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.requestUserId] forKey: @"requestUserId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUpdatedUserInfoReq class]]) {
    return NO;
  }
  IMUpdatedUserInfoReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasRequestUserId == otherMessage.hasRequestUserId &&
      (!self.hasRequestUserId || self.requestUserId == otherMessage.requestUserId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasRequestUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.requestUserId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUpdatedUserInfoReqBuilder()
@property (strong) IMUpdatedUserInfoReq* resultImupdatedUserInfoReq;
@end

@implementation IMUpdatedUserInfoReqBuilder
@synthesize resultImupdatedUserInfoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImupdatedUserInfoReq = [[IMUpdatedUserInfoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImupdatedUserInfoReq;
}
- (IMUpdatedUserInfoReqBuilder*) clear {
  self.resultImupdatedUserInfoReq = [[IMUpdatedUserInfoReq alloc] init];
  return self;
}
- (IMUpdatedUserInfoReqBuilder*) clone {
  return [IMUpdatedUserInfoReq builderWithPrototype:resultImupdatedUserInfoReq];
}
- (IMUpdatedUserInfoReq*) defaultInstance {
  return [IMUpdatedUserInfoReq defaultInstance];
}
- (IMUpdatedUserInfoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUpdatedUserInfoReq*) buildPartial {
  IMUpdatedUserInfoReq* returnMe = resultImupdatedUserInfoReq;
  self.resultImupdatedUserInfoReq = nil;
  return returnMe;
}
- (IMUpdatedUserInfoReqBuilder*) mergeFrom:(IMUpdatedUserInfoReq*) other {
  if (other == [IMUpdatedUserInfoReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasRequestUserId) {
    [self setRequestUserId:other.requestUserId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUpdatedUserInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUpdatedUserInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setRequestUserId:[input readUInt64]];
        break;
      }
      case 24: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImupdatedUserInfoReq.hasUserId;
}
- (UInt64) userId {
  return resultImupdatedUserInfoReq.userId;
}
- (IMUpdatedUserInfoReqBuilder*) setUserId:(UInt64) value {
  resultImupdatedUserInfoReq.hasUserId = YES;
  resultImupdatedUserInfoReq.userId = value;
  return self;
}
- (IMUpdatedUserInfoReqBuilder*) clearUserId {
  resultImupdatedUserInfoReq.hasUserId = NO;
  resultImupdatedUserInfoReq.userId = 0L;
  return self;
}
- (BOOL) hasRequestUserId {
  return resultImupdatedUserInfoReq.hasRequestUserId;
}
- (UInt64) requestUserId {
  return resultImupdatedUserInfoReq.requestUserId;
}
- (IMUpdatedUserInfoReqBuilder*) setRequestUserId:(UInt64) value {
  resultImupdatedUserInfoReq.hasRequestUserId = YES;
  resultImupdatedUserInfoReq.requestUserId = value;
  return self;
}
- (IMUpdatedUserInfoReqBuilder*) clearRequestUserId {
  resultImupdatedUserInfoReq.hasRequestUserId = NO;
  resultImupdatedUserInfoReq.requestUserId = 0L;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImupdatedUserInfoReq.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImupdatedUserInfoReq.latestUpdateTime;
}
- (IMUpdatedUserInfoReqBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImupdatedUserInfoReq.hasLatestUpdateTime = YES;
  resultImupdatedUserInfoReq.latestUpdateTime = value;
  return self;
}
- (IMUpdatedUserInfoReqBuilder*) clearLatestUpdateTime {
  resultImupdatedUserInfoReq.hasLatestUpdateTime = NO;
  resultImupdatedUserInfoReq.latestUpdateTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImupdatedUserInfoReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImupdatedUserInfoReq.attachData;
}
- (IMUpdatedUserInfoReqBuilder*) setAttachData:(NSData*) value {
  resultImupdatedUserInfoReq.hasAttachData = YES;
  resultImupdatedUserInfoReq.attachData = value;
  return self;
}
- (IMUpdatedUserInfoReqBuilder*) clearAttachData {
  resultImupdatedUserInfoReq.hasAttachData = NO;
  resultImupdatedUserInfoReq.attachData = [NSData data];
  return self;
}
@end

@interface IMUpdatedUserInfoRsp ()
@property UInt64 userId;
@property (strong) NSMutableArray * userInfoListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUpdatedUserInfoRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize userInfoListArray;
@dynamic userInfoList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUpdatedUserInfoRsp* defaultIMUpdatedUserInfoRspInstance = nil;
+ (void) initialize {
  if (self == [IMUpdatedUserInfoRsp class]) {
    defaultIMUpdatedUserInfoRspInstance = [[IMUpdatedUserInfoRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUpdatedUserInfoRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUpdatedUserInfoRspInstance;
}
- (NSArray *)userInfoList {
  return userInfoListArray;
}
- (UserInfo*)userInfoListAtIndex:(NSUInteger)index {
  return [userInfoListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInituserInfoList = YES;
   [self.userInfoList enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserInfoList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserInfoList) return isInituserInfoList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUpdatedUserInfoRsp*) parseFromData:(NSData*) data {
  return (IMUpdatedUserInfoRsp*)[[[IMUpdatedUserInfoRsp builder] mergeFromData:data] build];
}
+ (IMUpdatedUserInfoRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUpdatedUserInfoRsp*)[[[IMUpdatedUserInfoRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUpdatedUserInfoRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMUpdatedUserInfoRsp*)[[[IMUpdatedUserInfoRsp builder] mergeFromInputStream:input] build];
}
+ (IMUpdatedUserInfoRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUpdatedUserInfoRsp*)[[[IMUpdatedUserInfoRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUpdatedUserInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUpdatedUserInfoRsp*)[[[IMUpdatedUserInfoRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMUpdatedUserInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUpdatedUserInfoRsp*)[[[IMUpdatedUserInfoRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUpdatedUserInfoRspBuilder*) builder {
  return [[IMUpdatedUserInfoRspBuilder alloc] init];
}
+ (IMUpdatedUserInfoRspBuilder*) builderWithPrototype:(IMUpdatedUserInfoRsp*) prototype {
  return [[IMUpdatedUserInfoRsp builder] mergeFrom:prototype];
}
- (IMUpdatedUserInfoRspBuilder*) builder {
  return [IMUpdatedUserInfoRsp builder];
}
- (IMUpdatedUserInfoRspBuilder*) toBuilder {
  return [IMUpdatedUserInfoRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userInfoList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  for (UserInfo* element in self.userInfoListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userInfoList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUpdatedUserInfoRsp class]]) {
    return NO;
  }
  IMUpdatedUserInfoRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userInfoListArray isEqualToArray:otherMessage.userInfoListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  [self.userInfoListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUpdatedUserInfoRspBuilder()
@property (strong) IMUpdatedUserInfoRsp* resultImupdatedUserInfoRsp;
@end

@implementation IMUpdatedUserInfoRspBuilder
@synthesize resultImupdatedUserInfoRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImupdatedUserInfoRsp = [[IMUpdatedUserInfoRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImupdatedUserInfoRsp;
}
- (IMUpdatedUserInfoRspBuilder*) clear {
  self.resultImupdatedUserInfoRsp = [[IMUpdatedUserInfoRsp alloc] init];
  return self;
}
- (IMUpdatedUserInfoRspBuilder*) clone {
  return [IMUpdatedUserInfoRsp builderWithPrototype:resultImupdatedUserInfoRsp];
}
- (IMUpdatedUserInfoRsp*) defaultInstance {
  return [IMUpdatedUserInfoRsp defaultInstance];
}
- (IMUpdatedUserInfoRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUpdatedUserInfoRsp*) buildPartial {
  IMUpdatedUserInfoRsp* returnMe = resultImupdatedUserInfoRsp;
  self.resultImupdatedUserInfoRsp = nil;
  return returnMe;
}
- (IMUpdatedUserInfoRspBuilder*) mergeFrom:(IMUpdatedUserInfoRsp*) other {
  if (other == [IMUpdatedUserInfoRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userInfoListArray.count > 0) {
    if (resultImupdatedUserInfoRsp.userInfoListArray == nil) {
      resultImupdatedUserInfoRsp.userInfoListArray = [[NSMutableArray alloc] initWithArray:other.userInfoListArray];
    } else {
      [resultImupdatedUserInfoRsp.userInfoListArray addObjectsFromArray:other.userInfoListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUpdatedUserInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUpdatedUserInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        UserInfoBuilder* subBuilder = [UserInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserInfoList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImupdatedUserInfoRsp.hasUserId;
}
- (UInt64) userId {
  return resultImupdatedUserInfoRsp.userId;
}
- (IMUpdatedUserInfoRspBuilder*) setUserId:(UInt64) value {
  resultImupdatedUserInfoRsp.hasUserId = YES;
  resultImupdatedUserInfoRsp.userId = value;
  return self;
}
- (IMUpdatedUserInfoRspBuilder*) clearUserId {
  resultImupdatedUserInfoRsp.hasUserId = NO;
  resultImupdatedUserInfoRsp.userId = 0L;
  return self;
}
- (NSMutableArray *)userInfoList {
  return resultImupdatedUserInfoRsp.userInfoListArray;
}
- (UserInfo*)userInfoListAtIndex:(NSUInteger)index {
  return [resultImupdatedUserInfoRsp userInfoListAtIndex:index];
}
- (IMUpdatedUserInfoRspBuilder *)addUserInfoList:(UserInfo*)value {
  if (resultImupdatedUserInfoRsp.userInfoListArray == nil) {
    resultImupdatedUserInfoRsp.userInfoListArray = [[NSMutableArray alloc]init];
  }
  [resultImupdatedUserInfoRsp.userInfoListArray addObject:value];
  return self;
}
- (IMUpdatedUserInfoRspBuilder *)setUserInfoListArray:(NSArray *)array {
  resultImupdatedUserInfoRsp.userInfoListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMUpdatedUserInfoRspBuilder *)clearUserInfoList {
  resultImupdatedUserInfoRsp.userInfoListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImupdatedUserInfoRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImupdatedUserInfoRsp.attachData;
}
- (IMUpdatedUserInfoRspBuilder*) setAttachData:(NSData*) value {
  resultImupdatedUserInfoRsp.hasAttachData = YES;
  resultImupdatedUserInfoRsp.attachData = value;
  return self;
}
- (IMUpdatedUserInfoRspBuilder*) clearAttachData {
  resultImupdatedUserInfoRsp.hasAttachData = NO;
  resultImupdatedUserInfoRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMModifyUserInfoReq ()
@property UInt64 userId;
@property UserModifyType updatetype;
@property (strong) NSString* value;
@property UInt64 contactuserId;
@property (strong) NSString* addtionvalue;
@property (strong) NSData* attachData;
@end

@implementation IMModifyUserInfoReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasUpdatetype {
  return !!hasUpdatetype_;
}
- (void) setHasUpdatetype:(BOOL) _value_ {
  hasUpdatetype_ = !!_value_;
}
@synthesize updatetype;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (BOOL) hasContactuserId {
  return !!hasContactuserId_;
}
- (void) setHasContactuserId:(BOOL) _value_ {
  hasContactuserId_ = !!_value_;
}
@synthesize contactuserId;
- (BOOL) hasAddtionvalue {
  return !!hasAddtionvalue_;
}
- (void) setHasAddtionvalue:(BOOL) _value_ {
  hasAddtionvalue_ = !!_value_;
}
@synthesize addtionvalue;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.updatetype = UserModifyTypeAvatar;
    self.value = @"";
    self.contactuserId = 0L;
    self.addtionvalue = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMModifyUserInfoReq* defaultIMModifyUserInfoReqInstance = nil;
+ (void) initialize {
  if (self == [IMModifyUserInfoReq class]) {
    defaultIMModifyUserInfoReqInstance = [[IMModifyUserInfoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMModifyUserInfoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMModifyUserInfoReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasUpdatetype) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasUpdatetype) {
    [output writeEnum:2 value:self.updatetype];
  }
  if (self.hasValue) {
    [output writeString:3 value:self.value];
  }
  if (self.hasContactuserId) {
    [output writeUInt64:18 value:self.contactuserId];
  }
  if (self.hasAddtionvalue) {
    [output writeString:19 value:self.addtionvalue];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasUpdatetype) {
    size_ += computeEnumSize(2, self.updatetype);
  }
  if (self.hasValue) {
    size_ += computeStringSize(3, self.value);
  }
  if (self.hasContactuserId) {
    size_ += computeUInt64Size(18, self.contactuserId);
  }
  if (self.hasAddtionvalue) {
    size_ += computeStringSize(19, self.addtionvalue);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMModifyUserInfoReq*) parseFromData:(NSData*) data {
  return (IMModifyUserInfoReq*)[[[IMModifyUserInfoReq builder] mergeFromData:data] build];
}
+ (IMModifyUserInfoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyUserInfoReq*)[[[IMModifyUserInfoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMModifyUserInfoReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMModifyUserInfoReq*)[[[IMModifyUserInfoReq builder] mergeFromInputStream:input] build];
}
+ (IMModifyUserInfoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyUserInfoReq*)[[[IMModifyUserInfoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMModifyUserInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMModifyUserInfoReq*)[[[IMModifyUserInfoReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMModifyUserInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyUserInfoReq*)[[[IMModifyUserInfoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMModifyUserInfoReqBuilder*) builder {
  return [[IMModifyUserInfoReqBuilder alloc] init];
}
+ (IMModifyUserInfoReqBuilder*) builderWithPrototype:(IMModifyUserInfoReq*) prototype {
  return [[IMModifyUserInfoReq builder] mergeFrom:prototype];
}
- (IMModifyUserInfoReqBuilder*) builder {
  return [IMModifyUserInfoReq builder];
}
- (IMModifyUserInfoReqBuilder*) toBuilder {
  return [IMModifyUserInfoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasUpdatetype) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updatetype", NSStringFromUserModifyType(self.updatetype)];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  if (self.hasContactuserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contactuserId", [NSNumber numberWithLongLong:self.contactuserId]];
  }
  if (self.hasAddtionvalue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addtionvalue", self.addtionvalue];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasUpdatetype) {
    [dictionary setObject: @(self.updatetype) forKey: @"updatetype"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  if (self.hasContactuserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.contactuserId] forKey: @"contactuserId"];
  }
  if (self.hasAddtionvalue) {
    [dictionary setObject: self.addtionvalue forKey: @"addtionvalue"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMModifyUserInfoReq class]]) {
    return NO;
  }
  IMModifyUserInfoReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasUpdatetype == otherMessage.hasUpdatetype &&
      (!self.hasUpdatetype || self.updatetype == otherMessage.updatetype) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      self.hasContactuserId == otherMessage.hasContactuserId &&
      (!self.hasContactuserId || self.contactuserId == otherMessage.contactuserId) &&
      self.hasAddtionvalue == otherMessage.hasAddtionvalue &&
      (!self.hasAddtionvalue || [self.addtionvalue isEqual:otherMessage.addtionvalue]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasUpdatetype) {
    hashCode = hashCode * 31 + self.updatetype;
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  if (self.hasContactuserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.contactuserId] hash];
  }
  if (self.hasAddtionvalue) {
    hashCode = hashCode * 31 + [self.addtionvalue hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMModifyUserInfoReqBuilder()
@property (strong) IMModifyUserInfoReq* resultImmodifyUserInfoReq;
@end

@implementation IMModifyUserInfoReqBuilder
@synthesize resultImmodifyUserInfoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmodifyUserInfoReq = [[IMModifyUserInfoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmodifyUserInfoReq;
}
- (IMModifyUserInfoReqBuilder*) clear {
  self.resultImmodifyUserInfoReq = [[IMModifyUserInfoReq alloc] init];
  return self;
}
- (IMModifyUserInfoReqBuilder*) clone {
  return [IMModifyUserInfoReq builderWithPrototype:resultImmodifyUserInfoReq];
}
- (IMModifyUserInfoReq*) defaultInstance {
  return [IMModifyUserInfoReq defaultInstance];
}
- (IMModifyUserInfoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMModifyUserInfoReq*) buildPartial {
  IMModifyUserInfoReq* returnMe = resultImmodifyUserInfoReq;
  self.resultImmodifyUserInfoReq = nil;
  return returnMe;
}
- (IMModifyUserInfoReqBuilder*) mergeFrom:(IMModifyUserInfoReq*) other {
  if (other == [IMModifyUserInfoReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasUpdatetype) {
    [self setUpdatetype:other.updatetype];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  if (other.hasContactuserId) {
    [self setContactuserId:other.contactuserId];
  }
  if (other.hasAddtionvalue) {
    [self setAddtionvalue:other.addtionvalue];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMModifyUserInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMModifyUserInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        UserModifyType value = (UserModifyType)[input readEnum];
        if (UserModifyTypeIsValidValue(value)) {
          [self setUpdatetype:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setValue:[input readString]];
        break;
      }
      case 144: {
        [self setContactuserId:[input readUInt64]];
        break;
      }
      case 154: {
        [self setAddtionvalue:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImmodifyUserInfoReq.hasUserId;
}
- (UInt64) userId {
  return resultImmodifyUserInfoReq.userId;
}
- (IMModifyUserInfoReqBuilder*) setUserId:(UInt64) value {
  resultImmodifyUserInfoReq.hasUserId = YES;
  resultImmodifyUserInfoReq.userId = value;
  return self;
}
- (IMModifyUserInfoReqBuilder*) clearUserId {
  resultImmodifyUserInfoReq.hasUserId = NO;
  resultImmodifyUserInfoReq.userId = 0L;
  return self;
}
- (BOOL) hasUpdatetype {
  return resultImmodifyUserInfoReq.hasUpdatetype;
}
- (UserModifyType) updatetype {
  return resultImmodifyUserInfoReq.updatetype;
}
- (IMModifyUserInfoReqBuilder*) setUpdatetype:(UserModifyType) value {
  resultImmodifyUserInfoReq.hasUpdatetype = YES;
  resultImmodifyUserInfoReq.updatetype = value;
  return self;
}
- (IMModifyUserInfoReqBuilder*) clearUpdatetype {
  resultImmodifyUserInfoReq.hasUpdatetype = NO;
  resultImmodifyUserInfoReq.updatetype = UserModifyTypeAvatar;
  return self;
}
- (BOOL) hasValue {
  return resultImmodifyUserInfoReq.hasValue;
}
- (NSString*) value {
  return resultImmodifyUserInfoReq.value;
}
- (IMModifyUserInfoReqBuilder*) setValue:(NSString*) value {
  resultImmodifyUserInfoReq.hasValue = YES;
  resultImmodifyUserInfoReq.value = value;
  return self;
}
- (IMModifyUserInfoReqBuilder*) clearValue {
  resultImmodifyUserInfoReq.hasValue = NO;
  resultImmodifyUserInfoReq.value = @"";
  return self;
}
- (BOOL) hasContactuserId {
  return resultImmodifyUserInfoReq.hasContactuserId;
}
- (UInt64) contactuserId {
  return resultImmodifyUserInfoReq.contactuserId;
}
- (IMModifyUserInfoReqBuilder*) setContactuserId:(UInt64) value {
  resultImmodifyUserInfoReq.hasContactuserId = YES;
  resultImmodifyUserInfoReq.contactuserId = value;
  return self;
}
- (IMModifyUserInfoReqBuilder*) clearContactuserId {
  resultImmodifyUserInfoReq.hasContactuserId = NO;
  resultImmodifyUserInfoReq.contactuserId = 0L;
  return self;
}
- (BOOL) hasAddtionvalue {
  return resultImmodifyUserInfoReq.hasAddtionvalue;
}
- (NSString*) addtionvalue {
  return resultImmodifyUserInfoReq.addtionvalue;
}
- (IMModifyUserInfoReqBuilder*) setAddtionvalue:(NSString*) value {
  resultImmodifyUserInfoReq.hasAddtionvalue = YES;
  resultImmodifyUserInfoReq.addtionvalue = value;
  return self;
}
- (IMModifyUserInfoReqBuilder*) clearAddtionvalue {
  resultImmodifyUserInfoReq.hasAddtionvalue = NO;
  resultImmodifyUserInfoReq.addtionvalue = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImmodifyUserInfoReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImmodifyUserInfoReq.attachData;
}
- (IMModifyUserInfoReqBuilder*) setAttachData:(NSData*) value {
  resultImmodifyUserInfoReq.hasAttachData = YES;
  resultImmodifyUserInfoReq.attachData = value;
  return self;
}
- (IMModifyUserInfoReqBuilder*) clearAttachData {
  resultImmodifyUserInfoReq.hasAttachData = NO;
  resultImmodifyUserInfoReq.attachData = [NSData data];
  return self;
}
@end

@interface IMModifyUserInfoRsp ()
@property UInt64 userId;
@property UInt32 responeTime;
@property (strong) NSData* attachData;
@end

@implementation IMModifyUserInfoRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasResponeTime {
  return !!hasResponeTime_;
}
- (void) setHasResponeTime:(BOOL) _value_ {
  hasResponeTime_ = !!_value_;
}
@synthesize responeTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.responeTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMModifyUserInfoRsp* defaultIMModifyUserInfoRspInstance = nil;
+ (void) initialize {
  if (self == [IMModifyUserInfoRsp class]) {
    defaultIMModifyUserInfoRspInstance = [[IMModifyUserInfoRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMModifyUserInfoRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMModifyUserInfoRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasResponeTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasResponeTime) {
    [output writeUInt32:2 value:self.responeTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasResponeTime) {
    size_ += computeUInt32Size(2, self.responeTime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMModifyUserInfoRsp*) parseFromData:(NSData*) data {
  return (IMModifyUserInfoRsp*)[[[IMModifyUserInfoRsp builder] mergeFromData:data] build];
}
+ (IMModifyUserInfoRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyUserInfoRsp*)[[[IMModifyUserInfoRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMModifyUserInfoRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMModifyUserInfoRsp*)[[[IMModifyUserInfoRsp builder] mergeFromInputStream:input] build];
}
+ (IMModifyUserInfoRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyUserInfoRsp*)[[[IMModifyUserInfoRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMModifyUserInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMModifyUserInfoRsp*)[[[IMModifyUserInfoRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMModifyUserInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyUserInfoRsp*)[[[IMModifyUserInfoRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMModifyUserInfoRspBuilder*) builder {
  return [[IMModifyUserInfoRspBuilder alloc] init];
}
+ (IMModifyUserInfoRspBuilder*) builderWithPrototype:(IMModifyUserInfoRsp*) prototype {
  return [[IMModifyUserInfoRsp builder] mergeFrom:prototype];
}
- (IMModifyUserInfoRspBuilder*) builder {
  return [IMModifyUserInfoRsp builder];
}
- (IMModifyUserInfoRspBuilder*) toBuilder {
  return [IMModifyUserInfoRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasResponeTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"responeTime", [NSNumber numberWithInteger:self.responeTime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasResponeTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.responeTime] forKey: @"responeTime"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMModifyUserInfoRsp class]]) {
    return NO;
  }
  IMModifyUserInfoRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasResponeTime == otherMessage.hasResponeTime &&
      (!self.hasResponeTime || self.responeTime == otherMessage.responeTime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasResponeTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.responeTime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMModifyUserInfoRspBuilder()
@property (strong) IMModifyUserInfoRsp* resultImmodifyUserInfoRsp;
@end

@implementation IMModifyUserInfoRspBuilder
@synthesize resultImmodifyUserInfoRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmodifyUserInfoRsp = [[IMModifyUserInfoRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmodifyUserInfoRsp;
}
- (IMModifyUserInfoRspBuilder*) clear {
  self.resultImmodifyUserInfoRsp = [[IMModifyUserInfoRsp alloc] init];
  return self;
}
- (IMModifyUserInfoRspBuilder*) clone {
  return [IMModifyUserInfoRsp builderWithPrototype:resultImmodifyUserInfoRsp];
}
- (IMModifyUserInfoRsp*) defaultInstance {
  return [IMModifyUserInfoRsp defaultInstance];
}
- (IMModifyUserInfoRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMModifyUserInfoRsp*) buildPartial {
  IMModifyUserInfoRsp* returnMe = resultImmodifyUserInfoRsp;
  self.resultImmodifyUserInfoRsp = nil;
  return returnMe;
}
- (IMModifyUserInfoRspBuilder*) mergeFrom:(IMModifyUserInfoRsp*) other {
  if (other == [IMModifyUserInfoRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasResponeTime) {
    [self setResponeTime:other.responeTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMModifyUserInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMModifyUserInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setResponeTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImmodifyUserInfoRsp.hasUserId;
}
- (UInt64) userId {
  return resultImmodifyUserInfoRsp.userId;
}
- (IMModifyUserInfoRspBuilder*) setUserId:(UInt64) value {
  resultImmodifyUserInfoRsp.hasUserId = YES;
  resultImmodifyUserInfoRsp.userId = value;
  return self;
}
- (IMModifyUserInfoRspBuilder*) clearUserId {
  resultImmodifyUserInfoRsp.hasUserId = NO;
  resultImmodifyUserInfoRsp.userId = 0L;
  return self;
}
- (BOOL) hasResponeTime {
  return resultImmodifyUserInfoRsp.hasResponeTime;
}
- (UInt32) responeTime {
  return resultImmodifyUserInfoRsp.responeTime;
}
- (IMModifyUserInfoRspBuilder*) setResponeTime:(UInt32) value {
  resultImmodifyUserInfoRsp.hasResponeTime = YES;
  resultImmodifyUserInfoRsp.responeTime = value;
  return self;
}
- (IMModifyUserInfoRspBuilder*) clearResponeTime {
  resultImmodifyUserInfoRsp.hasResponeTime = NO;
  resultImmodifyUserInfoRsp.responeTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImmodifyUserInfoRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImmodifyUserInfoRsp.attachData;
}
- (IMModifyUserInfoRspBuilder*) setAttachData:(NSData*) value {
  resultImmodifyUserInfoRsp.hasAttachData = YES;
  resultImmodifyUserInfoRsp.attachData = value;
  return self;
}
- (IMModifyUserInfoRspBuilder*) clearAttachData {
  resultImmodifyUserInfoRsp.hasAttachData = NO;
  resultImmodifyUserInfoRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMRemoveSessionReq ()
@property UInt64 userId;
@property SessionType sessionType;
@property UInt64 sessionId;
@property (strong) NSData* attachData;
@end

@implementation IMRemoveSessionReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMRemoveSessionReq* defaultIMRemoveSessionReqInstance = nil;
+ (void) initialize {
  if (self == [IMRemoveSessionReq class]) {
    defaultIMRemoveSessionReqInstance = [[IMRemoveSessionReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRemoveSessionReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRemoveSessionReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasSessionType) {
    [output writeEnum:2 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt64:3 value:self.sessionId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(2, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt64Size(3, self.sessionId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRemoveSessionReq*) parseFromData:(NSData*) data {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromData:data] build];
}
+ (IMRemoveSessionReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromInputStream:input] build];
}
+ (IMRemoveSessionReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMRemoveSessionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionReq*)[[[IMRemoveSessionReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionReqBuilder*) builder {
  return [[IMRemoveSessionReqBuilder alloc] init];
}
+ (IMRemoveSessionReqBuilder*) builderWithPrototype:(IMRemoveSessionReq*) prototype {
  return [[IMRemoveSessionReq builder] mergeFrom:prototype];
}
- (IMRemoveSessionReqBuilder*) builder {
  return [IMRemoveSessionReq builder];
}
- (IMRemoveSessionReqBuilder*) toBuilder {
  return [IMRemoveSessionReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRemoveSessionReq class]]) {
    return NO;
  }
  IMRemoveSessionReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRemoveSessionReqBuilder()
@property (strong) IMRemoveSessionReq* resultImremoveSessionReq;
@end

@implementation IMRemoveSessionReqBuilder
@synthesize resultImremoveSessionReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImremoveSessionReq = [[IMRemoveSessionReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImremoveSessionReq;
}
- (IMRemoveSessionReqBuilder*) clear {
  self.resultImremoveSessionReq = [[IMRemoveSessionReq alloc] init];
  return self;
}
- (IMRemoveSessionReqBuilder*) clone {
  return [IMRemoveSessionReq builderWithPrototype:resultImremoveSessionReq];
}
- (IMRemoveSessionReq*) defaultInstance {
  return [IMRemoveSessionReq defaultInstance];
}
- (IMRemoveSessionReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRemoveSessionReq*) buildPartial {
  IMRemoveSessionReq* returnMe = resultImremoveSessionReq;
  self.resultImremoveSessionReq = nil;
  return returnMe;
}
- (IMRemoveSessionReqBuilder*) mergeFrom:(IMRemoveSessionReq*) other {
  if (other == [IMRemoveSessionReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRemoveSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRemoveSessionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readUInt64]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImremoveSessionReq.hasUserId;
}
- (UInt64) userId {
  return resultImremoveSessionReq.userId;
}
- (IMRemoveSessionReqBuilder*) setUserId:(UInt64) value {
  resultImremoveSessionReq.hasUserId = YES;
  resultImremoveSessionReq.userId = value;
  return self;
}
- (IMRemoveSessionReqBuilder*) clearUserId {
  resultImremoveSessionReq.hasUserId = NO;
  resultImremoveSessionReq.userId = 0L;
  return self;
}
- (BOOL) hasSessionType {
  return resultImremoveSessionReq.hasSessionType;
}
- (SessionType) sessionType {
  return resultImremoveSessionReq.sessionType;
}
- (IMRemoveSessionReqBuilder*) setSessionType:(SessionType) value {
  resultImremoveSessionReq.hasSessionType = YES;
  resultImremoveSessionReq.sessionType = value;
  return self;
}
- (IMRemoveSessionReqBuilder*) clearSessionType {
  resultImremoveSessionReq.hasSessionType = NO;
  resultImremoveSessionReq.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return resultImremoveSessionReq.hasSessionId;
}
- (UInt64) sessionId {
  return resultImremoveSessionReq.sessionId;
}
- (IMRemoveSessionReqBuilder*) setSessionId:(UInt64) value {
  resultImremoveSessionReq.hasSessionId = YES;
  resultImremoveSessionReq.sessionId = value;
  return self;
}
- (IMRemoveSessionReqBuilder*) clearSessionId {
  resultImremoveSessionReq.hasSessionId = NO;
  resultImremoveSessionReq.sessionId = 0L;
  return self;
}
- (BOOL) hasAttachData {
  return resultImremoveSessionReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImremoveSessionReq.attachData;
}
- (IMRemoveSessionReqBuilder*) setAttachData:(NSData*) value {
  resultImremoveSessionReq.hasAttachData = YES;
  resultImremoveSessionReq.attachData = value;
  return self;
}
- (IMRemoveSessionReqBuilder*) clearAttachData {
  resultImremoveSessionReq.hasAttachData = NO;
  resultImremoveSessionReq.attachData = [NSData data];
  return self;
}
@end

@interface IMRemoveSessionRsp ()
@property UInt64 userId;
@property UInt32 resultCode;
@property SessionType sessionType;
@property UInt64 sessionId;
@property (strong) NSData* attachData;
@end

@implementation IMRemoveSessionRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.resultCode = 0;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMRemoveSessionRsp* defaultIMRemoveSessionRspInstance = nil;
+ (void) initialize {
  if (self == [IMRemoveSessionRsp class]) {
    defaultIMRemoveSessionRspInstance = [[IMRemoveSessionRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRemoveSessionRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRemoveSessionRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasResultCode) {
    [output writeUInt32:2 value:self.resultCode];
  }
  if (self.hasSessionType) {
    [output writeEnum:3 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt64:4 value:self.sessionId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(2, self.resultCode);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(3, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt64Size(4, self.sessionId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRemoveSessionRsp*) parseFromData:(NSData*) data {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromData:data] build];
}
+ (IMRemoveSessionRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromInputStream:input] build];
}
+ (IMRemoveSessionRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMRemoveSessionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionRsp*)[[[IMRemoveSessionRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionRspBuilder*) builder {
  return [[IMRemoveSessionRspBuilder alloc] init];
}
+ (IMRemoveSessionRspBuilder*) builderWithPrototype:(IMRemoveSessionRsp*) prototype {
  return [[IMRemoveSessionRsp builder] mergeFrom:prototype];
}
- (IMRemoveSessionRspBuilder*) builder {
  return [IMRemoveSessionRsp builder];
}
- (IMRemoveSessionRspBuilder*) toBuilder {
  return [IMRemoveSessionRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRemoveSessionRsp class]]) {
    return NO;
  }
  IMRemoveSessionRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRemoveSessionRspBuilder()
@property (strong) IMRemoveSessionRsp* resultImremoveSessionRsp;
@end

@implementation IMRemoveSessionRspBuilder
@synthesize resultImremoveSessionRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImremoveSessionRsp = [[IMRemoveSessionRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImremoveSessionRsp;
}
- (IMRemoveSessionRspBuilder*) clear {
  self.resultImremoveSessionRsp = [[IMRemoveSessionRsp alloc] init];
  return self;
}
- (IMRemoveSessionRspBuilder*) clone {
  return [IMRemoveSessionRsp builderWithPrototype:resultImremoveSessionRsp];
}
- (IMRemoveSessionRsp*) defaultInstance {
  return [IMRemoveSessionRsp defaultInstance];
}
- (IMRemoveSessionRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRemoveSessionRsp*) buildPartial {
  IMRemoveSessionRsp* returnMe = resultImremoveSessionRsp;
  self.resultImremoveSessionRsp = nil;
  return returnMe;
}
- (IMRemoveSessionRspBuilder*) mergeFrom:(IMRemoveSessionRsp*) other {
  if (other == [IMRemoveSessionRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRemoveSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRemoveSessionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 24: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setSessionId:[input readUInt64]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImremoveSessionRsp.hasUserId;
}
- (UInt64) userId {
  return resultImremoveSessionRsp.userId;
}
- (IMRemoveSessionRspBuilder*) setUserId:(UInt64) value {
  resultImremoveSessionRsp.hasUserId = YES;
  resultImremoveSessionRsp.userId = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearUserId {
  resultImremoveSessionRsp.hasUserId = NO;
  resultImremoveSessionRsp.userId = 0L;
  return self;
}
- (BOOL) hasResultCode {
  return resultImremoveSessionRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImremoveSessionRsp.resultCode;
}
- (IMRemoveSessionRspBuilder*) setResultCode:(UInt32) value {
  resultImremoveSessionRsp.hasResultCode = YES;
  resultImremoveSessionRsp.resultCode = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearResultCode {
  resultImremoveSessionRsp.hasResultCode = NO;
  resultImremoveSessionRsp.resultCode = 0;
  return self;
}
- (BOOL) hasSessionType {
  return resultImremoveSessionRsp.hasSessionType;
}
- (SessionType) sessionType {
  return resultImremoveSessionRsp.sessionType;
}
- (IMRemoveSessionRspBuilder*) setSessionType:(SessionType) value {
  resultImremoveSessionRsp.hasSessionType = YES;
  resultImremoveSessionRsp.sessionType = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearSessionType {
  resultImremoveSessionRsp.hasSessionType = NO;
  resultImremoveSessionRsp.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return resultImremoveSessionRsp.hasSessionId;
}
- (UInt64) sessionId {
  return resultImremoveSessionRsp.sessionId;
}
- (IMRemoveSessionRspBuilder*) setSessionId:(UInt64) value {
  resultImremoveSessionRsp.hasSessionId = YES;
  resultImremoveSessionRsp.sessionId = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearSessionId {
  resultImremoveSessionRsp.hasSessionId = NO;
  resultImremoveSessionRsp.sessionId = 0L;
  return self;
}
- (BOOL) hasAttachData {
  return resultImremoveSessionRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImremoveSessionRsp.attachData;
}
- (IMRemoveSessionRspBuilder*) setAttachData:(NSData*) value {
  resultImremoveSessionRsp.hasAttachData = YES;
  resultImremoveSessionRsp.attachData = value;
  return self;
}
- (IMRemoveSessionRspBuilder*) clearAttachData {
  resultImremoveSessionRsp.hasAttachData = NO;
  resultImremoveSessionRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMAllUserReq ()
@property UInt64 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSData* attachData;
@end

@implementation IMAllUserReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMAllUserReq* defaultIMAllUserReqInstance = nil;
+ (void) initialize {
  if (self == [IMAllUserReq class]) {
    defaultIMAllUserReqInstance = [[IMAllUserReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAllUserReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAllUserReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAllUserReq*) parseFromData:(NSData*) data {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromData:data] build];
}
+ (IMAllUserReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromInputStream:input] build];
}
+ (IMAllUserReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMAllUserReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserReq*)[[[IMAllUserReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserReqBuilder*) builder {
  return [[IMAllUserReqBuilder alloc] init];
}
+ (IMAllUserReqBuilder*) builderWithPrototype:(IMAllUserReq*) prototype {
  return [[IMAllUserReq builder] mergeFrom:prototype];
}
- (IMAllUserReqBuilder*) builder {
  return [IMAllUserReq builder];
}
- (IMAllUserReqBuilder*) toBuilder {
  return [IMAllUserReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAllUserReq class]]) {
    return NO;
  }
  IMAllUserReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAllUserReqBuilder()
@property (strong) IMAllUserReq* resultImallUserReq;
@end

@implementation IMAllUserReqBuilder
@synthesize resultImallUserReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImallUserReq = [[IMAllUserReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImallUserReq;
}
- (IMAllUserReqBuilder*) clear {
  self.resultImallUserReq = [[IMAllUserReq alloc] init];
  return self;
}
- (IMAllUserReqBuilder*) clone {
  return [IMAllUserReq builderWithPrototype:resultImallUserReq];
}
- (IMAllUserReq*) defaultInstance {
  return [IMAllUserReq defaultInstance];
}
- (IMAllUserReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAllUserReq*) buildPartial {
  IMAllUserReq* returnMe = resultImallUserReq;
  self.resultImallUserReq = nil;
  return returnMe;
}
- (IMAllUserReqBuilder*) mergeFrom:(IMAllUserReq*) other {
  if (other == [IMAllUserReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAllUserReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAllUserReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImallUserReq.hasUserId;
}
- (UInt64) userId {
  return resultImallUserReq.userId;
}
- (IMAllUserReqBuilder*) setUserId:(UInt64) value {
  resultImallUserReq.hasUserId = YES;
  resultImallUserReq.userId = value;
  return self;
}
- (IMAllUserReqBuilder*) clearUserId {
  resultImallUserReq.hasUserId = NO;
  resultImallUserReq.userId = 0L;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImallUserReq.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImallUserReq.latestUpdateTime;
}
- (IMAllUserReqBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImallUserReq.hasLatestUpdateTime = YES;
  resultImallUserReq.latestUpdateTime = value;
  return self;
}
- (IMAllUserReqBuilder*) clearLatestUpdateTime {
  resultImallUserReq.hasLatestUpdateTime = NO;
  resultImallUserReq.latestUpdateTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImallUserReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImallUserReq.attachData;
}
- (IMAllUserReqBuilder*) setAttachData:(NSData*) value {
  resultImallUserReq.hasAttachData = YES;
  resultImallUserReq.attachData = value;
  return self;
}
- (IMAllUserReqBuilder*) clearAttachData {
  resultImallUserReq.hasAttachData = NO;
  resultImallUserReq.attachData = [NSData data];
  return self;
}
@end

@interface IMAllUserRsp ()
@property UInt64 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSMutableArray * contactListArray;
@property (strong) NSData* attachData;
@end

@implementation IMAllUserRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
@synthesize contactListArray;
@dynamic contactList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMAllUserRsp* defaultIMAllUserRspInstance = nil;
+ (void) initialize {
  if (self == [IMAllUserRsp class]) {
    defaultIMAllUserRspInstance = [[IMAllUserRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAllUserRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAllUserRspInstance;
}
- (NSArray *)contactList {
  return contactListArray;
}
- (ContactInfo*)contactListAtIndex:(NSUInteger)index {
  return [contactListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  __block BOOL isInitcontactList = YES;
   [self.contactList enumerateObjectsUsingBlock:^(ContactInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcontactList = NO;
      *stop = YES;
    }
  }];
  if (!isInitcontactList) return isInitcontactList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  [self.contactListArray enumerateObjectsUsingBlock:^(ContactInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  [self.contactListArray enumerateObjectsUsingBlock:^(ContactInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAllUserRsp*) parseFromData:(NSData*) data {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromData:data] build];
}
+ (IMAllUserRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromInputStream:input] build];
}
+ (IMAllUserRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMAllUserRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAllUserRsp*)[[[IMAllUserRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAllUserRspBuilder*) builder {
  return [[IMAllUserRspBuilder alloc] init];
}
+ (IMAllUserRspBuilder*) builderWithPrototype:(IMAllUserRsp*) prototype {
  return [[IMAllUserRsp builder] mergeFrom:prototype];
}
- (IMAllUserRspBuilder*) builder {
  return [IMAllUserRsp builder];
}
- (IMAllUserRspBuilder*) toBuilder {
  return [IMAllUserRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  [self.contactListArray enumerateObjectsUsingBlock:^(ContactInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"contactList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  for (ContactInfo* element in self.contactListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"contactList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAllUserRsp class]]) {
    return NO;
  }
  IMAllUserRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      [self.contactListArray isEqualToArray:otherMessage.contactListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  [self.contactListArray enumerateObjectsUsingBlock:^(ContactInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAllUserRspBuilder()
@property (strong) IMAllUserRsp* resultImallUserRsp;
@end

@implementation IMAllUserRspBuilder
@synthesize resultImallUserRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImallUserRsp = [[IMAllUserRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImallUserRsp;
}
- (IMAllUserRspBuilder*) clear {
  self.resultImallUserRsp = [[IMAllUserRsp alloc] init];
  return self;
}
- (IMAllUserRspBuilder*) clone {
  return [IMAllUserRsp builderWithPrototype:resultImallUserRsp];
}
- (IMAllUserRsp*) defaultInstance {
  return [IMAllUserRsp defaultInstance];
}
- (IMAllUserRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAllUserRsp*) buildPartial {
  IMAllUserRsp* returnMe = resultImallUserRsp;
  self.resultImallUserRsp = nil;
  return returnMe;
}
- (IMAllUserRspBuilder*) mergeFrom:(IMAllUserRsp*) other {
  if (other == [IMAllUserRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.contactListArray.count > 0) {
    if (resultImallUserRsp.contactListArray == nil) {
      resultImallUserRsp.contactListArray = [[NSMutableArray alloc] initWithArray:other.contactListArray];
    } else {
      [resultImallUserRsp.contactListArray addObjectsFromArray:other.contactListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAllUserRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAllUserRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 26: {
        ContactInfoBuilder* subBuilder = [ContactInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addContactList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImallUserRsp.hasUserId;
}
- (UInt64) userId {
  return resultImallUserRsp.userId;
}
- (IMAllUserRspBuilder*) setUserId:(UInt64) value {
  resultImallUserRsp.hasUserId = YES;
  resultImallUserRsp.userId = value;
  return self;
}
- (IMAllUserRspBuilder*) clearUserId {
  resultImallUserRsp.hasUserId = NO;
  resultImallUserRsp.userId = 0L;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImallUserRsp.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImallUserRsp.latestUpdateTime;
}
- (IMAllUserRspBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImallUserRsp.hasLatestUpdateTime = YES;
  resultImallUserRsp.latestUpdateTime = value;
  return self;
}
- (IMAllUserRspBuilder*) clearLatestUpdateTime {
  resultImallUserRsp.hasLatestUpdateTime = NO;
  resultImallUserRsp.latestUpdateTime = 0;
  return self;
}
- (NSMutableArray *)contactList {
  return resultImallUserRsp.contactListArray;
}
- (ContactInfo*)contactListAtIndex:(NSUInteger)index {
  return [resultImallUserRsp contactListAtIndex:index];
}
- (IMAllUserRspBuilder *)addContactList:(ContactInfo*)value {
  if (resultImallUserRsp.contactListArray == nil) {
    resultImallUserRsp.contactListArray = [[NSMutableArray alloc]init];
  }
  [resultImallUserRsp.contactListArray addObject:value];
  return self;
}
- (IMAllUserRspBuilder *)setContactListArray:(NSArray *)array {
  resultImallUserRsp.contactListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMAllUserRspBuilder *)clearContactList {
  resultImallUserRsp.contactListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImallUserRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImallUserRsp.attachData;
}
- (IMAllUserRspBuilder*) setAttachData:(NSData*) value {
  resultImallUserRsp.hasAttachData = YES;
  resultImallUserRsp.attachData = value;
  return self;
}
- (IMAllUserRspBuilder*) clearAttachData {
  resultImallUserRsp.hasAttachData = NO;
  resultImallUserRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMUsersStatReq ()
@property UInt64 userId;
@property (strong) PBAppendableArray * userIdListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUsersStatReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize userIdListArray;
@dynamic userIdList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUsersStatReq* defaultIMUsersStatReqInstance = nil;
+ (void) initialize {
  if (self == [IMUsersStatReq class]) {
    defaultIMUsersStatReqInstance = [[IMUsersStatReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUsersStatReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUsersStatReqInstance;
}
- (PBArray *)userIdList {
  return userIdListArray;
}
- (UInt32)userIdListAtIndex:(NSUInteger)index {
  return [userIdListArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  const NSUInteger userIdListArrayCount = self.userIdListArray.count;
  if (userIdListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < userIdListArrayCount; ++i) {
      [output writeUInt32:2 value:values[i]];
    }
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userIdListArray.count;
    const UInt32 *values = (const UInt32 *)self.userIdListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUsersStatReq*) parseFromData:(NSData*) data {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromData:data] build];
}
+ (IMUsersStatReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromInputStream:input] build];
}
+ (IMUsersStatReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMUsersStatReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatReq*)[[[IMUsersStatReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatReqBuilder*) builder {
  return [[IMUsersStatReqBuilder alloc] init];
}
+ (IMUsersStatReqBuilder*) builderWithPrototype:(IMUsersStatReq*) prototype {
  return [[IMUsersStatReq builder] mergeFrom:prototype];
}
- (IMUsersStatReqBuilder*) builder {
  return [IMUsersStatReq builder];
}
- (IMUsersStatReqBuilder*) toBuilder {
  return [IMUsersStatReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userIdList", obj];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  NSMutableArray * userIdListArrayArray = [NSMutableArray new];
  NSUInteger userIdListArrayCount=self.userIdListArray.count;
  for(int i=0;i<userIdListArrayCount;i++){
    [userIdListArrayArray addObject: @([self.userIdListArray uint32AtIndex:i])];
  }
  [dictionary setObject: userIdListArrayArray forKey: @"userIdList"];
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUsersStatReq class]]) {
    return NO;
  }
  IMUsersStatReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userIdListArray isEqualToArray:otherMessage.userIdListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  [self.userIdListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUsersStatReqBuilder()
@property (strong) IMUsersStatReq* resultImusersStatReq;
@end

@implementation IMUsersStatReqBuilder
@synthesize resultImusersStatReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImusersStatReq = [[IMUsersStatReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImusersStatReq;
}
- (IMUsersStatReqBuilder*) clear {
  self.resultImusersStatReq = [[IMUsersStatReq alloc] init];
  return self;
}
- (IMUsersStatReqBuilder*) clone {
  return [IMUsersStatReq builderWithPrototype:resultImusersStatReq];
}
- (IMUsersStatReq*) defaultInstance {
  return [IMUsersStatReq defaultInstance];
}
- (IMUsersStatReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUsersStatReq*) buildPartial {
  IMUsersStatReq* returnMe = resultImusersStatReq;
  self.resultImusersStatReq = nil;
  return returnMe;
}
- (IMUsersStatReqBuilder*) mergeFrom:(IMUsersStatReq*) other {
  if (other == [IMUsersStatReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userIdListArray.count > 0) {
    if (resultImusersStatReq.userIdListArray == nil) {
      resultImusersStatReq.userIdListArray = [other.userIdListArray copy];
    } else {
      [resultImusersStatReq.userIdListArray appendArray:other.userIdListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUsersStatReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUsersStatReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self addUserIdList:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImusersStatReq.hasUserId;
}
- (UInt64) userId {
  return resultImusersStatReq.userId;
}
- (IMUsersStatReqBuilder*) setUserId:(UInt64) value {
  resultImusersStatReq.hasUserId = YES;
  resultImusersStatReq.userId = value;
  return self;
}
- (IMUsersStatReqBuilder*) clearUserId {
  resultImusersStatReq.hasUserId = NO;
  resultImusersStatReq.userId = 0L;
  return self;
}
- (PBAppendableArray *)userIdList {
  return resultImusersStatReq.userIdListArray;
}
- (UInt32)userIdListAtIndex:(NSUInteger)index {
  return [resultImusersStatReq userIdListAtIndex:index];
}
- (IMUsersStatReqBuilder *)addUserIdList:(UInt32)value {
  if (resultImusersStatReq.userIdListArray == nil) {
    resultImusersStatReq.userIdListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultImusersStatReq.userIdListArray addUint32:value];
  return self;
}
- (IMUsersStatReqBuilder *)setUserIdListArray:(NSArray *)array {
  resultImusersStatReq.userIdListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMUsersStatReqBuilder *)setUserIdListValues:(const UInt32 *)values count:(NSUInteger)count {
  resultImusersStatReq.userIdListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (IMUsersStatReqBuilder *)clearUserIdList {
  resultImusersStatReq.userIdListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImusersStatReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImusersStatReq.attachData;
}
- (IMUsersStatReqBuilder*) setAttachData:(NSData*) value {
  resultImusersStatReq.hasAttachData = YES;
  resultImusersStatReq.attachData = value;
  return self;
}
- (IMUsersStatReqBuilder*) clearAttachData {
  resultImusersStatReq.hasAttachData = NO;
  resultImusersStatReq.attachData = [NSData data];
  return self;
}
@end

@interface IMUsersStatRsp ()
@property UInt64 userId;
@property (strong) NSMutableArray * userStatListArray;
@property (strong) NSData* attachData;
@end

@implementation IMUsersStatRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize userStatListArray;
@dynamic userStatList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMUsersStatRsp* defaultIMUsersStatRspInstance = nil;
+ (void) initialize {
  if (self == [IMUsersStatRsp class]) {
    defaultIMUsersStatRspInstance = [[IMUsersStatRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMUsersStatRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMUsersStatRspInstance;
}
- (NSArray *)userStatList {
  return userStatListArray;
}
- (UserStat*)userStatListAtIndex:(NSUInteger)index {
  return [userStatListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInituserStatList = YES;
   [self.userStatList enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserStatList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserStatList) return isInituserStatList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  [self.userStatListArray enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  [self.userStatListArray enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMUsersStatRsp*) parseFromData:(NSData*) data {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromData:data] build];
}
+ (IMUsersStatRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromInputStream:input] build];
}
+ (IMUsersStatRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMUsersStatRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMUsersStatRsp*)[[[IMUsersStatRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMUsersStatRspBuilder*) builder {
  return [[IMUsersStatRspBuilder alloc] init];
}
+ (IMUsersStatRspBuilder*) builderWithPrototype:(IMUsersStatRsp*) prototype {
  return [[IMUsersStatRsp builder] mergeFrom:prototype];
}
- (IMUsersStatRspBuilder*) builder {
  return [IMUsersStatRsp builder];
}
- (IMUsersStatRspBuilder*) toBuilder {
  return [IMUsersStatRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  [self.userStatListArray enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userStatList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  for (UserStat* element in self.userStatListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userStatList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMUsersStatRsp class]]) {
    return NO;
  }
  IMUsersStatRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userStatListArray isEqualToArray:otherMessage.userStatListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  [self.userStatListArray enumerateObjectsUsingBlock:^(UserStat *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMUsersStatRspBuilder()
@property (strong) IMUsersStatRsp* resultImusersStatRsp;
@end

@implementation IMUsersStatRspBuilder
@synthesize resultImusersStatRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImusersStatRsp = [[IMUsersStatRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImusersStatRsp;
}
- (IMUsersStatRspBuilder*) clear {
  self.resultImusersStatRsp = [[IMUsersStatRsp alloc] init];
  return self;
}
- (IMUsersStatRspBuilder*) clone {
  return [IMUsersStatRsp builderWithPrototype:resultImusersStatRsp];
}
- (IMUsersStatRsp*) defaultInstance {
  return [IMUsersStatRsp defaultInstance];
}
- (IMUsersStatRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMUsersStatRsp*) buildPartial {
  IMUsersStatRsp* returnMe = resultImusersStatRsp;
  self.resultImusersStatRsp = nil;
  return returnMe;
}
- (IMUsersStatRspBuilder*) mergeFrom:(IMUsersStatRsp*) other {
  if (other == [IMUsersStatRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userStatListArray.count > 0) {
    if (resultImusersStatRsp.userStatListArray == nil) {
      resultImusersStatRsp.userStatListArray = [[NSMutableArray alloc] initWithArray:other.userStatListArray];
    } else {
      [resultImusersStatRsp.userStatListArray addObjectsFromArray:other.userStatListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMUsersStatRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMUsersStatRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        UserStatBuilder* subBuilder = [UserStat builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserStatList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImusersStatRsp.hasUserId;
}
- (UInt64) userId {
  return resultImusersStatRsp.userId;
}
- (IMUsersStatRspBuilder*) setUserId:(UInt64) value {
  resultImusersStatRsp.hasUserId = YES;
  resultImusersStatRsp.userId = value;
  return self;
}
- (IMUsersStatRspBuilder*) clearUserId {
  resultImusersStatRsp.hasUserId = NO;
  resultImusersStatRsp.userId = 0L;
  return self;
}
- (NSMutableArray *)userStatList {
  return resultImusersStatRsp.userStatListArray;
}
- (UserStat*)userStatListAtIndex:(NSUInteger)index {
  return [resultImusersStatRsp userStatListAtIndex:index];
}
- (IMUsersStatRspBuilder *)addUserStatList:(UserStat*)value {
  if (resultImusersStatRsp.userStatListArray == nil) {
    resultImusersStatRsp.userStatListArray = [[NSMutableArray alloc]init];
  }
  [resultImusersStatRsp.userStatListArray addObject:value];
  return self;
}
- (IMUsersStatRspBuilder *)setUserStatListArray:(NSArray *)array {
  resultImusersStatRsp.userStatListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMUsersStatRspBuilder *)clearUserStatList {
  resultImusersStatRsp.userStatListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImusersStatRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImusersStatRsp.attachData;
}
- (IMUsersStatRspBuilder*) setAttachData:(NSData*) value {
  resultImusersStatRsp.hasAttachData = YES;
  resultImusersStatRsp.attachData = value;
  return self;
}
- (IMUsersStatRspBuilder*) clearAttachData {
  resultImusersStatRsp.hasAttachData = NO;
  resultImusersStatRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMChangeAvatarReq ()
@property UInt64 userId;
@property (strong) NSString* avatarUrl;
@property (strong) NSData* attachData;
@end

@implementation IMChangeAvatarReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasAvatarUrl {
  return !!hasAvatarUrl_;
}
- (void) setHasAvatarUrl:(BOOL) _value_ {
  hasAvatarUrl_ = !!_value_;
}
@synthesize avatarUrl;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.avatarUrl = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMChangeAvatarReq* defaultIMChangeAvatarReqInstance = nil;
+ (void) initialize {
  if (self == [IMChangeAvatarReq class]) {
    defaultIMChangeAvatarReqInstance = [[IMChangeAvatarReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMChangeAvatarReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMChangeAvatarReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasAvatarUrl) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasAvatarUrl) {
    [output writeString:2 value:self.avatarUrl];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasAvatarUrl) {
    size_ += computeStringSize(2, self.avatarUrl);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMChangeAvatarReq*) parseFromData:(NSData*) data {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromData:data] build];
}
+ (IMChangeAvatarReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromInputStream:input] build];
}
+ (IMChangeAvatarReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMChangeAvatarReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarReq*)[[[IMChangeAvatarReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarReqBuilder*) builder {
  return [[IMChangeAvatarReqBuilder alloc] init];
}
+ (IMChangeAvatarReqBuilder*) builderWithPrototype:(IMChangeAvatarReq*) prototype {
  return [[IMChangeAvatarReq builder] mergeFrom:prototype];
}
- (IMChangeAvatarReqBuilder*) builder {
  return [IMChangeAvatarReq builder];
}
- (IMChangeAvatarReqBuilder*) toBuilder {
  return [IMChangeAvatarReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasAvatarUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatarUrl", self.avatarUrl];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasAvatarUrl) {
    [dictionary setObject: self.avatarUrl forKey: @"avatarUrl"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMChangeAvatarReq class]]) {
    return NO;
  }
  IMChangeAvatarReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasAvatarUrl == otherMessage.hasAvatarUrl &&
      (!self.hasAvatarUrl || [self.avatarUrl isEqual:otherMessage.avatarUrl]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasAvatarUrl) {
    hashCode = hashCode * 31 + [self.avatarUrl hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMChangeAvatarReqBuilder()
@property (strong) IMChangeAvatarReq* resultImchangeAvatarReq;
@end

@implementation IMChangeAvatarReqBuilder
@synthesize resultImchangeAvatarReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImchangeAvatarReq = [[IMChangeAvatarReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImchangeAvatarReq;
}
- (IMChangeAvatarReqBuilder*) clear {
  self.resultImchangeAvatarReq = [[IMChangeAvatarReq alloc] init];
  return self;
}
- (IMChangeAvatarReqBuilder*) clone {
  return [IMChangeAvatarReq builderWithPrototype:resultImchangeAvatarReq];
}
- (IMChangeAvatarReq*) defaultInstance {
  return [IMChangeAvatarReq defaultInstance];
}
- (IMChangeAvatarReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMChangeAvatarReq*) buildPartial {
  IMChangeAvatarReq* returnMe = resultImchangeAvatarReq;
  self.resultImchangeAvatarReq = nil;
  return returnMe;
}
- (IMChangeAvatarReqBuilder*) mergeFrom:(IMChangeAvatarReq*) other {
  if (other == [IMChangeAvatarReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasAvatarUrl) {
    [self setAvatarUrl:other.avatarUrl];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMChangeAvatarReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMChangeAvatarReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        [self setAvatarUrl:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImchangeAvatarReq.hasUserId;
}
- (UInt64) userId {
  return resultImchangeAvatarReq.userId;
}
- (IMChangeAvatarReqBuilder*) setUserId:(UInt64) value {
  resultImchangeAvatarReq.hasUserId = YES;
  resultImchangeAvatarReq.userId = value;
  return self;
}
- (IMChangeAvatarReqBuilder*) clearUserId {
  resultImchangeAvatarReq.hasUserId = NO;
  resultImchangeAvatarReq.userId = 0L;
  return self;
}
- (BOOL) hasAvatarUrl {
  return resultImchangeAvatarReq.hasAvatarUrl;
}
- (NSString*) avatarUrl {
  return resultImchangeAvatarReq.avatarUrl;
}
- (IMChangeAvatarReqBuilder*) setAvatarUrl:(NSString*) value {
  resultImchangeAvatarReq.hasAvatarUrl = YES;
  resultImchangeAvatarReq.avatarUrl = value;
  return self;
}
- (IMChangeAvatarReqBuilder*) clearAvatarUrl {
  resultImchangeAvatarReq.hasAvatarUrl = NO;
  resultImchangeAvatarReq.avatarUrl = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImchangeAvatarReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImchangeAvatarReq.attachData;
}
- (IMChangeAvatarReqBuilder*) setAttachData:(NSData*) value {
  resultImchangeAvatarReq.hasAttachData = YES;
  resultImchangeAvatarReq.attachData = value;
  return self;
}
- (IMChangeAvatarReqBuilder*) clearAttachData {
  resultImchangeAvatarReq.hasAttachData = NO;
  resultImchangeAvatarReq.attachData = [NSData data];
  return self;
}
@end

@interface IMChangeAvatarRsp ()
@property UInt64 userId;
@property UInt32 resultCode;
@property (strong) NSData* attachData;
@end

@implementation IMChangeAvatarRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.resultCode = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMChangeAvatarRsp* defaultIMChangeAvatarRspInstance = nil;
+ (void) initialize {
  if (self == [IMChangeAvatarRsp class]) {
    defaultIMChangeAvatarRspInstance = [[IMChangeAvatarRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMChangeAvatarRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMChangeAvatarRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasResultCode) {
    [output writeUInt32:2 value:self.resultCode];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(2, self.resultCode);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMChangeAvatarRsp*) parseFromData:(NSData*) data {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromData:data] build];
}
+ (IMChangeAvatarRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromInputStream:input] build];
}
+ (IMChangeAvatarRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMChangeAvatarRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMChangeAvatarRsp*)[[[IMChangeAvatarRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMChangeAvatarRspBuilder*) builder {
  return [[IMChangeAvatarRspBuilder alloc] init];
}
+ (IMChangeAvatarRspBuilder*) builderWithPrototype:(IMChangeAvatarRsp*) prototype {
  return [[IMChangeAvatarRsp builder] mergeFrom:prototype];
}
- (IMChangeAvatarRspBuilder*) builder {
  return [IMChangeAvatarRsp builder];
}
- (IMChangeAvatarRspBuilder*) toBuilder {
  return [IMChangeAvatarRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMChangeAvatarRsp class]]) {
    return NO;
  }
  IMChangeAvatarRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMChangeAvatarRspBuilder()
@property (strong) IMChangeAvatarRsp* resultImchangeAvatarRsp;
@end

@implementation IMChangeAvatarRspBuilder
@synthesize resultImchangeAvatarRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImchangeAvatarRsp = [[IMChangeAvatarRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImchangeAvatarRsp;
}
- (IMChangeAvatarRspBuilder*) clear {
  self.resultImchangeAvatarRsp = [[IMChangeAvatarRsp alloc] init];
  return self;
}
- (IMChangeAvatarRspBuilder*) clone {
  return [IMChangeAvatarRsp builderWithPrototype:resultImchangeAvatarRsp];
}
- (IMChangeAvatarRsp*) defaultInstance {
  return [IMChangeAvatarRsp defaultInstance];
}
- (IMChangeAvatarRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMChangeAvatarRsp*) buildPartial {
  IMChangeAvatarRsp* returnMe = resultImchangeAvatarRsp;
  self.resultImchangeAvatarRsp = nil;
  return returnMe;
}
- (IMChangeAvatarRspBuilder*) mergeFrom:(IMChangeAvatarRsp*) other {
  if (other == [IMChangeAvatarRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMChangeAvatarRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMChangeAvatarRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImchangeAvatarRsp.hasUserId;
}
- (UInt64) userId {
  return resultImchangeAvatarRsp.userId;
}
- (IMChangeAvatarRspBuilder*) setUserId:(UInt64) value {
  resultImchangeAvatarRsp.hasUserId = YES;
  resultImchangeAvatarRsp.userId = value;
  return self;
}
- (IMChangeAvatarRspBuilder*) clearUserId {
  resultImchangeAvatarRsp.hasUserId = NO;
  resultImchangeAvatarRsp.userId = 0L;
  return self;
}
- (BOOL) hasResultCode {
  return resultImchangeAvatarRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImchangeAvatarRsp.resultCode;
}
- (IMChangeAvatarRspBuilder*) setResultCode:(UInt32) value {
  resultImchangeAvatarRsp.hasResultCode = YES;
  resultImchangeAvatarRsp.resultCode = value;
  return self;
}
- (IMChangeAvatarRspBuilder*) clearResultCode {
  resultImchangeAvatarRsp.hasResultCode = NO;
  resultImchangeAvatarRsp.resultCode = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImchangeAvatarRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImchangeAvatarRsp.attachData;
}
- (IMChangeAvatarRspBuilder*) setAttachData:(NSData*) value {
  resultImchangeAvatarRsp.hasAttachData = YES;
  resultImchangeAvatarRsp.attachData = value;
  return self;
}
- (IMChangeAvatarRspBuilder*) clearAttachData {
  resultImchangeAvatarRsp.hasAttachData = NO;
  resultImchangeAvatarRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMPCLoginStatusNotify ()
@property UInt64 userId;
@property UserStatType loginStat;
@end

@implementation IMPCLoginStatusNotify

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLoginStat {
  return !!hasLoginStat_;
}
- (void) setHasLoginStat:(BOOL) _value_ {
  hasLoginStat_ = !!_value_;
}
@synthesize loginStat;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.loginStat = UserStatTypeUserStatusOnline;
  }
  return self;
}
static IMPCLoginStatusNotify* defaultIMPCLoginStatusNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMPCLoginStatusNotify class]) {
    defaultIMPCLoginStatusNotifyInstance = [[IMPCLoginStatusNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMPCLoginStatusNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMPCLoginStatusNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLoginStat) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasLoginStat) {
    [output writeEnum:2 value:self.loginStat];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasLoginStat) {
    size_ += computeEnumSize(2, self.loginStat);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMPCLoginStatusNotify*) parseFromData:(NSData*) data {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromData:data] build];
}
+ (IMPCLoginStatusNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMPCLoginStatusNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromInputStream:input] build];
}
+ (IMPCLoginStatusNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPCLoginStatusNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMPCLoginStatusNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPCLoginStatusNotify*)[[[IMPCLoginStatusNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPCLoginStatusNotifyBuilder*) builder {
  return [[IMPCLoginStatusNotifyBuilder alloc] init];
}
+ (IMPCLoginStatusNotifyBuilder*) builderWithPrototype:(IMPCLoginStatusNotify*) prototype {
  return [[IMPCLoginStatusNotify builder] mergeFrom:prototype];
}
- (IMPCLoginStatusNotifyBuilder*) builder {
  return [IMPCLoginStatusNotify builder];
}
- (IMPCLoginStatusNotifyBuilder*) toBuilder {
  return [IMPCLoginStatusNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasLoginStat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginStat", NSStringFromUserStatType(self.loginStat)];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasLoginStat) {
    [dictionary setObject: @(self.loginStat) forKey: @"loginStat"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMPCLoginStatusNotify class]]) {
    return NO;
  }
  IMPCLoginStatusNotify *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLoginStat == otherMessage.hasLoginStat &&
      (!self.hasLoginStat || self.loginStat == otherMessage.loginStat) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasLoginStat) {
    hashCode = hashCode * 31 + self.loginStat;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMPCLoginStatusNotifyBuilder()
@property (strong) IMPCLoginStatusNotify* resultImpcloginStatusNotify;
@end

@implementation IMPCLoginStatusNotifyBuilder
@synthesize resultImpcloginStatusNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImpcloginStatusNotify = [[IMPCLoginStatusNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImpcloginStatusNotify;
}
- (IMPCLoginStatusNotifyBuilder*) clear {
  self.resultImpcloginStatusNotify = [[IMPCLoginStatusNotify alloc] init];
  return self;
}
- (IMPCLoginStatusNotifyBuilder*) clone {
  return [IMPCLoginStatusNotify builderWithPrototype:resultImpcloginStatusNotify];
}
- (IMPCLoginStatusNotify*) defaultInstance {
  return [IMPCLoginStatusNotify defaultInstance];
}
- (IMPCLoginStatusNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMPCLoginStatusNotify*) buildPartial {
  IMPCLoginStatusNotify* returnMe = resultImpcloginStatusNotify;
  self.resultImpcloginStatusNotify = nil;
  return returnMe;
}
- (IMPCLoginStatusNotifyBuilder*) mergeFrom:(IMPCLoginStatusNotify*) other {
  if (other == [IMPCLoginStatusNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLoginStat) {
    [self setLoginStat:other.loginStat];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMPCLoginStatusNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMPCLoginStatusNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        UserStatType value = (UserStatType)[input readEnum];
        if (UserStatTypeIsValidValue(value)) {
          [self setLoginStat:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImpcloginStatusNotify.hasUserId;
}
- (UInt64) userId {
  return resultImpcloginStatusNotify.userId;
}
- (IMPCLoginStatusNotifyBuilder*) setUserId:(UInt64) value {
  resultImpcloginStatusNotify.hasUserId = YES;
  resultImpcloginStatusNotify.userId = value;
  return self;
}
- (IMPCLoginStatusNotifyBuilder*) clearUserId {
  resultImpcloginStatusNotify.hasUserId = NO;
  resultImpcloginStatusNotify.userId = 0L;
  return self;
}
- (BOOL) hasLoginStat {
  return resultImpcloginStatusNotify.hasLoginStat;
}
- (UserStatType) loginStat {
  return resultImpcloginStatusNotify.loginStat;
}
- (IMPCLoginStatusNotifyBuilder*) setLoginStat:(UserStatType) value {
  resultImpcloginStatusNotify.hasLoginStat = YES;
  resultImpcloginStatusNotify.loginStat = value;
  return self;
}
- (IMPCLoginStatusNotifyBuilder*) clearLoginStat {
  resultImpcloginStatusNotify.hasLoginStat = NO;
  resultImpcloginStatusNotify.loginStat = UserStatTypeUserStatusOnline;
  return self;
}
@end

@interface IMRemoveSessionNotify ()
@property UInt64 userId;
@property SessionType sessionType;
@property UInt64 sessionId;
@end

@implementation IMRemoveSessionNotify

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.sessionId = 0L;
  }
  return self;
}
static IMRemoveSessionNotify* defaultIMRemoveSessionNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMRemoveSessionNotify class]) {
    defaultIMRemoveSessionNotifyInstance = [[IMRemoveSessionNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMRemoveSessionNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMRemoveSessionNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasSessionType) {
    [output writeEnum:2 value:self.sessionType];
  }
  if (self.hasSessionId) {
    [output writeUInt64:3 value:self.sessionId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(2, self.sessionType);
  }
  if (self.hasSessionId) {
    size_ += computeUInt64Size(3, self.sessionId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMRemoveSessionNotify*) parseFromData:(NSData*) data {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromData:data] build];
}
+ (IMRemoveSessionNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromInputStream:input] build];
}
+ (IMRemoveSessionNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMRemoveSessionNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMRemoveSessionNotify*)[[[IMRemoveSessionNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMRemoveSessionNotifyBuilder*) builder {
  return [[IMRemoveSessionNotifyBuilder alloc] init];
}
+ (IMRemoveSessionNotifyBuilder*) builderWithPrototype:(IMRemoveSessionNotify*) prototype {
  return [[IMRemoveSessionNotify builder] mergeFrom:prototype];
}
- (IMRemoveSessionNotifyBuilder*) builder {
  return [IMRemoveSessionNotify builder];
}
- (IMRemoveSessionNotifyBuilder*) toBuilder {
  return [IMRemoveSessionNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMRemoveSessionNotify class]]) {
    return NO;
  }
  IMRemoveSessionNotify *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMRemoveSessionNotifyBuilder()
@property (strong) IMRemoveSessionNotify* resultImremoveSessionNotify;
@end

@implementation IMRemoveSessionNotifyBuilder
@synthesize resultImremoveSessionNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImremoveSessionNotify = [[IMRemoveSessionNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImremoveSessionNotify;
}
- (IMRemoveSessionNotifyBuilder*) clear {
  self.resultImremoveSessionNotify = [[IMRemoveSessionNotify alloc] init];
  return self;
}
- (IMRemoveSessionNotifyBuilder*) clone {
  return [IMRemoveSessionNotify builderWithPrototype:resultImremoveSessionNotify];
}
- (IMRemoveSessionNotify*) defaultInstance {
  return [IMRemoveSessionNotify defaultInstance];
}
- (IMRemoveSessionNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMRemoveSessionNotify*) buildPartial {
  IMRemoveSessionNotify* returnMe = resultImremoveSessionNotify;
  self.resultImremoveSessionNotify = nil;
  return returnMe;
}
- (IMRemoveSessionNotifyBuilder*) mergeFrom:(IMRemoveSessionNotify*) other {
  if (other == [IMRemoveSessionNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMRemoveSessionNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMRemoveSessionNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setSessionId:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImremoveSessionNotify.hasUserId;
}
- (UInt64) userId {
  return resultImremoveSessionNotify.userId;
}
- (IMRemoveSessionNotifyBuilder*) setUserId:(UInt64) value {
  resultImremoveSessionNotify.hasUserId = YES;
  resultImremoveSessionNotify.userId = value;
  return self;
}
- (IMRemoveSessionNotifyBuilder*) clearUserId {
  resultImremoveSessionNotify.hasUserId = NO;
  resultImremoveSessionNotify.userId = 0L;
  return self;
}
- (BOOL) hasSessionType {
  return resultImremoveSessionNotify.hasSessionType;
}
- (SessionType) sessionType {
  return resultImremoveSessionNotify.sessionType;
}
- (IMRemoveSessionNotifyBuilder*) setSessionType:(SessionType) value {
  resultImremoveSessionNotify.hasSessionType = YES;
  resultImremoveSessionNotify.sessionType = value;
  return self;
}
- (IMRemoveSessionNotifyBuilder*) clearSessionType {
  resultImremoveSessionNotify.hasSessionType = NO;
  resultImremoveSessionNotify.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasSessionId {
  return resultImremoveSessionNotify.hasSessionId;
}
- (UInt64) sessionId {
  return resultImremoveSessionNotify.sessionId;
}
- (IMRemoveSessionNotifyBuilder*) setSessionId:(UInt64) value {
  resultImremoveSessionNotify.hasSessionId = YES;
  resultImremoveSessionNotify.sessionId = value;
  return self;
}
- (IMRemoveSessionNotifyBuilder*) clearSessionId {
  resultImremoveSessionNotify.hasSessionId = NO;
  resultImremoveSessionNotify.sessionId = 0L;
  return self;
}
@end

@interface IMReportSession ()
@property UInt64 userId;
@property UInt64 sessionId;
@property SessionType sessionType;
@property (strong) NSString* reasonMsg;
@property (strong) NSData* attachData;
@end

@implementation IMReportSession

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) _value_ {
  hasSessionId_ = !!_value_;
}
@synthesize sessionId;
- (BOOL) hasSessionType {
  return !!hasSessionType_;
}
- (void) setHasSessionType:(BOOL) _value_ {
  hasSessionType_ = !!_value_;
}
@synthesize sessionType;
- (BOOL) hasReasonMsg {
  return !!hasReasonMsg_;
}
- (void) setHasReasonMsg:(BOOL) _value_ {
  hasReasonMsg_ = !!_value_;
}
@synthesize reasonMsg;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.sessionId = 0L;
    self.sessionType = SessionTypeSessionTypeSingle;
    self.reasonMsg = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMReportSession* defaultIMReportSessionInstance = nil;
+ (void) initialize {
  if (self == [IMReportSession class]) {
    defaultIMReportSessionInstance = [[IMReportSession alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMReportSessionInstance;
}
- (instancetype) defaultInstance {
  return defaultIMReportSessionInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSessionId) {
    return NO;
  }
  if (!self.hasSessionType) {
    return NO;
  }
  if (!self.hasReasonMsg) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasSessionId) {
    [output writeUInt64:2 value:self.sessionId];
  }
  if (self.hasSessionType) {
    [output writeEnum:3 value:self.sessionType];
  }
  if (self.hasReasonMsg) {
    [output writeString:4 value:self.reasonMsg];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasSessionId) {
    size_ += computeUInt64Size(2, self.sessionId);
  }
  if (self.hasSessionType) {
    size_ += computeEnumSize(3, self.sessionType);
  }
  if (self.hasReasonMsg) {
    size_ += computeStringSize(4, self.reasonMsg);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMReportSession*) parseFromData:(NSData*) data {
  return (IMReportSession*)[[[IMReportSession builder] mergeFromData:data] build];
}
+ (IMReportSession*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMReportSession*)[[[IMReportSession builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMReportSession*) parseFromInputStream:(NSInputStream*) input {
  return (IMReportSession*)[[[IMReportSession builder] mergeFromInputStream:input] build];
}
+ (IMReportSession*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMReportSession*)[[[IMReportSession builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMReportSession*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMReportSession*)[[[IMReportSession builder] mergeFromCodedInputStream:input] build];
}
+ (IMReportSession*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMReportSession*)[[[IMReportSession builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMReportSessionBuilder*) builder {
  return [[IMReportSessionBuilder alloc] init];
}
+ (IMReportSessionBuilder*) builderWithPrototype:(IMReportSession*) prototype {
  return [[IMReportSession builder] mergeFrom:prototype];
}
- (IMReportSessionBuilder*) builder {
  return [IMReportSession builder];
}
- (IMReportSessionBuilder*) toBuilder {
  return [IMReportSession builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasSessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionId", [NSNumber numberWithLongLong:self.sessionId]];
  }
  if (self.hasSessionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionType", NSStringFromSessionType(self.sessionType)];
  }
  if (self.hasReasonMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reasonMsg", self.reasonMsg];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasSessionId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sessionId] forKey: @"sessionId"];
  }
  if (self.hasSessionType) {
    [dictionary setObject: @(self.sessionType) forKey: @"sessionType"];
  }
  if (self.hasReasonMsg) {
    [dictionary setObject: self.reasonMsg forKey: @"reasonMsg"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMReportSession class]]) {
    return NO;
  }
  IMReportSession *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSessionId == otherMessage.hasSessionId &&
      (!self.hasSessionId || self.sessionId == otherMessage.sessionId) &&
      self.hasSessionType == otherMessage.hasSessionType &&
      (!self.hasSessionType || self.sessionType == otherMessage.sessionType) &&
      self.hasReasonMsg == otherMessage.hasReasonMsg &&
      (!self.hasReasonMsg || [self.reasonMsg isEqual:otherMessage.reasonMsg]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasSessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sessionId] hash];
  }
  if (self.hasSessionType) {
    hashCode = hashCode * 31 + self.sessionType;
  }
  if (self.hasReasonMsg) {
    hashCode = hashCode * 31 + [self.reasonMsg hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMReportSessionBuilder()
@property (strong) IMReportSession* resultImreportSession;
@end

@implementation IMReportSessionBuilder
@synthesize resultImreportSession;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImreportSession = [[IMReportSession alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImreportSession;
}
- (IMReportSessionBuilder*) clear {
  self.resultImreportSession = [[IMReportSession alloc] init];
  return self;
}
- (IMReportSessionBuilder*) clone {
  return [IMReportSession builderWithPrototype:resultImreportSession];
}
- (IMReportSession*) defaultInstance {
  return [IMReportSession defaultInstance];
}
- (IMReportSession*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMReportSession*) buildPartial {
  IMReportSession* returnMe = resultImreportSession;
  self.resultImreportSession = nil;
  return returnMe;
}
- (IMReportSessionBuilder*) mergeFrom:(IMReportSession*) other {
  if (other == [IMReportSession defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasSessionType) {
    [self setSessionType:other.sessionType];
  }
  if (other.hasReasonMsg) {
    [self setReasonMsg:other.reasonMsg];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMReportSessionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMReportSessionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setSessionId:[input readUInt64]];
        break;
      }
      case 24: {
        SessionType value = (SessionType)[input readEnum];
        if (SessionTypeIsValidValue(value)) {
          [self setSessionType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        [self setReasonMsg:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImreportSession.hasUserId;
}
- (UInt64) userId {
  return resultImreportSession.userId;
}
- (IMReportSessionBuilder*) setUserId:(UInt64) value {
  resultImreportSession.hasUserId = YES;
  resultImreportSession.userId = value;
  return self;
}
- (IMReportSessionBuilder*) clearUserId {
  resultImreportSession.hasUserId = NO;
  resultImreportSession.userId = 0L;
  return self;
}
- (BOOL) hasSessionId {
  return resultImreportSession.hasSessionId;
}
- (UInt64) sessionId {
  return resultImreportSession.sessionId;
}
- (IMReportSessionBuilder*) setSessionId:(UInt64) value {
  resultImreportSession.hasSessionId = YES;
  resultImreportSession.sessionId = value;
  return self;
}
- (IMReportSessionBuilder*) clearSessionId {
  resultImreportSession.hasSessionId = NO;
  resultImreportSession.sessionId = 0L;
  return self;
}
- (BOOL) hasSessionType {
  return resultImreportSession.hasSessionType;
}
- (SessionType) sessionType {
  return resultImreportSession.sessionType;
}
- (IMReportSessionBuilder*) setSessionType:(SessionType) value {
  resultImreportSession.hasSessionType = YES;
  resultImreportSession.sessionType = value;
  return self;
}
- (IMReportSessionBuilder*) clearSessionType {
  resultImreportSession.hasSessionType = NO;
  resultImreportSession.sessionType = SessionTypeSessionTypeSingle;
  return self;
}
- (BOOL) hasReasonMsg {
  return resultImreportSession.hasReasonMsg;
}
- (NSString*) reasonMsg {
  return resultImreportSession.reasonMsg;
}
- (IMReportSessionBuilder*) setReasonMsg:(NSString*) value {
  resultImreportSession.hasReasonMsg = YES;
  resultImreportSession.reasonMsg = value;
  return self;
}
- (IMReportSessionBuilder*) clearReasonMsg {
  resultImreportSession.hasReasonMsg = NO;
  resultImreportSession.reasonMsg = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImreportSession.hasAttachData;
}
- (NSData*) attachData {
  return resultImreportSession.attachData;
}
- (IMReportSessionBuilder*) setAttachData:(NSData*) value {
  resultImreportSession.hasAttachData = YES;
  resultImreportSession.attachData = value;
  return self;
}
- (IMReportSessionBuilder*) clearAttachData {
  resultImreportSession.hasAttachData = NO;
  resultImreportSession.attachData = [NSData data];
  return self;
}
@end

@interface IMDepartmentReq ()
@property UInt64 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSData* attachData;
@end

@implementation IMDepartmentReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMDepartmentReq* defaultIMDepartmentReqInstance = nil;
+ (void) initialize {
  if (self == [IMDepartmentReq class]) {
    defaultIMDepartmentReqInstance = [[IMDepartmentReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMDepartmentReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMDepartmentReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMDepartmentReq*) parseFromData:(NSData*) data {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromData:data] build];
}
+ (IMDepartmentReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromInputStream:input] build];
}
+ (IMDepartmentReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMDepartmentReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentReq*)[[[IMDepartmentReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentReqBuilder*) builder {
  return [[IMDepartmentReqBuilder alloc] init];
}
+ (IMDepartmentReqBuilder*) builderWithPrototype:(IMDepartmentReq*) prototype {
  return [[IMDepartmentReq builder] mergeFrom:prototype];
}
- (IMDepartmentReqBuilder*) builder {
  return [IMDepartmentReq builder];
}
- (IMDepartmentReqBuilder*) toBuilder {
  return [IMDepartmentReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMDepartmentReq class]]) {
    return NO;
  }
  IMDepartmentReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMDepartmentReqBuilder()
@property (strong) IMDepartmentReq* resultImdepartmentReq;
@end

@implementation IMDepartmentReqBuilder
@synthesize resultImdepartmentReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImdepartmentReq = [[IMDepartmentReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImdepartmentReq;
}
- (IMDepartmentReqBuilder*) clear {
  self.resultImdepartmentReq = [[IMDepartmentReq alloc] init];
  return self;
}
- (IMDepartmentReqBuilder*) clone {
  return [IMDepartmentReq builderWithPrototype:resultImdepartmentReq];
}
- (IMDepartmentReq*) defaultInstance {
  return [IMDepartmentReq defaultInstance];
}
- (IMDepartmentReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMDepartmentReq*) buildPartial {
  IMDepartmentReq* returnMe = resultImdepartmentReq;
  self.resultImdepartmentReq = nil;
  return returnMe;
}
- (IMDepartmentReqBuilder*) mergeFrom:(IMDepartmentReq*) other {
  if (other == [IMDepartmentReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMDepartmentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMDepartmentReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImdepartmentReq.hasUserId;
}
- (UInt64) userId {
  return resultImdepartmentReq.userId;
}
- (IMDepartmentReqBuilder*) setUserId:(UInt64) value {
  resultImdepartmentReq.hasUserId = YES;
  resultImdepartmentReq.userId = value;
  return self;
}
- (IMDepartmentReqBuilder*) clearUserId {
  resultImdepartmentReq.hasUserId = NO;
  resultImdepartmentReq.userId = 0L;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImdepartmentReq.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImdepartmentReq.latestUpdateTime;
}
- (IMDepartmentReqBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImdepartmentReq.hasLatestUpdateTime = YES;
  resultImdepartmentReq.latestUpdateTime = value;
  return self;
}
- (IMDepartmentReqBuilder*) clearLatestUpdateTime {
  resultImdepartmentReq.hasLatestUpdateTime = NO;
  resultImdepartmentReq.latestUpdateTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImdepartmentReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImdepartmentReq.attachData;
}
- (IMDepartmentReqBuilder*) setAttachData:(NSData*) value {
  resultImdepartmentReq.hasAttachData = YES;
  resultImdepartmentReq.attachData = value;
  return self;
}
- (IMDepartmentReqBuilder*) clearAttachData {
  resultImdepartmentReq.hasAttachData = NO;
  resultImdepartmentReq.attachData = [NSData data];
  return self;
}
@end

@interface IMDepartmentRsp ()
@property UInt64 userId;
@property UInt32 latestUpdateTime;
@property (strong) NSMutableArray * deptListArray;
@property (strong) NSData* attachData;
@end

@implementation IMDepartmentRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLatestUpdateTime {
  return !!hasLatestUpdateTime_;
}
- (void) setHasLatestUpdateTime:(BOOL) _value_ {
  hasLatestUpdateTime_ = !!_value_;
}
@synthesize latestUpdateTime;
@synthesize deptListArray;
@dynamic deptList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.latestUpdateTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMDepartmentRsp* defaultIMDepartmentRspInstance = nil;
+ (void) initialize {
  if (self == [IMDepartmentRsp class]) {
    defaultIMDepartmentRspInstance = [[IMDepartmentRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMDepartmentRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMDepartmentRspInstance;
}
- (NSArray *)deptList {
  return deptListArray;
}
- (DepartInfo*)deptListAtIndex:(NSUInteger)index {
  return [deptListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLatestUpdateTime) {
    return NO;
  }
  __block BOOL isInitdeptList = YES;
   [self.deptList enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitdeptList = NO;
      *stop = YES;
    }
  }];
  if (!isInitdeptList) return isInitdeptList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasLatestUpdateTime) {
    [output writeUInt32:2 value:self.latestUpdateTime];
  }
  [self.deptListArray enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasLatestUpdateTime) {
    size_ += computeUInt32Size(2, self.latestUpdateTime);
  }
  [self.deptListArray enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMDepartmentRsp*) parseFromData:(NSData*) data {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromData:data] build];
}
+ (IMDepartmentRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromInputStream:input] build];
}
+ (IMDepartmentRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMDepartmentRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDepartmentRsp*)[[[IMDepartmentRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDepartmentRspBuilder*) builder {
  return [[IMDepartmentRspBuilder alloc] init];
}
+ (IMDepartmentRspBuilder*) builderWithPrototype:(IMDepartmentRsp*) prototype {
  return [[IMDepartmentRsp builder] mergeFrom:prototype];
}
- (IMDepartmentRspBuilder*) builder {
  return [IMDepartmentRsp builder];
}
- (IMDepartmentRspBuilder*) toBuilder {
  return [IMDepartmentRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasLatestUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"latestUpdateTime", [NSNumber numberWithInteger:self.latestUpdateTime]];
  }
  [self.deptListArray enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"deptList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasLatestUpdateTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.latestUpdateTime] forKey: @"latestUpdateTime"];
  }
  for (DepartInfo* element in self.deptListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"deptList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMDepartmentRsp class]]) {
    return NO;
  }
  IMDepartmentRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLatestUpdateTime == otherMessage.hasLatestUpdateTime &&
      (!self.hasLatestUpdateTime || self.latestUpdateTime == otherMessage.latestUpdateTime) &&
      [self.deptListArray isEqualToArray:otherMessage.deptListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasLatestUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.latestUpdateTime] hash];
  }
  [self.deptListArray enumerateObjectsUsingBlock:^(DepartInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMDepartmentRspBuilder()
@property (strong) IMDepartmentRsp* resultImdepartmentRsp;
@end

@implementation IMDepartmentRspBuilder
@synthesize resultImdepartmentRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImdepartmentRsp = [[IMDepartmentRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImdepartmentRsp;
}
- (IMDepartmentRspBuilder*) clear {
  self.resultImdepartmentRsp = [[IMDepartmentRsp alloc] init];
  return self;
}
- (IMDepartmentRspBuilder*) clone {
  return [IMDepartmentRsp builderWithPrototype:resultImdepartmentRsp];
}
- (IMDepartmentRsp*) defaultInstance {
  return [IMDepartmentRsp defaultInstance];
}
- (IMDepartmentRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMDepartmentRsp*) buildPartial {
  IMDepartmentRsp* returnMe = resultImdepartmentRsp;
  self.resultImdepartmentRsp = nil;
  return returnMe;
}
- (IMDepartmentRspBuilder*) mergeFrom:(IMDepartmentRsp*) other {
  if (other == [IMDepartmentRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLatestUpdateTime) {
    [self setLatestUpdateTime:other.latestUpdateTime];
  }
  if (other.deptListArray.count > 0) {
    if (resultImdepartmentRsp.deptListArray == nil) {
      resultImdepartmentRsp.deptListArray = [[NSMutableArray alloc] initWithArray:other.deptListArray];
    } else {
      [resultImdepartmentRsp.deptListArray addObjectsFromArray:other.deptListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMDepartmentRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMDepartmentRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setLatestUpdateTime:[input readUInt32]];
        break;
      }
      case 26: {
        DepartInfoBuilder* subBuilder = [DepartInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDeptList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImdepartmentRsp.hasUserId;
}
- (UInt64) userId {
  return resultImdepartmentRsp.userId;
}
- (IMDepartmentRspBuilder*) setUserId:(UInt64) value {
  resultImdepartmentRsp.hasUserId = YES;
  resultImdepartmentRsp.userId = value;
  return self;
}
- (IMDepartmentRspBuilder*) clearUserId {
  resultImdepartmentRsp.hasUserId = NO;
  resultImdepartmentRsp.userId = 0L;
  return self;
}
- (BOOL) hasLatestUpdateTime {
  return resultImdepartmentRsp.hasLatestUpdateTime;
}
- (UInt32) latestUpdateTime {
  return resultImdepartmentRsp.latestUpdateTime;
}
- (IMDepartmentRspBuilder*) setLatestUpdateTime:(UInt32) value {
  resultImdepartmentRsp.hasLatestUpdateTime = YES;
  resultImdepartmentRsp.latestUpdateTime = value;
  return self;
}
- (IMDepartmentRspBuilder*) clearLatestUpdateTime {
  resultImdepartmentRsp.hasLatestUpdateTime = NO;
  resultImdepartmentRsp.latestUpdateTime = 0;
  return self;
}
- (NSMutableArray *)deptList {
  return resultImdepartmentRsp.deptListArray;
}
- (DepartInfo*)deptListAtIndex:(NSUInteger)index {
  return [resultImdepartmentRsp deptListAtIndex:index];
}
- (IMDepartmentRspBuilder *)addDeptList:(DepartInfo*)value {
  if (resultImdepartmentRsp.deptListArray == nil) {
    resultImdepartmentRsp.deptListArray = [[NSMutableArray alloc]init];
  }
  [resultImdepartmentRsp.deptListArray addObject:value];
  return self;
}
- (IMDepartmentRspBuilder *)setDeptListArray:(NSArray *)array {
  resultImdepartmentRsp.deptListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMDepartmentRspBuilder *)clearDeptList {
  resultImdepartmentRsp.deptListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImdepartmentRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImdepartmentRsp.attachData;
}
- (IMDepartmentRspBuilder*) setAttachData:(NSData*) value {
  resultImdepartmentRsp.hasAttachData = YES;
  resultImdepartmentRsp.attachData = value;
  return self;
}
- (IMDepartmentRspBuilder*) clearAttachData {
  resultImdepartmentRsp.hasAttachData = NO;
  resultImdepartmentRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMSearchUserReq ()
@property UInt64 userId;
@property (strong) NSString* searchkey;
@property (strong) NSData* attachData;
@end

@implementation IMSearchUserReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSearchkey {
  return !!hasSearchkey_;
}
- (void) setHasSearchkey:(BOOL) _value_ {
  hasSearchkey_ = !!_value_;
}
@synthesize searchkey;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.searchkey = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMSearchUserReq* defaultIMSearchUserReqInstance = nil;
+ (void) initialize {
  if (self == [IMSearchUserReq class]) {
    defaultIMSearchUserReqInstance = [[IMSearchUserReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSearchUserReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSearchUserReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSearchkey) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasSearchkey) {
    [output writeString:2 value:self.searchkey];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasSearchkey) {
    size_ += computeStringSize(2, self.searchkey);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSearchUserReq*) parseFromData:(NSData*) data {
  return (IMSearchUserReq*)[[[IMSearchUserReq builder] mergeFromData:data] build];
}
+ (IMSearchUserReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSearchUserReq*)[[[IMSearchUserReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSearchUserReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMSearchUserReq*)[[[IMSearchUserReq builder] mergeFromInputStream:input] build];
}
+ (IMSearchUserReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSearchUserReq*)[[[IMSearchUserReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSearchUserReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSearchUserReq*)[[[IMSearchUserReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMSearchUserReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSearchUserReq*)[[[IMSearchUserReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSearchUserReqBuilder*) builder {
  return [[IMSearchUserReqBuilder alloc] init];
}
+ (IMSearchUserReqBuilder*) builderWithPrototype:(IMSearchUserReq*) prototype {
  return [[IMSearchUserReq builder] mergeFrom:prototype];
}
- (IMSearchUserReqBuilder*) builder {
  return [IMSearchUserReq builder];
}
- (IMSearchUserReqBuilder*) toBuilder {
  return [IMSearchUserReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasSearchkey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchkey", self.searchkey];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasSearchkey) {
    [dictionary setObject: self.searchkey forKey: @"searchkey"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSearchUserReq class]]) {
    return NO;
  }
  IMSearchUserReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSearchkey == otherMessage.hasSearchkey &&
      (!self.hasSearchkey || [self.searchkey isEqual:otherMessage.searchkey]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasSearchkey) {
    hashCode = hashCode * 31 + [self.searchkey hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSearchUserReqBuilder()
@property (strong) IMSearchUserReq* resultImsearchUserReq;
@end

@implementation IMSearchUserReqBuilder
@synthesize resultImsearchUserReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsearchUserReq = [[IMSearchUserReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsearchUserReq;
}
- (IMSearchUserReqBuilder*) clear {
  self.resultImsearchUserReq = [[IMSearchUserReq alloc] init];
  return self;
}
- (IMSearchUserReqBuilder*) clone {
  return [IMSearchUserReq builderWithPrototype:resultImsearchUserReq];
}
- (IMSearchUserReq*) defaultInstance {
  return [IMSearchUserReq defaultInstance];
}
- (IMSearchUserReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSearchUserReq*) buildPartial {
  IMSearchUserReq* returnMe = resultImsearchUserReq;
  self.resultImsearchUserReq = nil;
  return returnMe;
}
- (IMSearchUserReqBuilder*) mergeFrom:(IMSearchUserReq*) other {
  if (other == [IMSearchUserReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSearchkey) {
    [self setSearchkey:other.searchkey];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSearchUserReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSearchUserReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        [self setSearchkey:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImsearchUserReq.hasUserId;
}
- (UInt64) userId {
  return resultImsearchUserReq.userId;
}
- (IMSearchUserReqBuilder*) setUserId:(UInt64) value {
  resultImsearchUserReq.hasUserId = YES;
  resultImsearchUserReq.userId = value;
  return self;
}
- (IMSearchUserReqBuilder*) clearUserId {
  resultImsearchUserReq.hasUserId = NO;
  resultImsearchUserReq.userId = 0L;
  return self;
}
- (BOOL) hasSearchkey {
  return resultImsearchUserReq.hasSearchkey;
}
- (NSString*) searchkey {
  return resultImsearchUserReq.searchkey;
}
- (IMSearchUserReqBuilder*) setSearchkey:(NSString*) value {
  resultImsearchUserReq.hasSearchkey = YES;
  resultImsearchUserReq.searchkey = value;
  return self;
}
- (IMSearchUserReqBuilder*) clearSearchkey {
  resultImsearchUserReq.hasSearchkey = NO;
  resultImsearchUserReq.searchkey = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImsearchUserReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImsearchUserReq.attachData;
}
- (IMSearchUserReqBuilder*) setAttachData:(NSData*) value {
  resultImsearchUserReq.hasAttachData = YES;
  resultImsearchUserReq.attachData = value;
  return self;
}
- (IMSearchUserReqBuilder*) clearAttachData {
  resultImsearchUserReq.hasAttachData = NO;
  resultImsearchUserReq.attachData = [NSData data];
  return self;
}
@end

@interface IMSearchUserRsp ()
@property UInt64 userId;
@property (strong) NSMutableArray * userListArray;
@property (strong) NSMutableArray * sbListArray;
@property (strong) NSData* attachData;
@end

@implementation IMSearchUserRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize userListArray;
@dynamic userList;
@synthesize sbListArray;
@dynamic sbList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMSearchUserRsp* defaultIMSearchUserRspInstance = nil;
+ (void) initialize {
  if (self == [IMSearchUserRsp class]) {
    defaultIMSearchUserRspInstance = [[IMSearchUserRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSearchUserRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSearchUserRspInstance;
}
- (NSArray *)userList {
  return userListArray;
}
- (UserInfo*)userListAtIndex:(NSUInteger)index {
  return [userListArray objectAtIndex:index];
}
- (NSArray *)sbList {
  return sbListArray;
}
- (SubscribeInfo*)sbListAtIndex:(NSUInteger)index {
  return [sbListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInituserList = YES;
   [self.userList enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserList) return isInituserList;
  __block BOOL isInitsbList = YES;
   [self.sbList enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsbList = NO;
      *stop = YES;
    }
  }];
  if (!isInitsbList) return isInitsbList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.sbListArray enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.sbListArray enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSearchUserRsp*) parseFromData:(NSData*) data {
  return (IMSearchUserRsp*)[[[IMSearchUserRsp builder] mergeFromData:data] build];
}
+ (IMSearchUserRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSearchUserRsp*)[[[IMSearchUserRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSearchUserRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMSearchUserRsp*)[[[IMSearchUserRsp builder] mergeFromInputStream:input] build];
}
+ (IMSearchUserRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSearchUserRsp*)[[[IMSearchUserRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSearchUserRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSearchUserRsp*)[[[IMSearchUserRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMSearchUserRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSearchUserRsp*)[[[IMSearchUserRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSearchUserRspBuilder*) builder {
  return [[IMSearchUserRspBuilder alloc] init];
}
+ (IMSearchUserRspBuilder*) builderWithPrototype:(IMSearchUserRsp*) prototype {
  return [[IMSearchUserRsp builder] mergeFrom:prototype];
}
- (IMSearchUserRspBuilder*) builder {
  return [IMSearchUserRsp builder];
}
- (IMSearchUserRspBuilder*) toBuilder {
  return [IMSearchUserRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.sbListArray enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sbList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  for (UserInfo* element in self.userListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userList"];
  }
  for (SubscribeInfo* element in self.sbListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"sbList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSearchUserRsp class]]) {
    return NO;
  }
  IMSearchUserRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.userListArray isEqualToArray:otherMessage.userListArray] &&
      [self.sbListArray isEqualToArray:otherMessage.sbListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(UserInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.sbListArray enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSearchUserRspBuilder()
@property (strong) IMSearchUserRsp* resultImsearchUserRsp;
@end

@implementation IMSearchUserRspBuilder
@synthesize resultImsearchUserRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsearchUserRsp = [[IMSearchUserRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsearchUserRsp;
}
- (IMSearchUserRspBuilder*) clear {
  self.resultImsearchUserRsp = [[IMSearchUserRsp alloc] init];
  return self;
}
- (IMSearchUserRspBuilder*) clone {
  return [IMSearchUserRsp builderWithPrototype:resultImsearchUserRsp];
}
- (IMSearchUserRsp*) defaultInstance {
  return [IMSearchUserRsp defaultInstance];
}
- (IMSearchUserRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSearchUserRsp*) buildPartial {
  IMSearchUserRsp* returnMe = resultImsearchUserRsp;
  self.resultImsearchUserRsp = nil;
  return returnMe;
}
- (IMSearchUserRspBuilder*) mergeFrom:(IMSearchUserRsp*) other {
  if (other == [IMSearchUserRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.userListArray.count > 0) {
    if (resultImsearchUserRsp.userListArray == nil) {
      resultImsearchUserRsp.userListArray = [[NSMutableArray alloc] initWithArray:other.userListArray];
    } else {
      [resultImsearchUserRsp.userListArray addObjectsFromArray:other.userListArray];
    }
  }
  if (other.sbListArray.count > 0) {
    if (resultImsearchUserRsp.sbListArray == nil) {
      resultImsearchUserRsp.sbListArray = [[NSMutableArray alloc] initWithArray:other.sbListArray];
    } else {
      [resultImsearchUserRsp.sbListArray addObjectsFromArray:other.sbListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSearchUserRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSearchUserRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        UserInfoBuilder* subBuilder = [UserInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserList:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        SubscribeInfoBuilder* subBuilder = [SubscribeInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSbList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImsearchUserRsp.hasUserId;
}
- (UInt64) userId {
  return resultImsearchUserRsp.userId;
}
- (IMSearchUserRspBuilder*) setUserId:(UInt64) value {
  resultImsearchUserRsp.hasUserId = YES;
  resultImsearchUserRsp.userId = value;
  return self;
}
- (IMSearchUserRspBuilder*) clearUserId {
  resultImsearchUserRsp.hasUserId = NO;
  resultImsearchUserRsp.userId = 0L;
  return self;
}
- (NSMutableArray *)userList {
  return resultImsearchUserRsp.userListArray;
}
- (UserInfo*)userListAtIndex:(NSUInteger)index {
  return [resultImsearchUserRsp userListAtIndex:index];
}
- (IMSearchUserRspBuilder *)addUserList:(UserInfo*)value {
  if (resultImsearchUserRsp.userListArray == nil) {
    resultImsearchUserRsp.userListArray = [[NSMutableArray alloc]init];
  }
  [resultImsearchUserRsp.userListArray addObject:value];
  return self;
}
- (IMSearchUserRspBuilder *)setUserListArray:(NSArray *)array {
  resultImsearchUserRsp.userListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMSearchUserRspBuilder *)clearUserList {
  resultImsearchUserRsp.userListArray = nil;
  return self;
}
- (NSMutableArray *)sbList {
  return resultImsearchUserRsp.sbListArray;
}
- (SubscribeInfo*)sbListAtIndex:(NSUInteger)index {
  return [resultImsearchUserRsp sbListAtIndex:index];
}
- (IMSearchUserRspBuilder *)addSbList:(SubscribeInfo*)value {
  if (resultImsearchUserRsp.sbListArray == nil) {
    resultImsearchUserRsp.sbListArray = [[NSMutableArray alloc]init];
  }
  [resultImsearchUserRsp.sbListArray addObject:value];
  return self;
}
- (IMSearchUserRspBuilder *)setSbListArray:(NSArray *)array {
  resultImsearchUserRsp.sbListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMSearchUserRspBuilder *)clearSbList {
  resultImsearchUserRsp.sbListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImsearchUserRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImsearchUserRsp.attachData;
}
- (IMSearchUserRspBuilder*) setAttachData:(NSData*) value {
  resultImsearchUserRsp.hasAttachData = YES;
  resultImsearchUserRsp.attachData = value;
  return self;
}
- (IMSearchUserRspBuilder*) clearAttachData {
  resultImsearchUserRsp.hasAttachData = NO;
  resultImsearchUserRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMAddFriendReq ()
@property UInt64 userId;
@property UInt64 toId;
@property (strong) NSString* verify;
@property (strong) NSData* attachData;
@end

@implementation IMAddFriendReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasToId {
  return !!hasToId_;
}
- (void) setHasToId:(BOOL) _value_ {
  hasToId_ = !!_value_;
}
@synthesize toId;
- (BOOL) hasVerify {
  return !!hasVerify_;
}
- (void) setHasVerify:(BOOL) _value_ {
  hasVerify_ = !!_value_;
}
@synthesize verify;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.toId = 0L;
    self.verify = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMAddFriendReq* defaultIMAddFriendReqInstance = nil;
+ (void) initialize {
  if (self == [IMAddFriendReq class]) {
    defaultIMAddFriendReqInstance = [[IMAddFriendReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAddFriendReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAddFriendReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasToId) {
    return NO;
  }
  if (!self.hasVerify) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasToId) {
    [output writeUInt64:2 value:self.toId];
  }
  if (self.hasVerify) {
    [output writeString:3 value:self.verify];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasToId) {
    size_ += computeUInt64Size(2, self.toId);
  }
  if (self.hasVerify) {
    size_ += computeStringSize(3, self.verify);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAddFriendReq*) parseFromData:(NSData*) data {
  return (IMAddFriendReq*)[[[IMAddFriendReq builder] mergeFromData:data] build];
}
+ (IMAddFriendReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAddFriendReq*)[[[IMAddFriendReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAddFriendReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMAddFriendReq*)[[[IMAddFriendReq builder] mergeFromInputStream:input] build];
}
+ (IMAddFriendReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAddFriendReq*)[[[IMAddFriendReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAddFriendReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAddFriendReq*)[[[IMAddFriendReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMAddFriendReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAddFriendReq*)[[[IMAddFriendReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAddFriendReqBuilder*) builder {
  return [[IMAddFriendReqBuilder alloc] init];
}
+ (IMAddFriendReqBuilder*) builderWithPrototype:(IMAddFriendReq*) prototype {
  return [[IMAddFriendReq builder] mergeFrom:prototype];
}
- (IMAddFriendReqBuilder*) builder {
  return [IMAddFriendReq builder];
}
- (IMAddFriendReqBuilder*) toBuilder {
  return [IMAddFriendReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasToId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toId", [NSNumber numberWithLongLong:self.toId]];
  }
  if (self.hasVerify) {
    [output appendFormat:@"%@%@: %@\n", indent, @"verify", self.verify];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasToId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.toId] forKey: @"toId"];
  }
  if (self.hasVerify) {
    [dictionary setObject: self.verify forKey: @"verify"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAddFriendReq class]]) {
    return NO;
  }
  IMAddFriendReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasToId == otherMessage.hasToId &&
      (!self.hasToId || self.toId == otherMessage.toId) &&
      self.hasVerify == otherMessage.hasVerify &&
      (!self.hasVerify || [self.verify isEqual:otherMessage.verify]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasToId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.toId] hash];
  }
  if (self.hasVerify) {
    hashCode = hashCode * 31 + [self.verify hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAddFriendReqBuilder()
@property (strong) IMAddFriendReq* resultImaddFriendReq;
@end

@implementation IMAddFriendReqBuilder
@synthesize resultImaddFriendReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImaddFriendReq = [[IMAddFriendReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImaddFriendReq;
}
- (IMAddFriendReqBuilder*) clear {
  self.resultImaddFriendReq = [[IMAddFriendReq alloc] init];
  return self;
}
- (IMAddFriendReqBuilder*) clone {
  return [IMAddFriendReq builderWithPrototype:resultImaddFriendReq];
}
- (IMAddFriendReq*) defaultInstance {
  return [IMAddFriendReq defaultInstance];
}
- (IMAddFriendReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAddFriendReq*) buildPartial {
  IMAddFriendReq* returnMe = resultImaddFriendReq;
  self.resultImaddFriendReq = nil;
  return returnMe;
}
- (IMAddFriendReqBuilder*) mergeFrom:(IMAddFriendReq*) other {
  if (other == [IMAddFriendReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasToId) {
    [self setToId:other.toId];
  }
  if (other.hasVerify) {
    [self setVerify:other.verify];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAddFriendReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAddFriendReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setToId:[input readUInt64]];
        break;
      }
      case 26: {
        [self setVerify:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImaddFriendReq.hasUserId;
}
- (UInt64) userId {
  return resultImaddFriendReq.userId;
}
- (IMAddFriendReqBuilder*) setUserId:(UInt64) value {
  resultImaddFriendReq.hasUserId = YES;
  resultImaddFriendReq.userId = value;
  return self;
}
- (IMAddFriendReqBuilder*) clearUserId {
  resultImaddFriendReq.hasUserId = NO;
  resultImaddFriendReq.userId = 0L;
  return self;
}
- (BOOL) hasToId {
  return resultImaddFriendReq.hasToId;
}
- (UInt64) toId {
  return resultImaddFriendReq.toId;
}
- (IMAddFriendReqBuilder*) setToId:(UInt64) value {
  resultImaddFriendReq.hasToId = YES;
  resultImaddFriendReq.toId = value;
  return self;
}
- (IMAddFriendReqBuilder*) clearToId {
  resultImaddFriendReq.hasToId = NO;
  resultImaddFriendReq.toId = 0L;
  return self;
}
- (BOOL) hasVerify {
  return resultImaddFriendReq.hasVerify;
}
- (NSString*) verify {
  return resultImaddFriendReq.verify;
}
- (IMAddFriendReqBuilder*) setVerify:(NSString*) value {
  resultImaddFriendReq.hasVerify = YES;
  resultImaddFriendReq.verify = value;
  return self;
}
- (IMAddFriendReqBuilder*) clearVerify {
  resultImaddFriendReq.hasVerify = NO;
  resultImaddFriendReq.verify = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImaddFriendReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImaddFriendReq.attachData;
}
- (IMAddFriendReqBuilder*) setAttachData:(NSData*) value {
  resultImaddFriendReq.hasAttachData = YES;
  resultImaddFriendReq.attachData = value;
  return self;
}
- (IMAddFriendReqBuilder*) clearAttachData {
  resultImaddFriendReq.hasAttachData = NO;
  resultImaddFriendReq.attachData = [NSData data];
  return self;
}
@end

@interface IMAddFriendRsp ()
@property UInt64 userId;
@property UInt64 toId;
@property VerifyRet verifyCode;
@property (strong) VerifyInfo* verifyinfo;
@property (strong) NSData* attachData;
@end

@implementation IMAddFriendRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasToId {
  return !!hasToId_;
}
- (void) setHasToId:(BOOL) _value_ {
  hasToId_ = !!_value_;
}
@synthesize toId;
- (BOOL) hasVerifyCode {
  return !!hasVerifyCode_;
}
- (void) setHasVerifyCode:(BOOL) _value_ {
  hasVerifyCode_ = !!_value_;
}
@synthesize verifyCode;
- (BOOL) hasVerifyinfo {
  return !!hasVerifyinfo_;
}
- (void) setHasVerifyinfo:(BOOL) _value_ {
  hasVerifyinfo_ = !!_value_;
}
@synthesize verifyinfo;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.toId = 0L;
    self.verifyCode = VerifyRetVerifyOk;
    self.verifyinfo = [VerifyInfo defaultInstance];
    self.attachData = [NSData data];
  }
  return self;
}
static IMAddFriendRsp* defaultIMAddFriendRspInstance = nil;
+ (void) initialize {
  if (self == [IMAddFriendRsp class]) {
    defaultIMAddFriendRspInstance = [[IMAddFriendRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAddFriendRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAddFriendRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasToId) {
    return NO;
  }
  if (!self.hasVerifyCode) {
    return NO;
  }
  if (self.hasVerifyinfo) {
    if (!self.verifyinfo.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasToId) {
    [output writeUInt64:2 value:self.toId];
  }
  if (self.hasVerifyCode) {
    [output writeEnum:3 value:self.verifyCode];
  }
  if (self.hasVerifyinfo) {
    [output writeMessage:19 value:self.verifyinfo];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasToId) {
    size_ += computeUInt64Size(2, self.toId);
  }
  if (self.hasVerifyCode) {
    size_ += computeEnumSize(3, self.verifyCode);
  }
  if (self.hasVerifyinfo) {
    size_ += computeMessageSize(19, self.verifyinfo);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAddFriendRsp*) parseFromData:(NSData*) data {
  return (IMAddFriendRsp*)[[[IMAddFriendRsp builder] mergeFromData:data] build];
}
+ (IMAddFriendRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAddFriendRsp*)[[[IMAddFriendRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAddFriendRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMAddFriendRsp*)[[[IMAddFriendRsp builder] mergeFromInputStream:input] build];
}
+ (IMAddFriendRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAddFriendRsp*)[[[IMAddFriendRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAddFriendRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAddFriendRsp*)[[[IMAddFriendRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMAddFriendRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAddFriendRsp*)[[[IMAddFriendRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAddFriendRspBuilder*) builder {
  return [[IMAddFriendRspBuilder alloc] init];
}
+ (IMAddFriendRspBuilder*) builderWithPrototype:(IMAddFriendRsp*) prototype {
  return [[IMAddFriendRsp builder] mergeFrom:prototype];
}
- (IMAddFriendRspBuilder*) builder {
  return [IMAddFriendRsp builder];
}
- (IMAddFriendRspBuilder*) toBuilder {
  return [IMAddFriendRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasToId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toId", [NSNumber numberWithLongLong:self.toId]];
  }
  if (self.hasVerifyCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"verifyCode", NSStringFromVerifyRet(self.verifyCode)];
  }
  if (self.hasVerifyinfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"verifyinfo"];
    [self.verifyinfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasToId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.toId] forKey: @"toId"];
  }
  if (self.hasVerifyCode) {
    [dictionary setObject: @(self.verifyCode) forKey: @"verifyCode"];
  }
  if (self.hasVerifyinfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.verifyinfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"verifyinfo"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAddFriendRsp class]]) {
    return NO;
  }
  IMAddFriendRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasToId == otherMessage.hasToId &&
      (!self.hasToId || self.toId == otherMessage.toId) &&
      self.hasVerifyCode == otherMessage.hasVerifyCode &&
      (!self.hasVerifyCode || self.verifyCode == otherMessage.verifyCode) &&
      self.hasVerifyinfo == otherMessage.hasVerifyinfo &&
      (!self.hasVerifyinfo || [self.verifyinfo isEqual:otherMessage.verifyinfo]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasToId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.toId] hash];
  }
  if (self.hasVerifyCode) {
    hashCode = hashCode * 31 + self.verifyCode;
  }
  if (self.hasVerifyinfo) {
    hashCode = hashCode * 31 + [self.verifyinfo hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAddFriendRspBuilder()
@property (strong) IMAddFriendRsp* resultImaddFriendRsp;
@end

@implementation IMAddFriendRspBuilder
@synthesize resultImaddFriendRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImaddFriendRsp = [[IMAddFriendRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImaddFriendRsp;
}
- (IMAddFriendRspBuilder*) clear {
  self.resultImaddFriendRsp = [[IMAddFriendRsp alloc] init];
  return self;
}
- (IMAddFriendRspBuilder*) clone {
  return [IMAddFriendRsp builderWithPrototype:resultImaddFriendRsp];
}
- (IMAddFriendRsp*) defaultInstance {
  return [IMAddFriendRsp defaultInstance];
}
- (IMAddFriendRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAddFriendRsp*) buildPartial {
  IMAddFriendRsp* returnMe = resultImaddFriendRsp;
  self.resultImaddFriendRsp = nil;
  return returnMe;
}
- (IMAddFriendRspBuilder*) mergeFrom:(IMAddFriendRsp*) other {
  if (other == [IMAddFriendRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasToId) {
    [self setToId:other.toId];
  }
  if (other.hasVerifyCode) {
    [self setVerifyCode:other.verifyCode];
  }
  if (other.hasVerifyinfo) {
    [self mergeVerifyinfo:other.verifyinfo];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAddFriendRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAddFriendRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setToId:[input readUInt64]];
        break;
      }
      case 24: {
        VerifyRet value = (VerifyRet)[input readEnum];
        if (VerifyRetIsValidValue(value)) {
          [self setVerifyCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 154: {
        VerifyInfoBuilder* subBuilder = [VerifyInfo builder];
        if (self.hasVerifyinfo) {
          [subBuilder mergeFrom:self.verifyinfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setVerifyinfo:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImaddFriendRsp.hasUserId;
}
- (UInt64) userId {
  return resultImaddFriendRsp.userId;
}
- (IMAddFriendRspBuilder*) setUserId:(UInt64) value {
  resultImaddFriendRsp.hasUserId = YES;
  resultImaddFriendRsp.userId = value;
  return self;
}
- (IMAddFriendRspBuilder*) clearUserId {
  resultImaddFriendRsp.hasUserId = NO;
  resultImaddFriendRsp.userId = 0L;
  return self;
}
- (BOOL) hasToId {
  return resultImaddFriendRsp.hasToId;
}
- (UInt64) toId {
  return resultImaddFriendRsp.toId;
}
- (IMAddFriendRspBuilder*) setToId:(UInt64) value {
  resultImaddFriendRsp.hasToId = YES;
  resultImaddFriendRsp.toId = value;
  return self;
}
- (IMAddFriendRspBuilder*) clearToId {
  resultImaddFriendRsp.hasToId = NO;
  resultImaddFriendRsp.toId = 0L;
  return self;
}
- (BOOL) hasVerifyCode {
  return resultImaddFriendRsp.hasVerifyCode;
}
- (VerifyRet) verifyCode {
  return resultImaddFriendRsp.verifyCode;
}
- (IMAddFriendRspBuilder*) setVerifyCode:(VerifyRet) value {
  resultImaddFriendRsp.hasVerifyCode = YES;
  resultImaddFriendRsp.verifyCode = value;
  return self;
}
- (IMAddFriendRspBuilder*) clearVerifyCode {
  resultImaddFriendRsp.hasVerifyCode = NO;
  resultImaddFriendRsp.verifyCode = VerifyRetVerifyOk;
  return self;
}
- (BOOL) hasVerifyinfo {
  return resultImaddFriendRsp.hasVerifyinfo;
}
- (VerifyInfo*) verifyinfo {
  return resultImaddFriendRsp.verifyinfo;
}
- (IMAddFriendRspBuilder*) setVerifyinfo:(VerifyInfo*) value {
  resultImaddFriendRsp.hasVerifyinfo = YES;
  resultImaddFriendRsp.verifyinfo = value;
  return self;
}
- (IMAddFriendRspBuilder*) setVerifyinfoBuilder:(VerifyInfoBuilder*) builderForValue {
  return [self setVerifyinfo:[builderForValue build]];
}
- (IMAddFriendRspBuilder*) mergeVerifyinfo:(VerifyInfo*) value {
  if (resultImaddFriendRsp.hasVerifyinfo &&
      resultImaddFriendRsp.verifyinfo != [VerifyInfo defaultInstance]) {
    resultImaddFriendRsp.verifyinfo =
      [[[VerifyInfo builderWithPrototype:resultImaddFriendRsp.verifyinfo] mergeFrom:value] buildPartial];
  } else {
    resultImaddFriendRsp.verifyinfo = value;
  }
  resultImaddFriendRsp.hasVerifyinfo = YES;
  return self;
}
- (IMAddFriendRspBuilder*) clearVerifyinfo {
  resultImaddFriendRsp.hasVerifyinfo = NO;
  resultImaddFriendRsp.verifyinfo = [VerifyInfo defaultInstance];
  return self;
}
- (BOOL) hasAttachData {
  return resultImaddFriendRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImaddFriendRsp.attachData;
}
- (IMAddFriendRspBuilder*) setAttachData:(NSData*) value {
  resultImaddFriendRsp.hasAttachData = YES;
  resultImaddFriendRsp.attachData = value;
  return self;
}
- (IMAddFriendRspBuilder*) clearAttachData {
  resultImaddFriendRsp.hasAttachData = NO;
  resultImaddFriendRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMAddFriendNotify ()
@property UInt64 userId;
@property (strong) VerifyInfo* verifyinfo;
@end

@implementation IMAddFriendNotify

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasVerifyinfo {
  return !!hasVerifyinfo_;
}
- (void) setHasVerifyinfo:(BOOL) _value_ {
  hasVerifyinfo_ = !!_value_;
}
@synthesize verifyinfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.verifyinfo = [VerifyInfo defaultInstance];
  }
  return self;
}
static IMAddFriendNotify* defaultIMAddFriendNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMAddFriendNotify class]) {
    defaultIMAddFriendNotifyInstance = [[IMAddFriendNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAddFriendNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAddFriendNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasVerifyinfo) {
    return NO;
  }
  if (!self.verifyinfo.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasVerifyinfo) {
    [output writeMessage:2 value:self.verifyinfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasVerifyinfo) {
    size_ += computeMessageSize(2, self.verifyinfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAddFriendNotify*) parseFromData:(NSData*) data {
  return (IMAddFriendNotify*)[[[IMAddFriendNotify builder] mergeFromData:data] build];
}
+ (IMAddFriendNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAddFriendNotify*)[[[IMAddFriendNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAddFriendNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMAddFriendNotify*)[[[IMAddFriendNotify builder] mergeFromInputStream:input] build];
}
+ (IMAddFriendNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAddFriendNotify*)[[[IMAddFriendNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAddFriendNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAddFriendNotify*)[[[IMAddFriendNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMAddFriendNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAddFriendNotify*)[[[IMAddFriendNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAddFriendNotifyBuilder*) builder {
  return [[IMAddFriendNotifyBuilder alloc] init];
}
+ (IMAddFriendNotifyBuilder*) builderWithPrototype:(IMAddFriendNotify*) prototype {
  return [[IMAddFriendNotify builder] mergeFrom:prototype];
}
- (IMAddFriendNotifyBuilder*) builder {
  return [IMAddFriendNotify builder];
}
- (IMAddFriendNotifyBuilder*) toBuilder {
  return [IMAddFriendNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasVerifyinfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"verifyinfo"];
    [self.verifyinfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasVerifyinfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.verifyinfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"verifyinfo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAddFriendNotify class]]) {
    return NO;
  }
  IMAddFriendNotify *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasVerifyinfo == otherMessage.hasVerifyinfo &&
      (!self.hasVerifyinfo || [self.verifyinfo isEqual:otherMessage.verifyinfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasVerifyinfo) {
    hashCode = hashCode * 31 + [self.verifyinfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAddFriendNotifyBuilder()
@property (strong) IMAddFriendNotify* resultImaddFriendNotify;
@end

@implementation IMAddFriendNotifyBuilder
@synthesize resultImaddFriendNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImaddFriendNotify = [[IMAddFriendNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImaddFriendNotify;
}
- (IMAddFriendNotifyBuilder*) clear {
  self.resultImaddFriendNotify = [[IMAddFriendNotify alloc] init];
  return self;
}
- (IMAddFriendNotifyBuilder*) clone {
  return [IMAddFriendNotify builderWithPrototype:resultImaddFriendNotify];
}
- (IMAddFriendNotify*) defaultInstance {
  return [IMAddFriendNotify defaultInstance];
}
- (IMAddFriendNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAddFriendNotify*) buildPartial {
  IMAddFriendNotify* returnMe = resultImaddFriendNotify;
  self.resultImaddFriendNotify = nil;
  return returnMe;
}
- (IMAddFriendNotifyBuilder*) mergeFrom:(IMAddFriendNotify*) other {
  if (other == [IMAddFriendNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasVerifyinfo) {
    [self mergeVerifyinfo:other.verifyinfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAddFriendNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAddFriendNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        VerifyInfoBuilder* subBuilder = [VerifyInfo builder];
        if (self.hasVerifyinfo) {
          [subBuilder mergeFrom:self.verifyinfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setVerifyinfo:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImaddFriendNotify.hasUserId;
}
- (UInt64) userId {
  return resultImaddFriendNotify.userId;
}
- (IMAddFriendNotifyBuilder*) setUserId:(UInt64) value {
  resultImaddFriendNotify.hasUserId = YES;
  resultImaddFriendNotify.userId = value;
  return self;
}
- (IMAddFriendNotifyBuilder*) clearUserId {
  resultImaddFriendNotify.hasUserId = NO;
  resultImaddFriendNotify.userId = 0L;
  return self;
}
- (BOOL) hasVerifyinfo {
  return resultImaddFriendNotify.hasVerifyinfo;
}
- (VerifyInfo*) verifyinfo {
  return resultImaddFriendNotify.verifyinfo;
}
- (IMAddFriendNotifyBuilder*) setVerifyinfo:(VerifyInfo*) value {
  resultImaddFriendNotify.hasVerifyinfo = YES;
  resultImaddFriendNotify.verifyinfo = value;
  return self;
}
- (IMAddFriendNotifyBuilder*) setVerifyinfoBuilder:(VerifyInfoBuilder*) builderForValue {
  return [self setVerifyinfo:[builderForValue build]];
}
- (IMAddFriendNotifyBuilder*) mergeVerifyinfo:(VerifyInfo*) value {
  if (resultImaddFriendNotify.hasVerifyinfo &&
      resultImaddFriendNotify.verifyinfo != [VerifyInfo defaultInstance]) {
    resultImaddFriendNotify.verifyinfo =
      [[[VerifyInfo builderWithPrototype:resultImaddFriendNotify.verifyinfo] mergeFrom:value] buildPartial];
  } else {
    resultImaddFriendNotify.verifyinfo = value;
  }
  resultImaddFriendNotify.hasVerifyinfo = YES;
  return self;
}
- (IMAddFriendNotifyBuilder*) clearVerifyinfo {
  resultImaddFriendNotify.hasVerifyinfo = NO;
  resultImaddFriendNotify.verifyinfo = [VerifyInfo defaultInstance];
  return self;
}
@end

@interface IMAcceptFriendReq ()
@property UInt64 userId;
@property UInt64 fromId;
@property (strong) NSData* attachData;
@end

@implementation IMAcceptFriendReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasFromId {
  return !!hasFromId_;
}
- (void) setHasFromId:(BOOL) _value_ {
  hasFromId_ = !!_value_;
}
@synthesize fromId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.fromId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMAcceptFriendReq* defaultIMAcceptFriendReqInstance = nil;
+ (void) initialize {
  if (self == [IMAcceptFriendReq class]) {
    defaultIMAcceptFriendReqInstance = [[IMAcceptFriendReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAcceptFriendReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAcceptFriendReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasFromId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasFromId) {
    [output writeUInt64:2 value:self.fromId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasFromId) {
    size_ += computeUInt64Size(2, self.fromId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAcceptFriendReq*) parseFromData:(NSData*) data {
  return (IMAcceptFriendReq*)[[[IMAcceptFriendReq builder] mergeFromData:data] build];
}
+ (IMAcceptFriendReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAcceptFriendReq*)[[[IMAcceptFriendReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAcceptFriendReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMAcceptFriendReq*)[[[IMAcceptFriendReq builder] mergeFromInputStream:input] build];
}
+ (IMAcceptFriendReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAcceptFriendReq*)[[[IMAcceptFriendReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAcceptFriendReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAcceptFriendReq*)[[[IMAcceptFriendReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMAcceptFriendReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAcceptFriendReq*)[[[IMAcceptFriendReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAcceptFriendReqBuilder*) builder {
  return [[IMAcceptFriendReqBuilder alloc] init];
}
+ (IMAcceptFriendReqBuilder*) builderWithPrototype:(IMAcceptFriendReq*) prototype {
  return [[IMAcceptFriendReq builder] mergeFrom:prototype];
}
- (IMAcceptFriendReqBuilder*) builder {
  return [IMAcceptFriendReq builder];
}
- (IMAcceptFriendReqBuilder*) toBuilder {
  return [IMAcceptFriendReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasFromId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromId", [NSNumber numberWithLongLong:self.fromId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasFromId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.fromId] forKey: @"fromId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAcceptFriendReq class]]) {
    return NO;
  }
  IMAcceptFriendReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasFromId == otherMessage.hasFromId &&
      (!self.hasFromId || self.fromId == otherMessage.fromId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasFromId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fromId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAcceptFriendReqBuilder()
@property (strong) IMAcceptFriendReq* resultImacceptFriendReq;
@end

@implementation IMAcceptFriendReqBuilder
@synthesize resultImacceptFriendReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImacceptFriendReq = [[IMAcceptFriendReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImacceptFriendReq;
}
- (IMAcceptFriendReqBuilder*) clear {
  self.resultImacceptFriendReq = [[IMAcceptFriendReq alloc] init];
  return self;
}
- (IMAcceptFriendReqBuilder*) clone {
  return [IMAcceptFriendReq builderWithPrototype:resultImacceptFriendReq];
}
- (IMAcceptFriendReq*) defaultInstance {
  return [IMAcceptFriendReq defaultInstance];
}
- (IMAcceptFriendReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAcceptFriendReq*) buildPartial {
  IMAcceptFriendReq* returnMe = resultImacceptFriendReq;
  self.resultImacceptFriendReq = nil;
  return returnMe;
}
- (IMAcceptFriendReqBuilder*) mergeFrom:(IMAcceptFriendReq*) other {
  if (other == [IMAcceptFriendReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasFromId) {
    [self setFromId:other.fromId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAcceptFriendReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAcceptFriendReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setFromId:[input readUInt64]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImacceptFriendReq.hasUserId;
}
- (UInt64) userId {
  return resultImacceptFriendReq.userId;
}
- (IMAcceptFriendReqBuilder*) setUserId:(UInt64) value {
  resultImacceptFriendReq.hasUserId = YES;
  resultImacceptFriendReq.userId = value;
  return self;
}
- (IMAcceptFriendReqBuilder*) clearUserId {
  resultImacceptFriendReq.hasUserId = NO;
  resultImacceptFriendReq.userId = 0L;
  return self;
}
- (BOOL) hasFromId {
  return resultImacceptFriendReq.hasFromId;
}
- (UInt64) fromId {
  return resultImacceptFriendReq.fromId;
}
- (IMAcceptFriendReqBuilder*) setFromId:(UInt64) value {
  resultImacceptFriendReq.hasFromId = YES;
  resultImacceptFriendReq.fromId = value;
  return self;
}
- (IMAcceptFriendReqBuilder*) clearFromId {
  resultImacceptFriendReq.hasFromId = NO;
  resultImacceptFriendReq.fromId = 0L;
  return self;
}
- (BOOL) hasAttachData {
  return resultImacceptFriendReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImacceptFriendReq.attachData;
}
- (IMAcceptFriendReqBuilder*) setAttachData:(NSData*) value {
  resultImacceptFriendReq.hasAttachData = YES;
  resultImacceptFriendReq.attachData = value;
  return self;
}
- (IMAcceptFriendReqBuilder*) clearAttachData {
  resultImacceptFriendReq.hasAttachData = NO;
  resultImacceptFriendReq.attachData = [NSData data];
  return self;
}
@end

@interface IMAcceptFriendRsp ()
@property UInt64 userId;
@property UInt64 fromId;
@property VerifyRet verifyCode;
@property (strong) NSData* attachData;
@end

@implementation IMAcceptFriendRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasFromId {
  return !!hasFromId_;
}
- (void) setHasFromId:(BOOL) _value_ {
  hasFromId_ = !!_value_;
}
@synthesize fromId;
- (BOOL) hasVerifyCode {
  return !!hasVerifyCode_;
}
- (void) setHasVerifyCode:(BOOL) _value_ {
  hasVerifyCode_ = !!_value_;
}
@synthesize verifyCode;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.fromId = 0L;
    self.verifyCode = VerifyRetVerifyOk;
    self.attachData = [NSData data];
  }
  return self;
}
static IMAcceptFriendRsp* defaultIMAcceptFriendRspInstance = nil;
+ (void) initialize {
  if (self == [IMAcceptFriendRsp class]) {
    defaultIMAcceptFriendRspInstance = [[IMAcceptFriendRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAcceptFriendRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAcceptFriendRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasFromId) {
    return NO;
  }
  if (!self.hasVerifyCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasFromId) {
    [output writeUInt64:2 value:self.fromId];
  }
  if (self.hasVerifyCode) {
    [output writeEnum:3 value:self.verifyCode];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasFromId) {
    size_ += computeUInt64Size(2, self.fromId);
  }
  if (self.hasVerifyCode) {
    size_ += computeEnumSize(3, self.verifyCode);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAcceptFriendRsp*) parseFromData:(NSData*) data {
  return (IMAcceptFriendRsp*)[[[IMAcceptFriendRsp builder] mergeFromData:data] build];
}
+ (IMAcceptFriendRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAcceptFriendRsp*)[[[IMAcceptFriendRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAcceptFriendRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMAcceptFriendRsp*)[[[IMAcceptFriendRsp builder] mergeFromInputStream:input] build];
}
+ (IMAcceptFriendRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAcceptFriendRsp*)[[[IMAcceptFriendRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAcceptFriendRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAcceptFriendRsp*)[[[IMAcceptFriendRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMAcceptFriendRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAcceptFriendRsp*)[[[IMAcceptFriendRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAcceptFriendRspBuilder*) builder {
  return [[IMAcceptFriendRspBuilder alloc] init];
}
+ (IMAcceptFriendRspBuilder*) builderWithPrototype:(IMAcceptFriendRsp*) prototype {
  return [[IMAcceptFriendRsp builder] mergeFrom:prototype];
}
- (IMAcceptFriendRspBuilder*) builder {
  return [IMAcceptFriendRsp builder];
}
- (IMAcceptFriendRspBuilder*) toBuilder {
  return [IMAcceptFriendRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasFromId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromId", [NSNumber numberWithLongLong:self.fromId]];
  }
  if (self.hasVerifyCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"verifyCode", NSStringFromVerifyRet(self.verifyCode)];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasFromId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.fromId] forKey: @"fromId"];
  }
  if (self.hasVerifyCode) {
    [dictionary setObject: @(self.verifyCode) forKey: @"verifyCode"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAcceptFriendRsp class]]) {
    return NO;
  }
  IMAcceptFriendRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasFromId == otherMessage.hasFromId &&
      (!self.hasFromId || self.fromId == otherMessage.fromId) &&
      self.hasVerifyCode == otherMessage.hasVerifyCode &&
      (!self.hasVerifyCode || self.verifyCode == otherMessage.verifyCode) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasFromId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fromId] hash];
  }
  if (self.hasVerifyCode) {
    hashCode = hashCode * 31 + self.verifyCode;
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAcceptFriendRspBuilder()
@property (strong) IMAcceptFriendRsp* resultImacceptFriendRsp;
@end

@implementation IMAcceptFriendRspBuilder
@synthesize resultImacceptFriendRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImacceptFriendRsp = [[IMAcceptFriendRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImacceptFriendRsp;
}
- (IMAcceptFriendRspBuilder*) clear {
  self.resultImacceptFriendRsp = [[IMAcceptFriendRsp alloc] init];
  return self;
}
- (IMAcceptFriendRspBuilder*) clone {
  return [IMAcceptFriendRsp builderWithPrototype:resultImacceptFriendRsp];
}
- (IMAcceptFriendRsp*) defaultInstance {
  return [IMAcceptFriendRsp defaultInstance];
}
- (IMAcceptFriendRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAcceptFriendRsp*) buildPartial {
  IMAcceptFriendRsp* returnMe = resultImacceptFriendRsp;
  self.resultImacceptFriendRsp = nil;
  return returnMe;
}
- (IMAcceptFriendRspBuilder*) mergeFrom:(IMAcceptFriendRsp*) other {
  if (other == [IMAcceptFriendRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasFromId) {
    [self setFromId:other.fromId];
  }
  if (other.hasVerifyCode) {
    [self setVerifyCode:other.verifyCode];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAcceptFriendRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAcceptFriendRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setFromId:[input readUInt64]];
        break;
      }
      case 24: {
        VerifyRet value = (VerifyRet)[input readEnum];
        if (VerifyRetIsValidValue(value)) {
          [self setVerifyCode:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImacceptFriendRsp.hasUserId;
}
- (UInt64) userId {
  return resultImacceptFriendRsp.userId;
}
- (IMAcceptFriendRspBuilder*) setUserId:(UInt64) value {
  resultImacceptFriendRsp.hasUserId = YES;
  resultImacceptFriendRsp.userId = value;
  return self;
}
- (IMAcceptFriendRspBuilder*) clearUserId {
  resultImacceptFriendRsp.hasUserId = NO;
  resultImacceptFriendRsp.userId = 0L;
  return self;
}
- (BOOL) hasFromId {
  return resultImacceptFriendRsp.hasFromId;
}
- (UInt64) fromId {
  return resultImacceptFriendRsp.fromId;
}
- (IMAcceptFriendRspBuilder*) setFromId:(UInt64) value {
  resultImacceptFriendRsp.hasFromId = YES;
  resultImacceptFriendRsp.fromId = value;
  return self;
}
- (IMAcceptFriendRspBuilder*) clearFromId {
  resultImacceptFriendRsp.hasFromId = NO;
  resultImacceptFriendRsp.fromId = 0L;
  return self;
}
- (BOOL) hasVerifyCode {
  return resultImacceptFriendRsp.hasVerifyCode;
}
- (VerifyRet) verifyCode {
  return resultImacceptFriendRsp.verifyCode;
}
- (IMAcceptFriendRspBuilder*) setVerifyCode:(VerifyRet) value {
  resultImacceptFriendRsp.hasVerifyCode = YES;
  resultImacceptFriendRsp.verifyCode = value;
  return self;
}
- (IMAcceptFriendRspBuilder*) clearVerifyCode {
  resultImacceptFriendRsp.hasVerifyCode = NO;
  resultImacceptFriendRsp.verifyCode = VerifyRetVerifyOk;
  return self;
}
- (BOOL) hasAttachData {
  return resultImacceptFriendRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImacceptFriendRsp.attachData;
}
- (IMAcceptFriendRspBuilder*) setAttachData:(NSData*) value {
  resultImacceptFriendRsp.hasAttachData = YES;
  resultImacceptFriendRsp.attachData = value;
  return self;
}
- (IMAcceptFriendRspBuilder*) clearAttachData {
  resultImacceptFriendRsp.hasAttachData = NO;
  resultImacceptFriendRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMAcceptFriendNotify ()
@property UInt64 userId;
@property UInt64 fromId;
@end

@implementation IMAcceptFriendNotify

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasFromId {
  return !!hasFromId_;
}
- (void) setHasFromId:(BOOL) _value_ {
  hasFromId_ = !!_value_;
}
@synthesize fromId;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.fromId = 0L;
  }
  return self;
}
static IMAcceptFriendNotify* defaultIMAcceptFriendNotifyInstance = nil;
+ (void) initialize {
  if (self == [IMAcceptFriendNotify class]) {
    defaultIMAcceptFriendNotifyInstance = [[IMAcceptFriendNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMAcceptFriendNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMAcceptFriendNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasFromId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasFromId) {
    [output writeUInt64:2 value:self.fromId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasFromId) {
    size_ += computeUInt64Size(2, self.fromId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMAcceptFriendNotify*) parseFromData:(NSData*) data {
  return (IMAcceptFriendNotify*)[[[IMAcceptFriendNotify builder] mergeFromData:data] build];
}
+ (IMAcceptFriendNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAcceptFriendNotify*)[[[IMAcceptFriendNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMAcceptFriendNotify*) parseFromInputStream:(NSInputStream*) input {
  return (IMAcceptFriendNotify*)[[[IMAcceptFriendNotify builder] mergeFromInputStream:input] build];
}
+ (IMAcceptFriendNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAcceptFriendNotify*)[[[IMAcceptFriendNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAcceptFriendNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMAcceptFriendNotify*)[[[IMAcceptFriendNotify builder] mergeFromCodedInputStream:input] build];
}
+ (IMAcceptFriendNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMAcceptFriendNotify*)[[[IMAcceptFriendNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMAcceptFriendNotifyBuilder*) builder {
  return [[IMAcceptFriendNotifyBuilder alloc] init];
}
+ (IMAcceptFriendNotifyBuilder*) builderWithPrototype:(IMAcceptFriendNotify*) prototype {
  return [[IMAcceptFriendNotify builder] mergeFrom:prototype];
}
- (IMAcceptFriendNotifyBuilder*) builder {
  return [IMAcceptFriendNotify builder];
}
- (IMAcceptFriendNotifyBuilder*) toBuilder {
  return [IMAcceptFriendNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasFromId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromId", [NSNumber numberWithLongLong:self.fromId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasFromId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.fromId] forKey: @"fromId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMAcceptFriendNotify class]]) {
    return NO;
  }
  IMAcceptFriendNotify *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasFromId == otherMessage.hasFromId &&
      (!self.hasFromId || self.fromId == otherMessage.fromId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasFromId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fromId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMAcceptFriendNotifyBuilder()
@property (strong) IMAcceptFriendNotify* resultImacceptFriendNotify;
@end

@implementation IMAcceptFriendNotifyBuilder
@synthesize resultImacceptFriendNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImacceptFriendNotify = [[IMAcceptFriendNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImacceptFriendNotify;
}
- (IMAcceptFriendNotifyBuilder*) clear {
  self.resultImacceptFriendNotify = [[IMAcceptFriendNotify alloc] init];
  return self;
}
- (IMAcceptFriendNotifyBuilder*) clone {
  return [IMAcceptFriendNotify builderWithPrototype:resultImacceptFriendNotify];
}
- (IMAcceptFriendNotify*) defaultInstance {
  return [IMAcceptFriendNotify defaultInstance];
}
- (IMAcceptFriendNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMAcceptFriendNotify*) buildPartial {
  IMAcceptFriendNotify* returnMe = resultImacceptFriendNotify;
  self.resultImacceptFriendNotify = nil;
  return returnMe;
}
- (IMAcceptFriendNotifyBuilder*) mergeFrom:(IMAcceptFriendNotify*) other {
  if (other == [IMAcceptFriendNotify defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasFromId) {
    [self setFromId:other.fromId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMAcceptFriendNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMAcceptFriendNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setFromId:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImacceptFriendNotify.hasUserId;
}
- (UInt64) userId {
  return resultImacceptFriendNotify.userId;
}
- (IMAcceptFriendNotifyBuilder*) setUserId:(UInt64) value {
  resultImacceptFriendNotify.hasUserId = YES;
  resultImacceptFriendNotify.userId = value;
  return self;
}
- (IMAcceptFriendNotifyBuilder*) clearUserId {
  resultImacceptFriendNotify.hasUserId = NO;
  resultImacceptFriendNotify.userId = 0L;
  return self;
}
- (BOOL) hasFromId {
  return resultImacceptFriendNotify.hasFromId;
}
- (UInt64) fromId {
  return resultImacceptFriendNotify.fromId;
}
- (IMAcceptFriendNotifyBuilder*) setFromId:(UInt64) value {
  resultImacceptFriendNotify.hasFromId = YES;
  resultImacceptFriendNotify.fromId = value;
  return self;
}
- (IMAcceptFriendNotifyBuilder*) clearFromId {
  resultImacceptFriendNotify.hasFromId = NO;
  resultImacceptFriendNotify.fromId = 0L;
  return self;
}
@end

@interface IMDenialVerify ()
@property UInt64 userId;
@property UInt64 fromId;
@end

@implementation IMDenialVerify

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasFromId {
  return !!hasFromId_;
}
- (void) setHasFromId:(BOOL) _value_ {
  hasFromId_ = !!_value_;
}
@synthesize fromId;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.fromId = 0L;
  }
  return self;
}
static IMDenialVerify* defaultIMDenialVerifyInstance = nil;
+ (void) initialize {
  if (self == [IMDenialVerify class]) {
    defaultIMDenialVerifyInstance = [[IMDenialVerify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMDenialVerifyInstance;
}
- (instancetype) defaultInstance {
  return defaultIMDenialVerifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasFromId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasFromId) {
    [output writeUInt64:2 value:self.fromId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasFromId) {
    size_ += computeUInt64Size(2, self.fromId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMDenialVerify*) parseFromData:(NSData*) data {
  return (IMDenialVerify*)[[[IMDenialVerify builder] mergeFromData:data] build];
}
+ (IMDenialVerify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDenialVerify*)[[[IMDenialVerify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMDenialVerify*) parseFromInputStream:(NSInputStream*) input {
  return (IMDenialVerify*)[[[IMDenialVerify builder] mergeFromInputStream:input] build];
}
+ (IMDenialVerify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDenialVerify*)[[[IMDenialVerify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDenialVerify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMDenialVerify*)[[[IMDenialVerify builder] mergeFromCodedInputStream:input] build];
}
+ (IMDenialVerify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMDenialVerify*)[[[IMDenialVerify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMDenialVerifyBuilder*) builder {
  return [[IMDenialVerifyBuilder alloc] init];
}
+ (IMDenialVerifyBuilder*) builderWithPrototype:(IMDenialVerify*) prototype {
  return [[IMDenialVerify builder] mergeFrom:prototype];
}
- (IMDenialVerifyBuilder*) builder {
  return [IMDenialVerify builder];
}
- (IMDenialVerifyBuilder*) toBuilder {
  return [IMDenialVerify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasFromId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromId", [NSNumber numberWithLongLong:self.fromId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasFromId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.fromId] forKey: @"fromId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMDenialVerify class]]) {
    return NO;
  }
  IMDenialVerify *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasFromId == otherMessage.hasFromId &&
      (!self.hasFromId || self.fromId == otherMessage.fromId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasFromId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fromId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMDenialVerifyBuilder()
@property (strong) IMDenialVerify* resultImdenialVerify;
@end

@implementation IMDenialVerifyBuilder
@synthesize resultImdenialVerify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImdenialVerify = [[IMDenialVerify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImdenialVerify;
}
- (IMDenialVerifyBuilder*) clear {
  self.resultImdenialVerify = [[IMDenialVerify alloc] init];
  return self;
}
- (IMDenialVerifyBuilder*) clone {
  return [IMDenialVerify builderWithPrototype:resultImdenialVerify];
}
- (IMDenialVerify*) defaultInstance {
  return [IMDenialVerify defaultInstance];
}
- (IMDenialVerify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMDenialVerify*) buildPartial {
  IMDenialVerify* returnMe = resultImdenialVerify;
  self.resultImdenialVerify = nil;
  return returnMe;
}
- (IMDenialVerifyBuilder*) mergeFrom:(IMDenialVerify*) other {
  if (other == [IMDenialVerify defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasFromId) {
    [self setFromId:other.fromId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMDenialVerifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMDenialVerifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setFromId:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImdenialVerify.hasUserId;
}
- (UInt64) userId {
  return resultImdenialVerify.userId;
}
- (IMDenialVerifyBuilder*) setUserId:(UInt64) value {
  resultImdenialVerify.hasUserId = YES;
  resultImdenialVerify.userId = value;
  return self;
}
- (IMDenialVerifyBuilder*) clearUserId {
  resultImdenialVerify.hasUserId = NO;
  resultImdenialVerify.userId = 0L;
  return self;
}
- (BOOL) hasFromId {
  return resultImdenialVerify.hasFromId;
}
- (UInt64) fromId {
  return resultImdenialVerify.fromId;
}
- (IMDenialVerifyBuilder*) setFromId:(UInt64) value {
  resultImdenialVerify.hasFromId = YES;
  resultImdenialVerify.fromId = value;
  return self;
}
- (IMDenialVerifyBuilder*) clearFromId {
  resultImdenialVerify.hasFromId = NO;
  resultImdenialVerify.fromId = 0L;
  return self;
}
@end

@interface IMListVerifyReq ()
@property UInt64 userId;
@property UInt32 lastUpdatetime;
@property (strong) NSData* attachData;
@end

@implementation IMListVerifyReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasLastUpdatetime {
  return !!hasLastUpdatetime_;
}
- (void) setHasLastUpdatetime:(BOOL) _value_ {
  hasLastUpdatetime_ = !!_value_;
}
@synthesize lastUpdatetime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.lastUpdatetime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMListVerifyReq* defaultIMListVerifyReqInstance = nil;
+ (void) initialize {
  if (self == [IMListVerifyReq class]) {
    defaultIMListVerifyReqInstance = [[IMListVerifyReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMListVerifyReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMListVerifyReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLastUpdatetime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasLastUpdatetime) {
    [output writeUInt32:2 value:self.lastUpdatetime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasLastUpdatetime) {
    size_ += computeUInt32Size(2, self.lastUpdatetime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMListVerifyReq*) parseFromData:(NSData*) data {
  return (IMListVerifyReq*)[[[IMListVerifyReq builder] mergeFromData:data] build];
}
+ (IMListVerifyReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMListVerifyReq*)[[[IMListVerifyReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMListVerifyReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMListVerifyReq*)[[[IMListVerifyReq builder] mergeFromInputStream:input] build];
}
+ (IMListVerifyReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMListVerifyReq*)[[[IMListVerifyReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMListVerifyReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMListVerifyReq*)[[[IMListVerifyReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMListVerifyReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMListVerifyReq*)[[[IMListVerifyReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMListVerifyReqBuilder*) builder {
  return [[IMListVerifyReqBuilder alloc] init];
}
+ (IMListVerifyReqBuilder*) builderWithPrototype:(IMListVerifyReq*) prototype {
  return [[IMListVerifyReq builder] mergeFrom:prototype];
}
- (IMListVerifyReqBuilder*) builder {
  return [IMListVerifyReq builder];
}
- (IMListVerifyReqBuilder*) toBuilder {
  return [IMListVerifyReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasLastUpdatetime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastUpdatetime", [NSNumber numberWithInteger:self.lastUpdatetime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasLastUpdatetime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.lastUpdatetime] forKey: @"lastUpdatetime"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMListVerifyReq class]]) {
    return NO;
  }
  IMListVerifyReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasLastUpdatetime == otherMessage.hasLastUpdatetime &&
      (!self.hasLastUpdatetime || self.lastUpdatetime == otherMessage.lastUpdatetime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasLastUpdatetime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lastUpdatetime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMListVerifyReqBuilder()
@property (strong) IMListVerifyReq* resultImlistVerifyReq;
@end

@implementation IMListVerifyReqBuilder
@synthesize resultImlistVerifyReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImlistVerifyReq = [[IMListVerifyReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImlistVerifyReq;
}
- (IMListVerifyReqBuilder*) clear {
  self.resultImlistVerifyReq = [[IMListVerifyReq alloc] init];
  return self;
}
- (IMListVerifyReqBuilder*) clone {
  return [IMListVerifyReq builderWithPrototype:resultImlistVerifyReq];
}
- (IMListVerifyReq*) defaultInstance {
  return [IMListVerifyReq defaultInstance];
}
- (IMListVerifyReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMListVerifyReq*) buildPartial {
  IMListVerifyReq* returnMe = resultImlistVerifyReq;
  self.resultImlistVerifyReq = nil;
  return returnMe;
}
- (IMListVerifyReqBuilder*) mergeFrom:(IMListVerifyReq*) other {
  if (other == [IMListVerifyReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasLastUpdatetime) {
    [self setLastUpdatetime:other.lastUpdatetime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMListVerifyReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMListVerifyReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setLastUpdatetime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImlistVerifyReq.hasUserId;
}
- (UInt64) userId {
  return resultImlistVerifyReq.userId;
}
- (IMListVerifyReqBuilder*) setUserId:(UInt64) value {
  resultImlistVerifyReq.hasUserId = YES;
  resultImlistVerifyReq.userId = value;
  return self;
}
- (IMListVerifyReqBuilder*) clearUserId {
  resultImlistVerifyReq.hasUserId = NO;
  resultImlistVerifyReq.userId = 0L;
  return self;
}
- (BOOL) hasLastUpdatetime {
  return resultImlistVerifyReq.hasLastUpdatetime;
}
- (UInt32) lastUpdatetime {
  return resultImlistVerifyReq.lastUpdatetime;
}
- (IMListVerifyReqBuilder*) setLastUpdatetime:(UInt32) value {
  resultImlistVerifyReq.hasLastUpdatetime = YES;
  resultImlistVerifyReq.lastUpdatetime = value;
  return self;
}
- (IMListVerifyReqBuilder*) clearLastUpdatetime {
  resultImlistVerifyReq.hasLastUpdatetime = NO;
  resultImlistVerifyReq.lastUpdatetime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImlistVerifyReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImlistVerifyReq.attachData;
}
- (IMListVerifyReqBuilder*) setAttachData:(NSData*) value {
  resultImlistVerifyReq.hasAttachData = YES;
  resultImlistVerifyReq.attachData = value;
  return self;
}
- (IMListVerifyReqBuilder*) clearAttachData {
  resultImlistVerifyReq.hasAttachData = NO;
  resultImlistVerifyReq.attachData = [NSData data];
  return self;
}
@end

@interface IMListVerifyRsp ()
@property UInt64 userId;
@property (strong) NSMutableArray * verifyinfoListArray;
@property UInt32 lastUpdatetime;
@property (strong) NSData* attachData;
@end

@implementation IMListVerifyRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize verifyinfoListArray;
@dynamic verifyinfoList;
- (BOOL) hasLastUpdatetime {
  return !!hasLastUpdatetime_;
}
- (void) setHasLastUpdatetime:(BOOL) _value_ {
  hasLastUpdatetime_ = !!_value_;
}
@synthesize lastUpdatetime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.lastUpdatetime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMListVerifyRsp* defaultIMListVerifyRspInstance = nil;
+ (void) initialize {
  if (self == [IMListVerifyRsp class]) {
    defaultIMListVerifyRspInstance = [[IMListVerifyRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMListVerifyRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMListVerifyRspInstance;
}
- (NSArray *)verifyinfoList {
  return verifyinfoListArray;
}
- (VerifyInfo*)verifyinfoListAtIndex:(NSUInteger)index {
  return [verifyinfoListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasLastUpdatetime) {
    return NO;
  }
  __block BOOL isInitverifyinfoList = YES;
   [self.verifyinfoList enumerateObjectsUsingBlock:^(VerifyInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitverifyinfoList = NO;
      *stop = YES;
    }
  }];
  if (!isInitverifyinfoList) return isInitverifyinfoList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  [self.verifyinfoListArray enumerateObjectsUsingBlock:^(VerifyInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasLastUpdatetime) {
    [output writeUInt32:3 value:self.lastUpdatetime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  [self.verifyinfoListArray enumerateObjectsUsingBlock:^(VerifyInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasLastUpdatetime) {
    size_ += computeUInt32Size(3, self.lastUpdatetime);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMListVerifyRsp*) parseFromData:(NSData*) data {
  return (IMListVerifyRsp*)[[[IMListVerifyRsp builder] mergeFromData:data] build];
}
+ (IMListVerifyRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMListVerifyRsp*)[[[IMListVerifyRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMListVerifyRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMListVerifyRsp*)[[[IMListVerifyRsp builder] mergeFromInputStream:input] build];
}
+ (IMListVerifyRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMListVerifyRsp*)[[[IMListVerifyRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMListVerifyRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMListVerifyRsp*)[[[IMListVerifyRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMListVerifyRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMListVerifyRsp*)[[[IMListVerifyRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMListVerifyRspBuilder*) builder {
  return [[IMListVerifyRspBuilder alloc] init];
}
+ (IMListVerifyRspBuilder*) builderWithPrototype:(IMListVerifyRsp*) prototype {
  return [[IMListVerifyRsp builder] mergeFrom:prototype];
}
- (IMListVerifyRspBuilder*) builder {
  return [IMListVerifyRsp builder];
}
- (IMListVerifyRspBuilder*) toBuilder {
  return [IMListVerifyRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  [self.verifyinfoListArray enumerateObjectsUsingBlock:^(VerifyInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"verifyinfoList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasLastUpdatetime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastUpdatetime", [NSNumber numberWithInteger:self.lastUpdatetime]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  for (VerifyInfo* element in self.verifyinfoListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"verifyinfoList"];
  }
  if (self.hasLastUpdatetime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.lastUpdatetime] forKey: @"lastUpdatetime"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMListVerifyRsp class]]) {
    return NO;
  }
  IMListVerifyRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.verifyinfoListArray isEqualToArray:otherMessage.verifyinfoListArray] &&
      self.hasLastUpdatetime == otherMessage.hasLastUpdatetime &&
      (!self.hasLastUpdatetime || self.lastUpdatetime == otherMessage.lastUpdatetime) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  [self.verifyinfoListArray enumerateObjectsUsingBlock:^(VerifyInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasLastUpdatetime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lastUpdatetime] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMListVerifyRspBuilder()
@property (strong) IMListVerifyRsp* resultImlistVerifyRsp;
@end

@implementation IMListVerifyRspBuilder
@synthesize resultImlistVerifyRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImlistVerifyRsp = [[IMListVerifyRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImlistVerifyRsp;
}
- (IMListVerifyRspBuilder*) clear {
  self.resultImlistVerifyRsp = [[IMListVerifyRsp alloc] init];
  return self;
}
- (IMListVerifyRspBuilder*) clone {
  return [IMListVerifyRsp builderWithPrototype:resultImlistVerifyRsp];
}
- (IMListVerifyRsp*) defaultInstance {
  return [IMListVerifyRsp defaultInstance];
}
- (IMListVerifyRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMListVerifyRsp*) buildPartial {
  IMListVerifyRsp* returnMe = resultImlistVerifyRsp;
  self.resultImlistVerifyRsp = nil;
  return returnMe;
}
- (IMListVerifyRspBuilder*) mergeFrom:(IMListVerifyRsp*) other {
  if (other == [IMListVerifyRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.verifyinfoListArray.count > 0) {
    if (resultImlistVerifyRsp.verifyinfoListArray == nil) {
      resultImlistVerifyRsp.verifyinfoListArray = [[NSMutableArray alloc] initWithArray:other.verifyinfoListArray];
    } else {
      [resultImlistVerifyRsp.verifyinfoListArray addObjectsFromArray:other.verifyinfoListArray];
    }
  }
  if (other.hasLastUpdatetime) {
    [self setLastUpdatetime:other.lastUpdatetime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMListVerifyRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMListVerifyRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        VerifyInfoBuilder* subBuilder = [VerifyInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addVerifyinfoList:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setLastUpdatetime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImlistVerifyRsp.hasUserId;
}
- (UInt64) userId {
  return resultImlistVerifyRsp.userId;
}
- (IMListVerifyRspBuilder*) setUserId:(UInt64) value {
  resultImlistVerifyRsp.hasUserId = YES;
  resultImlistVerifyRsp.userId = value;
  return self;
}
- (IMListVerifyRspBuilder*) clearUserId {
  resultImlistVerifyRsp.hasUserId = NO;
  resultImlistVerifyRsp.userId = 0L;
  return self;
}
- (NSMutableArray *)verifyinfoList {
  return resultImlistVerifyRsp.verifyinfoListArray;
}
- (VerifyInfo*)verifyinfoListAtIndex:(NSUInteger)index {
  return [resultImlistVerifyRsp verifyinfoListAtIndex:index];
}
- (IMListVerifyRspBuilder *)addVerifyinfoList:(VerifyInfo*)value {
  if (resultImlistVerifyRsp.verifyinfoListArray == nil) {
    resultImlistVerifyRsp.verifyinfoListArray = [[NSMutableArray alloc]init];
  }
  [resultImlistVerifyRsp.verifyinfoListArray addObject:value];
  return self;
}
- (IMListVerifyRspBuilder *)setVerifyinfoListArray:(NSArray *)array {
  resultImlistVerifyRsp.verifyinfoListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMListVerifyRspBuilder *)clearVerifyinfoList {
  resultImlistVerifyRsp.verifyinfoListArray = nil;
  return self;
}
- (BOOL) hasLastUpdatetime {
  return resultImlistVerifyRsp.hasLastUpdatetime;
}
- (UInt32) lastUpdatetime {
  return resultImlistVerifyRsp.lastUpdatetime;
}
- (IMListVerifyRspBuilder*) setLastUpdatetime:(UInt32) value {
  resultImlistVerifyRsp.hasLastUpdatetime = YES;
  resultImlistVerifyRsp.lastUpdatetime = value;
  return self;
}
- (IMListVerifyRspBuilder*) clearLastUpdatetime {
  resultImlistVerifyRsp.hasLastUpdatetime = NO;
  resultImlistVerifyRsp.lastUpdatetime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImlistVerifyRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImlistVerifyRsp.attachData;
}
- (IMListVerifyRspBuilder*) setAttachData:(NSData*) value {
  resultImlistVerifyRsp.hasAttachData = YES;
  resultImlistVerifyRsp.attachData = value;
  return self;
}
- (IMListVerifyRspBuilder*) clearAttachData {
  resultImlistVerifyRsp.hasAttachData = NO;
  resultImlistVerifyRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMModifyContactReq ()
@property UInt64 userId;
@property UInt64 targetid;
@property UInt32 targettype;
@property ContactModifyOpt opt;
@property (strong) NSData* attachData;
@end

@implementation IMModifyContactReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasTargetid {
  return !!hasTargetid_;
}
- (void) setHasTargetid:(BOOL) _value_ {
  hasTargetid_ = !!_value_;
}
@synthesize targetid;
- (BOOL) hasTargettype {
  return !!hasTargettype_;
}
- (void) setHasTargettype:(BOOL) _value_ {
  hasTargettype_ = !!_value_;
}
@synthesize targettype;
- (BOOL) hasOpt {
  return !!hasOpt_;
}
- (void) setHasOpt:(BOOL) _value_ {
  hasOpt_ = !!_value_;
}
@synthesize opt;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.targetid = 0L;
    self.targettype = 0;
    self.opt = ContactModifyOptAdd;
    self.attachData = [NSData data];
  }
  return self;
}
static IMModifyContactReq* defaultIMModifyContactReqInstance = nil;
+ (void) initialize {
  if (self == [IMModifyContactReq class]) {
    defaultIMModifyContactReqInstance = [[IMModifyContactReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMModifyContactReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMModifyContactReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasTargetid) {
    return NO;
  }
  if (!self.hasTargettype) {
    return NO;
  }
  if (!self.hasOpt) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasTargetid) {
    [output writeUInt64:2 value:self.targetid];
  }
  if (self.hasTargettype) {
    [output writeUInt32:3 value:self.targettype];
  }
  if (self.hasOpt) {
    [output writeEnum:4 value:self.opt];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasTargetid) {
    size_ += computeUInt64Size(2, self.targetid);
  }
  if (self.hasTargettype) {
    size_ += computeUInt32Size(3, self.targettype);
  }
  if (self.hasOpt) {
    size_ += computeEnumSize(4, self.opt);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMModifyContactReq*) parseFromData:(NSData*) data {
  return (IMModifyContactReq*)[[[IMModifyContactReq builder] mergeFromData:data] build];
}
+ (IMModifyContactReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyContactReq*)[[[IMModifyContactReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMModifyContactReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMModifyContactReq*)[[[IMModifyContactReq builder] mergeFromInputStream:input] build];
}
+ (IMModifyContactReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyContactReq*)[[[IMModifyContactReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMModifyContactReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMModifyContactReq*)[[[IMModifyContactReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMModifyContactReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyContactReq*)[[[IMModifyContactReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMModifyContactReqBuilder*) builder {
  return [[IMModifyContactReqBuilder alloc] init];
}
+ (IMModifyContactReqBuilder*) builderWithPrototype:(IMModifyContactReq*) prototype {
  return [[IMModifyContactReq builder] mergeFrom:prototype];
}
- (IMModifyContactReqBuilder*) builder {
  return [IMModifyContactReq builder];
}
- (IMModifyContactReqBuilder*) toBuilder {
  return [IMModifyContactReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasTargetid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetid", [NSNumber numberWithLongLong:self.targetid]];
  }
  if (self.hasTargettype) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targettype", [NSNumber numberWithInteger:self.targettype]];
  }
  if (self.hasOpt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opt", NSStringFromContactModifyOpt(self.opt)];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasTargetid) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.targetid] forKey: @"targetid"];
  }
  if (self.hasTargettype) {
    [dictionary setObject: [NSNumber numberWithInteger:self.targettype] forKey: @"targettype"];
  }
  if (self.hasOpt) {
    [dictionary setObject: @(self.opt) forKey: @"opt"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMModifyContactReq class]]) {
    return NO;
  }
  IMModifyContactReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasTargetid == otherMessage.hasTargetid &&
      (!self.hasTargetid || self.targetid == otherMessage.targetid) &&
      self.hasTargettype == otherMessage.hasTargettype &&
      (!self.hasTargettype || self.targettype == otherMessage.targettype) &&
      self.hasOpt == otherMessage.hasOpt &&
      (!self.hasOpt || self.opt == otherMessage.opt) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasTargetid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.targetid] hash];
  }
  if (self.hasTargettype) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.targettype] hash];
  }
  if (self.hasOpt) {
    hashCode = hashCode * 31 + self.opt;
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMModifyContactReqBuilder()
@property (strong) IMModifyContactReq* resultImmodifyContactReq;
@end

@implementation IMModifyContactReqBuilder
@synthesize resultImmodifyContactReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmodifyContactReq = [[IMModifyContactReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmodifyContactReq;
}
- (IMModifyContactReqBuilder*) clear {
  self.resultImmodifyContactReq = [[IMModifyContactReq alloc] init];
  return self;
}
- (IMModifyContactReqBuilder*) clone {
  return [IMModifyContactReq builderWithPrototype:resultImmodifyContactReq];
}
- (IMModifyContactReq*) defaultInstance {
  return [IMModifyContactReq defaultInstance];
}
- (IMModifyContactReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMModifyContactReq*) buildPartial {
  IMModifyContactReq* returnMe = resultImmodifyContactReq;
  self.resultImmodifyContactReq = nil;
  return returnMe;
}
- (IMModifyContactReqBuilder*) mergeFrom:(IMModifyContactReq*) other {
  if (other == [IMModifyContactReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasTargetid) {
    [self setTargetid:other.targetid];
  }
  if (other.hasTargettype) {
    [self setTargettype:other.targettype];
  }
  if (other.hasOpt) {
    [self setOpt:other.opt];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMModifyContactReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMModifyContactReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setTargetid:[input readUInt64]];
        break;
      }
      case 24: {
        [self setTargettype:[input readUInt32]];
        break;
      }
      case 32: {
        ContactModifyOpt value = (ContactModifyOpt)[input readEnum];
        if (ContactModifyOptIsValidValue(value)) {
          [self setOpt:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImmodifyContactReq.hasUserId;
}
- (UInt64) userId {
  return resultImmodifyContactReq.userId;
}
- (IMModifyContactReqBuilder*) setUserId:(UInt64) value {
  resultImmodifyContactReq.hasUserId = YES;
  resultImmodifyContactReq.userId = value;
  return self;
}
- (IMModifyContactReqBuilder*) clearUserId {
  resultImmodifyContactReq.hasUserId = NO;
  resultImmodifyContactReq.userId = 0L;
  return self;
}
- (BOOL) hasTargetid {
  return resultImmodifyContactReq.hasTargetid;
}
- (UInt64) targetid {
  return resultImmodifyContactReq.targetid;
}
- (IMModifyContactReqBuilder*) setTargetid:(UInt64) value {
  resultImmodifyContactReq.hasTargetid = YES;
  resultImmodifyContactReq.targetid = value;
  return self;
}
- (IMModifyContactReqBuilder*) clearTargetid {
  resultImmodifyContactReq.hasTargetid = NO;
  resultImmodifyContactReq.targetid = 0L;
  return self;
}
- (BOOL) hasTargettype {
  return resultImmodifyContactReq.hasTargettype;
}
- (UInt32) targettype {
  return resultImmodifyContactReq.targettype;
}
- (IMModifyContactReqBuilder*) setTargettype:(UInt32) value {
  resultImmodifyContactReq.hasTargettype = YES;
  resultImmodifyContactReq.targettype = value;
  return self;
}
- (IMModifyContactReqBuilder*) clearTargettype {
  resultImmodifyContactReq.hasTargettype = NO;
  resultImmodifyContactReq.targettype = 0;
  return self;
}
- (BOOL) hasOpt {
  return resultImmodifyContactReq.hasOpt;
}
- (ContactModifyOpt) opt {
  return resultImmodifyContactReq.opt;
}
- (IMModifyContactReqBuilder*) setOpt:(ContactModifyOpt) value {
  resultImmodifyContactReq.hasOpt = YES;
  resultImmodifyContactReq.opt = value;
  return self;
}
- (IMModifyContactReqBuilder*) clearOpt {
  resultImmodifyContactReq.hasOpt = NO;
  resultImmodifyContactReq.opt = ContactModifyOptAdd;
  return self;
}
- (BOOL) hasAttachData {
  return resultImmodifyContactReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImmodifyContactReq.attachData;
}
- (IMModifyContactReqBuilder*) setAttachData:(NSData*) value {
  resultImmodifyContactReq.hasAttachData = YES;
  resultImmodifyContactReq.attachData = value;
  return self;
}
- (IMModifyContactReqBuilder*) clearAttachData {
  resultImmodifyContactReq.hasAttachData = NO;
  resultImmodifyContactReq.attachData = [NSData data];
  return self;
}
@end

@interface IMModifyContactRsp ()
@property UInt64 userId;
@property UInt64 targetid;
@property UInt32 resultCode;
@property ContactModifyOpt opt;
@property UInt32 targettype;
@property (strong) NSData* attachData;
@end

@implementation IMModifyContactRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasTargetid {
  return !!hasTargetid_;
}
- (void) setHasTargetid:(BOOL) _value_ {
  hasTargetid_ = !!_value_;
}
@synthesize targetid;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasOpt {
  return !!hasOpt_;
}
- (void) setHasOpt:(BOOL) _value_ {
  hasOpt_ = !!_value_;
}
@synthesize opt;
- (BOOL) hasTargettype {
  return !!hasTargettype_;
}
- (void) setHasTargettype:(BOOL) _value_ {
  hasTargettype_ = !!_value_;
}
@synthesize targettype;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.targetid = 0L;
    self.resultCode = 0;
    self.opt = ContactModifyOptAdd;
    self.targettype = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMModifyContactRsp* defaultIMModifyContactRspInstance = nil;
+ (void) initialize {
  if (self == [IMModifyContactRsp class]) {
    defaultIMModifyContactRspInstance = [[IMModifyContactRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMModifyContactRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMModifyContactRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasTargetid) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  if (!self.hasOpt) {
    return NO;
  }
  if (!self.hasTargettype) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasTargetid) {
    [output writeUInt64:2 value:self.targetid];
  }
  if (self.hasResultCode) {
    [output writeUInt32:3 value:self.resultCode];
  }
  if (self.hasOpt) {
    [output writeEnum:4 value:self.opt];
  }
  if (self.hasTargettype) {
    [output writeUInt32:5 value:self.targettype];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasTargetid) {
    size_ += computeUInt64Size(2, self.targetid);
  }
  if (self.hasResultCode) {
    size_ += computeUInt32Size(3, self.resultCode);
  }
  if (self.hasOpt) {
    size_ += computeEnumSize(4, self.opt);
  }
  if (self.hasTargettype) {
    size_ += computeUInt32Size(5, self.targettype);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMModifyContactRsp*) parseFromData:(NSData*) data {
  return (IMModifyContactRsp*)[[[IMModifyContactRsp builder] mergeFromData:data] build];
}
+ (IMModifyContactRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyContactRsp*)[[[IMModifyContactRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMModifyContactRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMModifyContactRsp*)[[[IMModifyContactRsp builder] mergeFromInputStream:input] build];
}
+ (IMModifyContactRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyContactRsp*)[[[IMModifyContactRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMModifyContactRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMModifyContactRsp*)[[[IMModifyContactRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMModifyContactRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMModifyContactRsp*)[[[IMModifyContactRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMModifyContactRspBuilder*) builder {
  return [[IMModifyContactRspBuilder alloc] init];
}
+ (IMModifyContactRspBuilder*) builderWithPrototype:(IMModifyContactRsp*) prototype {
  return [[IMModifyContactRsp builder] mergeFrom:prototype];
}
- (IMModifyContactRspBuilder*) builder {
  return [IMModifyContactRsp builder];
}
- (IMModifyContactRspBuilder*) toBuilder {
  return [IMModifyContactRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasTargetid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targetid", [NSNumber numberWithLongLong:self.targetid]];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", [NSNumber numberWithInteger:self.resultCode]];
  }
  if (self.hasOpt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opt", NSStringFromContactModifyOpt(self.opt)];
  }
  if (self.hasTargettype) {
    [output appendFormat:@"%@%@: %@\n", indent, @"targettype", [NSNumber numberWithInteger:self.targettype]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasTargetid) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.targetid] forKey: @"targetid"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.resultCode] forKey: @"resultCode"];
  }
  if (self.hasOpt) {
    [dictionary setObject: @(self.opt) forKey: @"opt"];
  }
  if (self.hasTargettype) {
    [dictionary setObject: [NSNumber numberWithInteger:self.targettype] forKey: @"targettype"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMModifyContactRsp class]]) {
    return NO;
  }
  IMModifyContactRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasTargetid == otherMessage.hasTargetid &&
      (!self.hasTargetid || self.targetid == otherMessage.targetid) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasOpt == otherMessage.hasOpt &&
      (!self.hasOpt || self.opt == otherMessage.opt) &&
      self.hasTargettype == otherMessage.hasTargettype &&
      (!self.hasTargettype || self.targettype == otherMessage.targettype) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasTargetid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.targetid] hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.resultCode] hash];
  }
  if (self.hasOpt) {
    hashCode = hashCode * 31 + self.opt;
  }
  if (self.hasTargettype) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.targettype] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMModifyContactRspBuilder()
@property (strong) IMModifyContactRsp* resultImmodifyContactRsp;
@end

@implementation IMModifyContactRspBuilder
@synthesize resultImmodifyContactRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmodifyContactRsp = [[IMModifyContactRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmodifyContactRsp;
}
- (IMModifyContactRspBuilder*) clear {
  self.resultImmodifyContactRsp = [[IMModifyContactRsp alloc] init];
  return self;
}
- (IMModifyContactRspBuilder*) clone {
  return [IMModifyContactRsp builderWithPrototype:resultImmodifyContactRsp];
}
- (IMModifyContactRsp*) defaultInstance {
  return [IMModifyContactRsp defaultInstance];
}
- (IMModifyContactRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMModifyContactRsp*) buildPartial {
  IMModifyContactRsp* returnMe = resultImmodifyContactRsp;
  self.resultImmodifyContactRsp = nil;
  return returnMe;
}
- (IMModifyContactRspBuilder*) mergeFrom:(IMModifyContactRsp*) other {
  if (other == [IMModifyContactRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasTargetid) {
    [self setTargetid:other.targetid];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasOpt) {
    [self setOpt:other.opt];
  }
  if (other.hasTargettype) {
    [self setTargettype:other.targettype];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMModifyContactRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMModifyContactRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 16: {
        [self setTargetid:[input readUInt64]];
        break;
      }
      case 24: {
        [self setResultCode:[input readUInt32]];
        break;
      }
      case 32: {
        ContactModifyOpt value = (ContactModifyOpt)[input readEnum];
        if (ContactModifyOptIsValidValue(value)) {
          [self setOpt:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        [self setTargettype:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImmodifyContactRsp.hasUserId;
}
- (UInt64) userId {
  return resultImmodifyContactRsp.userId;
}
- (IMModifyContactRspBuilder*) setUserId:(UInt64) value {
  resultImmodifyContactRsp.hasUserId = YES;
  resultImmodifyContactRsp.userId = value;
  return self;
}
- (IMModifyContactRspBuilder*) clearUserId {
  resultImmodifyContactRsp.hasUserId = NO;
  resultImmodifyContactRsp.userId = 0L;
  return self;
}
- (BOOL) hasTargetid {
  return resultImmodifyContactRsp.hasTargetid;
}
- (UInt64) targetid {
  return resultImmodifyContactRsp.targetid;
}
- (IMModifyContactRspBuilder*) setTargetid:(UInt64) value {
  resultImmodifyContactRsp.hasTargetid = YES;
  resultImmodifyContactRsp.targetid = value;
  return self;
}
- (IMModifyContactRspBuilder*) clearTargetid {
  resultImmodifyContactRsp.hasTargetid = NO;
  resultImmodifyContactRsp.targetid = 0L;
  return self;
}
- (BOOL) hasResultCode {
  return resultImmodifyContactRsp.hasResultCode;
}
- (UInt32) resultCode {
  return resultImmodifyContactRsp.resultCode;
}
- (IMModifyContactRspBuilder*) setResultCode:(UInt32) value {
  resultImmodifyContactRsp.hasResultCode = YES;
  resultImmodifyContactRsp.resultCode = value;
  return self;
}
- (IMModifyContactRspBuilder*) clearResultCode {
  resultImmodifyContactRsp.hasResultCode = NO;
  resultImmodifyContactRsp.resultCode = 0;
  return self;
}
- (BOOL) hasOpt {
  return resultImmodifyContactRsp.hasOpt;
}
- (ContactModifyOpt) opt {
  return resultImmodifyContactRsp.opt;
}
- (IMModifyContactRspBuilder*) setOpt:(ContactModifyOpt) value {
  resultImmodifyContactRsp.hasOpt = YES;
  resultImmodifyContactRsp.opt = value;
  return self;
}
- (IMModifyContactRspBuilder*) clearOpt {
  resultImmodifyContactRsp.hasOpt = NO;
  resultImmodifyContactRsp.opt = ContactModifyOptAdd;
  return self;
}
- (BOOL) hasTargettype {
  return resultImmodifyContactRsp.hasTargettype;
}
- (UInt32) targettype {
  return resultImmodifyContactRsp.targettype;
}
- (IMModifyContactRspBuilder*) setTargettype:(UInt32) value {
  resultImmodifyContactRsp.hasTargettype = YES;
  resultImmodifyContactRsp.targettype = value;
  return self;
}
- (IMModifyContactRspBuilder*) clearTargettype {
  resultImmodifyContactRsp.hasTargettype = NO;
  resultImmodifyContactRsp.targettype = 0;
  return self;
}
- (BOOL) hasAttachData {
  return resultImmodifyContactRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImmodifyContactRsp.attachData;
}
- (IMModifyContactRspBuilder*) setAttachData:(NSData*) value {
  resultImmodifyContactRsp.hasAttachData = YES;
  resultImmodifyContactRsp.attachData = value;
  return self;
}
- (IMModifyContactRspBuilder*) clearAttachData {
  resultImmodifyContactRsp.hasAttachData = NO;
  resultImmodifyContactRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMSubscribeInfoReq ()
@property UInt64 userId;
@property (strong) NSString* sbUuid;
@property (strong) NSString* sbDifferno;
@property UInt64 sbId;
@property (strong) NSData* attachData;
@end

@implementation IMSubscribeInfoReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSbUuid {
  return !!hasSbUuid_;
}
- (void) setHasSbUuid:(BOOL) _value_ {
  hasSbUuid_ = !!_value_;
}
@synthesize sbUuid;
- (BOOL) hasSbDifferno {
  return !!hasSbDifferno_;
}
- (void) setHasSbDifferno:(BOOL) _value_ {
  hasSbDifferno_ = !!_value_;
}
@synthesize sbDifferno;
- (BOOL) hasSbId {
  return !!hasSbId_;
}
- (void) setHasSbId:(BOOL) _value_ {
  hasSbId_ = !!_value_;
}
@synthesize sbId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.sbUuid = @"";
    self.sbDifferno = @"";
    self.sbId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMSubscribeInfoReq* defaultIMSubscribeInfoReqInstance = nil;
+ (void) initialize {
  if (self == [IMSubscribeInfoReq class]) {
    defaultIMSubscribeInfoReqInstance = [[IMSubscribeInfoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSubscribeInfoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSubscribeInfoReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSbUuid) {
    return NO;
  }
  if (!self.hasSbDifferno) {
    return NO;
  }
  if (!self.hasSbId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasSbUuid) {
    [output writeString:2 value:self.sbUuid];
  }
  if (self.hasSbDifferno) {
    [output writeString:3 value:self.sbDifferno];
  }
  if (self.hasSbId) {
    [output writeUInt64:4 value:self.sbId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasSbUuid) {
    size_ += computeStringSize(2, self.sbUuid);
  }
  if (self.hasSbDifferno) {
    size_ += computeStringSize(3, self.sbDifferno);
  }
  if (self.hasSbId) {
    size_ += computeUInt64Size(4, self.sbId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSubscribeInfoReq*) parseFromData:(NSData*) data {
  return (IMSubscribeInfoReq*)[[[IMSubscribeInfoReq builder] mergeFromData:data] build];
}
+ (IMSubscribeInfoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeInfoReq*)[[[IMSubscribeInfoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeInfoReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMSubscribeInfoReq*)[[[IMSubscribeInfoReq builder] mergeFromInputStream:input] build];
}
+ (IMSubscribeInfoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeInfoReq*)[[[IMSubscribeInfoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSubscribeInfoReq*)[[[IMSubscribeInfoReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMSubscribeInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeInfoReq*)[[[IMSubscribeInfoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeInfoReqBuilder*) builder {
  return [[IMSubscribeInfoReqBuilder alloc] init];
}
+ (IMSubscribeInfoReqBuilder*) builderWithPrototype:(IMSubscribeInfoReq*) prototype {
  return [[IMSubscribeInfoReq builder] mergeFrom:prototype];
}
- (IMSubscribeInfoReqBuilder*) builder {
  return [IMSubscribeInfoReq builder];
}
- (IMSubscribeInfoReqBuilder*) toBuilder {
  return [IMSubscribeInfoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasSbUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sbUuid", self.sbUuid];
  }
  if (self.hasSbDifferno) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sbDifferno", self.sbDifferno];
  }
  if (self.hasSbId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sbId", [NSNumber numberWithLongLong:self.sbId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasSbUuid) {
    [dictionary setObject: self.sbUuid forKey: @"sbUuid"];
  }
  if (self.hasSbDifferno) {
    [dictionary setObject: self.sbDifferno forKey: @"sbDifferno"];
  }
  if (self.hasSbId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sbId] forKey: @"sbId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSubscribeInfoReq class]]) {
    return NO;
  }
  IMSubscribeInfoReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSbUuid == otherMessage.hasSbUuid &&
      (!self.hasSbUuid || [self.sbUuid isEqual:otherMessage.sbUuid]) &&
      self.hasSbDifferno == otherMessage.hasSbDifferno &&
      (!self.hasSbDifferno || [self.sbDifferno isEqual:otherMessage.sbDifferno]) &&
      self.hasSbId == otherMessage.hasSbId &&
      (!self.hasSbId || self.sbId == otherMessage.sbId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasSbUuid) {
    hashCode = hashCode * 31 + [self.sbUuid hash];
  }
  if (self.hasSbDifferno) {
    hashCode = hashCode * 31 + [self.sbDifferno hash];
  }
  if (self.hasSbId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sbId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSubscribeInfoReqBuilder()
@property (strong) IMSubscribeInfoReq* resultImsubscribeInfoReq;
@end

@implementation IMSubscribeInfoReqBuilder
@synthesize resultImsubscribeInfoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsubscribeInfoReq = [[IMSubscribeInfoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsubscribeInfoReq;
}
- (IMSubscribeInfoReqBuilder*) clear {
  self.resultImsubscribeInfoReq = [[IMSubscribeInfoReq alloc] init];
  return self;
}
- (IMSubscribeInfoReqBuilder*) clone {
  return [IMSubscribeInfoReq builderWithPrototype:resultImsubscribeInfoReq];
}
- (IMSubscribeInfoReq*) defaultInstance {
  return [IMSubscribeInfoReq defaultInstance];
}
- (IMSubscribeInfoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSubscribeInfoReq*) buildPartial {
  IMSubscribeInfoReq* returnMe = resultImsubscribeInfoReq;
  self.resultImsubscribeInfoReq = nil;
  return returnMe;
}
- (IMSubscribeInfoReqBuilder*) mergeFrom:(IMSubscribeInfoReq*) other {
  if (other == [IMSubscribeInfoReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSbUuid) {
    [self setSbUuid:other.sbUuid];
  }
  if (other.hasSbDifferno) {
    [self setSbDifferno:other.sbDifferno];
  }
  if (other.hasSbId) {
    [self setSbId:other.sbId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSubscribeInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSubscribeInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        [self setSbUuid:[input readString]];
        break;
      }
      case 26: {
        [self setSbDifferno:[input readString]];
        break;
      }
      case 32: {
        [self setSbId:[input readUInt64]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImsubscribeInfoReq.hasUserId;
}
- (UInt64) userId {
  return resultImsubscribeInfoReq.userId;
}
- (IMSubscribeInfoReqBuilder*) setUserId:(UInt64) value {
  resultImsubscribeInfoReq.hasUserId = YES;
  resultImsubscribeInfoReq.userId = value;
  return self;
}
- (IMSubscribeInfoReqBuilder*) clearUserId {
  resultImsubscribeInfoReq.hasUserId = NO;
  resultImsubscribeInfoReq.userId = 0L;
  return self;
}
- (BOOL) hasSbUuid {
  return resultImsubscribeInfoReq.hasSbUuid;
}
- (NSString*) sbUuid {
  return resultImsubscribeInfoReq.sbUuid;
}
- (IMSubscribeInfoReqBuilder*) setSbUuid:(NSString*) value {
  resultImsubscribeInfoReq.hasSbUuid = YES;
  resultImsubscribeInfoReq.sbUuid = value;
  return self;
}
- (IMSubscribeInfoReqBuilder*) clearSbUuid {
  resultImsubscribeInfoReq.hasSbUuid = NO;
  resultImsubscribeInfoReq.sbUuid = @"";
  return self;
}
- (BOOL) hasSbDifferno {
  return resultImsubscribeInfoReq.hasSbDifferno;
}
- (NSString*) sbDifferno {
  return resultImsubscribeInfoReq.sbDifferno;
}
- (IMSubscribeInfoReqBuilder*) setSbDifferno:(NSString*) value {
  resultImsubscribeInfoReq.hasSbDifferno = YES;
  resultImsubscribeInfoReq.sbDifferno = value;
  return self;
}
- (IMSubscribeInfoReqBuilder*) clearSbDifferno {
  resultImsubscribeInfoReq.hasSbDifferno = NO;
  resultImsubscribeInfoReq.sbDifferno = @"";
  return self;
}
- (BOOL) hasSbId {
  return resultImsubscribeInfoReq.hasSbId;
}
- (UInt64) sbId {
  return resultImsubscribeInfoReq.sbId;
}
- (IMSubscribeInfoReqBuilder*) setSbId:(UInt64) value {
  resultImsubscribeInfoReq.hasSbId = YES;
  resultImsubscribeInfoReq.sbId = value;
  return self;
}
- (IMSubscribeInfoReqBuilder*) clearSbId {
  resultImsubscribeInfoReq.hasSbId = NO;
  resultImsubscribeInfoReq.sbId = 0L;
  return self;
}
- (BOOL) hasAttachData {
  return resultImsubscribeInfoReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImsubscribeInfoReq.attachData;
}
- (IMSubscribeInfoReqBuilder*) setAttachData:(NSData*) value {
  resultImsubscribeInfoReq.hasAttachData = YES;
  resultImsubscribeInfoReq.attachData = value;
  return self;
}
- (IMSubscribeInfoReqBuilder*) clearAttachData {
  resultImsubscribeInfoReq.hasAttachData = NO;
  resultImsubscribeInfoReq.attachData = [NSData data];
  return self;
}
@end

@interface IMSubscribeInfoRsp ()
@property UInt64 userId;
@property (strong) NSString* sbUuid;
@property (strong) NSString* sbDifferno;
@property UInt64 sbId;
@property (strong) NSMutableArray * sbInfoArray;
@property (strong) NSData* attachData;
@end

@implementation IMSubscribeInfoRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSbUuid {
  return !!hasSbUuid_;
}
- (void) setHasSbUuid:(BOOL) _value_ {
  hasSbUuid_ = !!_value_;
}
@synthesize sbUuid;
- (BOOL) hasSbDifferno {
  return !!hasSbDifferno_;
}
- (void) setHasSbDifferno:(BOOL) _value_ {
  hasSbDifferno_ = !!_value_;
}
@synthesize sbDifferno;
- (BOOL) hasSbId {
  return !!hasSbId_;
}
- (void) setHasSbId:(BOOL) _value_ {
  hasSbId_ = !!_value_;
}
@synthesize sbId;
@synthesize sbInfoArray;
@dynamic sbInfo;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.sbUuid = @"";
    self.sbDifferno = @"";
    self.sbId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMSubscribeInfoRsp* defaultIMSubscribeInfoRspInstance = nil;
+ (void) initialize {
  if (self == [IMSubscribeInfoRsp class]) {
    defaultIMSubscribeInfoRspInstance = [[IMSubscribeInfoRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSubscribeInfoRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSubscribeInfoRspInstance;
}
- (NSArray *)sbInfo {
  return sbInfoArray;
}
- (SubscribeInfo*)sbInfoAtIndex:(NSUInteger)index {
  return [sbInfoArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSbUuid) {
    return NO;
  }
  if (!self.hasSbDifferno) {
    return NO;
  }
  if (!self.hasSbId) {
    return NO;
  }
  __block BOOL isInitsbInfo = YES;
   [self.sbInfo enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsbInfo = NO;
      *stop = YES;
    }
  }];
  if (!isInitsbInfo) return isInitsbInfo;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasSbUuid) {
    [output writeString:2 value:self.sbUuid];
  }
  if (self.hasSbDifferno) {
    [output writeString:3 value:self.sbDifferno];
  }
  if (self.hasSbId) {
    [output writeUInt64:4 value:self.sbId];
  }
  [self.sbInfoArray enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasSbUuid) {
    size_ += computeStringSize(2, self.sbUuid);
  }
  if (self.hasSbDifferno) {
    size_ += computeStringSize(3, self.sbDifferno);
  }
  if (self.hasSbId) {
    size_ += computeUInt64Size(4, self.sbId);
  }
  [self.sbInfoArray enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSubscribeInfoRsp*) parseFromData:(NSData*) data {
  return (IMSubscribeInfoRsp*)[[[IMSubscribeInfoRsp builder] mergeFromData:data] build];
}
+ (IMSubscribeInfoRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeInfoRsp*)[[[IMSubscribeInfoRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeInfoRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMSubscribeInfoRsp*)[[[IMSubscribeInfoRsp builder] mergeFromInputStream:input] build];
}
+ (IMSubscribeInfoRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeInfoRsp*)[[[IMSubscribeInfoRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSubscribeInfoRsp*)[[[IMSubscribeInfoRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMSubscribeInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeInfoRsp*)[[[IMSubscribeInfoRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeInfoRspBuilder*) builder {
  return [[IMSubscribeInfoRspBuilder alloc] init];
}
+ (IMSubscribeInfoRspBuilder*) builderWithPrototype:(IMSubscribeInfoRsp*) prototype {
  return [[IMSubscribeInfoRsp builder] mergeFrom:prototype];
}
- (IMSubscribeInfoRspBuilder*) builder {
  return [IMSubscribeInfoRsp builder];
}
- (IMSubscribeInfoRspBuilder*) toBuilder {
  return [IMSubscribeInfoRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasSbUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sbUuid", self.sbUuid];
  }
  if (self.hasSbDifferno) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sbDifferno", self.sbDifferno];
  }
  if (self.hasSbId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sbId", [NSNumber numberWithLongLong:self.sbId]];
  }
  [self.sbInfoArray enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sbInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasSbUuid) {
    [dictionary setObject: self.sbUuid forKey: @"sbUuid"];
  }
  if (self.hasSbDifferno) {
    [dictionary setObject: self.sbDifferno forKey: @"sbDifferno"];
  }
  if (self.hasSbId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sbId] forKey: @"sbId"];
  }
  for (SubscribeInfo* element in self.sbInfoArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"sbInfo"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSubscribeInfoRsp class]]) {
    return NO;
  }
  IMSubscribeInfoRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSbUuid == otherMessage.hasSbUuid &&
      (!self.hasSbUuid || [self.sbUuid isEqual:otherMessage.sbUuid]) &&
      self.hasSbDifferno == otherMessage.hasSbDifferno &&
      (!self.hasSbDifferno || [self.sbDifferno isEqual:otherMessage.sbDifferno]) &&
      self.hasSbId == otherMessage.hasSbId &&
      (!self.hasSbId || self.sbId == otherMessage.sbId) &&
      [self.sbInfoArray isEqualToArray:otherMessage.sbInfoArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasSbUuid) {
    hashCode = hashCode * 31 + [self.sbUuid hash];
  }
  if (self.hasSbDifferno) {
    hashCode = hashCode * 31 + [self.sbDifferno hash];
  }
  if (self.hasSbId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sbId] hash];
  }
  [self.sbInfoArray enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSubscribeInfoRspBuilder()
@property (strong) IMSubscribeInfoRsp* resultImsubscribeInfoRsp;
@end

@implementation IMSubscribeInfoRspBuilder
@synthesize resultImsubscribeInfoRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsubscribeInfoRsp = [[IMSubscribeInfoRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsubscribeInfoRsp;
}
- (IMSubscribeInfoRspBuilder*) clear {
  self.resultImsubscribeInfoRsp = [[IMSubscribeInfoRsp alloc] init];
  return self;
}
- (IMSubscribeInfoRspBuilder*) clone {
  return [IMSubscribeInfoRsp builderWithPrototype:resultImsubscribeInfoRsp];
}
- (IMSubscribeInfoRsp*) defaultInstance {
  return [IMSubscribeInfoRsp defaultInstance];
}
- (IMSubscribeInfoRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSubscribeInfoRsp*) buildPartial {
  IMSubscribeInfoRsp* returnMe = resultImsubscribeInfoRsp;
  self.resultImsubscribeInfoRsp = nil;
  return returnMe;
}
- (IMSubscribeInfoRspBuilder*) mergeFrom:(IMSubscribeInfoRsp*) other {
  if (other == [IMSubscribeInfoRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSbUuid) {
    [self setSbUuid:other.sbUuid];
  }
  if (other.hasSbDifferno) {
    [self setSbDifferno:other.sbDifferno];
  }
  if (other.hasSbId) {
    [self setSbId:other.sbId];
  }
  if (other.sbInfoArray.count > 0) {
    if (resultImsubscribeInfoRsp.sbInfoArray == nil) {
      resultImsubscribeInfoRsp.sbInfoArray = [[NSMutableArray alloc] initWithArray:other.sbInfoArray];
    } else {
      [resultImsubscribeInfoRsp.sbInfoArray addObjectsFromArray:other.sbInfoArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSubscribeInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSubscribeInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        [self setSbUuid:[input readString]];
        break;
      }
      case 26: {
        [self setSbDifferno:[input readString]];
        break;
      }
      case 32: {
        [self setSbId:[input readUInt64]];
        break;
      }
      case 42: {
        SubscribeInfoBuilder* subBuilder = [SubscribeInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSbInfo:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImsubscribeInfoRsp.hasUserId;
}
- (UInt64) userId {
  return resultImsubscribeInfoRsp.userId;
}
- (IMSubscribeInfoRspBuilder*) setUserId:(UInt64) value {
  resultImsubscribeInfoRsp.hasUserId = YES;
  resultImsubscribeInfoRsp.userId = value;
  return self;
}
- (IMSubscribeInfoRspBuilder*) clearUserId {
  resultImsubscribeInfoRsp.hasUserId = NO;
  resultImsubscribeInfoRsp.userId = 0L;
  return self;
}
- (BOOL) hasSbUuid {
  return resultImsubscribeInfoRsp.hasSbUuid;
}
- (NSString*) sbUuid {
  return resultImsubscribeInfoRsp.sbUuid;
}
- (IMSubscribeInfoRspBuilder*) setSbUuid:(NSString*) value {
  resultImsubscribeInfoRsp.hasSbUuid = YES;
  resultImsubscribeInfoRsp.sbUuid = value;
  return self;
}
- (IMSubscribeInfoRspBuilder*) clearSbUuid {
  resultImsubscribeInfoRsp.hasSbUuid = NO;
  resultImsubscribeInfoRsp.sbUuid = @"";
  return self;
}
- (BOOL) hasSbDifferno {
  return resultImsubscribeInfoRsp.hasSbDifferno;
}
- (NSString*) sbDifferno {
  return resultImsubscribeInfoRsp.sbDifferno;
}
- (IMSubscribeInfoRspBuilder*) setSbDifferno:(NSString*) value {
  resultImsubscribeInfoRsp.hasSbDifferno = YES;
  resultImsubscribeInfoRsp.sbDifferno = value;
  return self;
}
- (IMSubscribeInfoRspBuilder*) clearSbDifferno {
  resultImsubscribeInfoRsp.hasSbDifferno = NO;
  resultImsubscribeInfoRsp.sbDifferno = @"";
  return self;
}
- (BOOL) hasSbId {
  return resultImsubscribeInfoRsp.hasSbId;
}
- (UInt64) sbId {
  return resultImsubscribeInfoRsp.sbId;
}
- (IMSubscribeInfoRspBuilder*) setSbId:(UInt64) value {
  resultImsubscribeInfoRsp.hasSbId = YES;
  resultImsubscribeInfoRsp.sbId = value;
  return self;
}
- (IMSubscribeInfoRspBuilder*) clearSbId {
  resultImsubscribeInfoRsp.hasSbId = NO;
  resultImsubscribeInfoRsp.sbId = 0L;
  return self;
}
- (NSMutableArray *)sbInfo {
  return resultImsubscribeInfoRsp.sbInfoArray;
}
- (SubscribeInfo*)sbInfoAtIndex:(NSUInteger)index {
  return [resultImsubscribeInfoRsp sbInfoAtIndex:index];
}
- (IMSubscribeInfoRspBuilder *)addSbInfo:(SubscribeInfo*)value {
  if (resultImsubscribeInfoRsp.sbInfoArray == nil) {
    resultImsubscribeInfoRsp.sbInfoArray = [[NSMutableArray alloc]init];
  }
  [resultImsubscribeInfoRsp.sbInfoArray addObject:value];
  return self;
}
- (IMSubscribeInfoRspBuilder *)setSbInfoArray:(NSArray *)array {
  resultImsubscribeInfoRsp.sbInfoArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMSubscribeInfoRspBuilder *)clearSbInfo {
  resultImsubscribeInfoRsp.sbInfoArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImsubscribeInfoRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImsubscribeInfoRsp.attachData;
}
- (IMSubscribeInfoRspBuilder*) setAttachData:(NSData*) value {
  resultImsubscribeInfoRsp.hasAttachData = YES;
  resultImsubscribeInfoRsp.attachData = value;
  return self;
}
- (IMSubscribeInfoRspBuilder*) clearAttachData {
  resultImsubscribeInfoRsp.hasAttachData = NO;
  resultImsubscribeInfoRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMSubscribeAttentionReq ()
@property UInt64 userId;
@property (strong) NSString* sbUuid;
@property SubscribeOpt opt;
@property (strong) NSData* attachData;
@end

@implementation IMSubscribeAttentionReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSbUuid {
  return !!hasSbUuid_;
}
- (void) setHasSbUuid:(BOOL) _value_ {
  hasSbUuid_ = !!_value_;
}
@synthesize sbUuid;
- (BOOL) hasOpt {
  return !!hasOpt_;
}
- (void) setHasOpt:(BOOL) _value_ {
  hasOpt_ = !!_value_;
}
@synthesize opt;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.sbUuid = @"";
    self.opt = SubscribeOptSubscribe;
    self.attachData = [NSData data];
  }
  return self;
}
static IMSubscribeAttentionReq* defaultIMSubscribeAttentionReqInstance = nil;
+ (void) initialize {
  if (self == [IMSubscribeAttentionReq class]) {
    defaultIMSubscribeAttentionReqInstance = [[IMSubscribeAttentionReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSubscribeAttentionReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSubscribeAttentionReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSbUuid) {
    return NO;
  }
  if (!self.hasOpt) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasSbUuid) {
    [output writeString:2 value:self.sbUuid];
  }
  if (self.hasOpt) {
    [output writeEnum:3 value:self.opt];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasSbUuid) {
    size_ += computeStringSize(2, self.sbUuid);
  }
  if (self.hasOpt) {
    size_ += computeEnumSize(3, self.opt);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSubscribeAttentionReq*) parseFromData:(NSData*) data {
  return (IMSubscribeAttentionReq*)[[[IMSubscribeAttentionReq builder] mergeFromData:data] build];
}
+ (IMSubscribeAttentionReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeAttentionReq*)[[[IMSubscribeAttentionReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeAttentionReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMSubscribeAttentionReq*)[[[IMSubscribeAttentionReq builder] mergeFromInputStream:input] build];
}
+ (IMSubscribeAttentionReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeAttentionReq*)[[[IMSubscribeAttentionReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeAttentionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSubscribeAttentionReq*)[[[IMSubscribeAttentionReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMSubscribeAttentionReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeAttentionReq*)[[[IMSubscribeAttentionReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeAttentionReqBuilder*) builder {
  return [[IMSubscribeAttentionReqBuilder alloc] init];
}
+ (IMSubscribeAttentionReqBuilder*) builderWithPrototype:(IMSubscribeAttentionReq*) prototype {
  return [[IMSubscribeAttentionReq builder] mergeFrom:prototype];
}
- (IMSubscribeAttentionReqBuilder*) builder {
  return [IMSubscribeAttentionReq builder];
}
- (IMSubscribeAttentionReqBuilder*) toBuilder {
  return [IMSubscribeAttentionReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasSbUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sbUuid", self.sbUuid];
  }
  if (self.hasOpt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opt", NSStringFromSubscribeOpt(self.opt)];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasSbUuid) {
    [dictionary setObject: self.sbUuid forKey: @"sbUuid"];
  }
  if (self.hasOpt) {
    [dictionary setObject: @(self.opt) forKey: @"opt"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSubscribeAttentionReq class]]) {
    return NO;
  }
  IMSubscribeAttentionReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSbUuid == otherMessage.hasSbUuid &&
      (!self.hasSbUuid || [self.sbUuid isEqual:otherMessage.sbUuid]) &&
      self.hasOpt == otherMessage.hasOpt &&
      (!self.hasOpt || self.opt == otherMessage.opt) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasSbUuid) {
    hashCode = hashCode * 31 + [self.sbUuid hash];
  }
  if (self.hasOpt) {
    hashCode = hashCode * 31 + self.opt;
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSubscribeAttentionReqBuilder()
@property (strong) IMSubscribeAttentionReq* resultImsubscribeAttentionReq;
@end

@implementation IMSubscribeAttentionReqBuilder
@synthesize resultImsubscribeAttentionReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsubscribeAttentionReq = [[IMSubscribeAttentionReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsubscribeAttentionReq;
}
- (IMSubscribeAttentionReqBuilder*) clear {
  self.resultImsubscribeAttentionReq = [[IMSubscribeAttentionReq alloc] init];
  return self;
}
- (IMSubscribeAttentionReqBuilder*) clone {
  return [IMSubscribeAttentionReq builderWithPrototype:resultImsubscribeAttentionReq];
}
- (IMSubscribeAttentionReq*) defaultInstance {
  return [IMSubscribeAttentionReq defaultInstance];
}
- (IMSubscribeAttentionReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSubscribeAttentionReq*) buildPartial {
  IMSubscribeAttentionReq* returnMe = resultImsubscribeAttentionReq;
  self.resultImsubscribeAttentionReq = nil;
  return returnMe;
}
- (IMSubscribeAttentionReqBuilder*) mergeFrom:(IMSubscribeAttentionReq*) other {
  if (other == [IMSubscribeAttentionReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSbUuid) {
    [self setSbUuid:other.sbUuid];
  }
  if (other.hasOpt) {
    [self setOpt:other.opt];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSubscribeAttentionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSubscribeAttentionReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        [self setSbUuid:[input readString]];
        break;
      }
      case 24: {
        SubscribeOpt value = (SubscribeOpt)[input readEnum];
        if (SubscribeOptIsValidValue(value)) {
          [self setOpt:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImsubscribeAttentionReq.hasUserId;
}
- (UInt64) userId {
  return resultImsubscribeAttentionReq.userId;
}
- (IMSubscribeAttentionReqBuilder*) setUserId:(UInt64) value {
  resultImsubscribeAttentionReq.hasUserId = YES;
  resultImsubscribeAttentionReq.userId = value;
  return self;
}
- (IMSubscribeAttentionReqBuilder*) clearUserId {
  resultImsubscribeAttentionReq.hasUserId = NO;
  resultImsubscribeAttentionReq.userId = 0L;
  return self;
}
- (BOOL) hasSbUuid {
  return resultImsubscribeAttentionReq.hasSbUuid;
}
- (NSString*) sbUuid {
  return resultImsubscribeAttentionReq.sbUuid;
}
- (IMSubscribeAttentionReqBuilder*) setSbUuid:(NSString*) value {
  resultImsubscribeAttentionReq.hasSbUuid = YES;
  resultImsubscribeAttentionReq.sbUuid = value;
  return self;
}
- (IMSubscribeAttentionReqBuilder*) clearSbUuid {
  resultImsubscribeAttentionReq.hasSbUuid = NO;
  resultImsubscribeAttentionReq.sbUuid = @"";
  return self;
}
- (BOOL) hasOpt {
  return resultImsubscribeAttentionReq.hasOpt;
}
- (SubscribeOpt) opt {
  return resultImsubscribeAttentionReq.opt;
}
- (IMSubscribeAttentionReqBuilder*) setOpt:(SubscribeOpt) value {
  resultImsubscribeAttentionReq.hasOpt = YES;
  resultImsubscribeAttentionReq.opt = value;
  return self;
}
- (IMSubscribeAttentionReqBuilder*) clearOpt {
  resultImsubscribeAttentionReq.hasOpt = NO;
  resultImsubscribeAttentionReq.opt = SubscribeOptSubscribe;
  return self;
}
- (BOOL) hasAttachData {
  return resultImsubscribeAttentionReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImsubscribeAttentionReq.attachData;
}
- (IMSubscribeAttentionReqBuilder*) setAttachData:(NSData*) value {
  resultImsubscribeAttentionReq.hasAttachData = YES;
  resultImsubscribeAttentionReq.attachData = value;
  return self;
}
- (IMSubscribeAttentionReqBuilder*) clearAttachData {
  resultImsubscribeAttentionReq.hasAttachData = NO;
  resultImsubscribeAttentionReq.attachData = [NSData data];
  return self;
}
@end

@interface IMSubscribeAttentionRsp ()
@property UInt64 userId;
@property (strong) NSString* sbUuid;
@property SubscribeOpt opt;
@property SubscribeRetCode resultCode;
@property (strong) NSData* attachData;
@end

@implementation IMSubscribeAttentionRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSbUuid {
  return !!hasSbUuid_;
}
- (void) setHasSbUuid:(BOOL) _value_ {
  hasSbUuid_ = !!_value_;
}
@synthesize sbUuid;
- (BOOL) hasOpt {
  return !!hasOpt_;
}
- (void) setHasOpt:(BOOL) _value_ {
  hasOpt_ = !!_value_;
}
@synthesize opt;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.sbUuid = @"";
    self.opt = SubscribeOptSubscribe;
    self.resultCode = SubscribeRetCodeSubscribeRetOk;
    self.attachData = [NSData data];
  }
  return self;
}
static IMSubscribeAttentionRsp* defaultIMSubscribeAttentionRspInstance = nil;
+ (void) initialize {
  if (self == [IMSubscribeAttentionRsp class]) {
    defaultIMSubscribeAttentionRspInstance = [[IMSubscribeAttentionRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSubscribeAttentionRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSubscribeAttentionRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSbUuid) {
    return NO;
  }
  if (!self.hasOpt) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasSbUuid) {
    [output writeString:2 value:self.sbUuid];
  }
  if (self.hasOpt) {
    [output writeEnum:4 value:self.opt];
  }
  if (self.hasResultCode) {
    [output writeEnum:5 value:self.resultCode];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasSbUuid) {
    size_ += computeStringSize(2, self.sbUuid);
  }
  if (self.hasOpt) {
    size_ += computeEnumSize(4, self.opt);
  }
  if (self.hasResultCode) {
    size_ += computeEnumSize(5, self.resultCode);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSubscribeAttentionRsp*) parseFromData:(NSData*) data {
  return (IMSubscribeAttentionRsp*)[[[IMSubscribeAttentionRsp builder] mergeFromData:data] build];
}
+ (IMSubscribeAttentionRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeAttentionRsp*)[[[IMSubscribeAttentionRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeAttentionRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMSubscribeAttentionRsp*)[[[IMSubscribeAttentionRsp builder] mergeFromInputStream:input] build];
}
+ (IMSubscribeAttentionRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeAttentionRsp*)[[[IMSubscribeAttentionRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeAttentionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSubscribeAttentionRsp*)[[[IMSubscribeAttentionRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMSubscribeAttentionRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeAttentionRsp*)[[[IMSubscribeAttentionRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeAttentionRspBuilder*) builder {
  return [[IMSubscribeAttentionRspBuilder alloc] init];
}
+ (IMSubscribeAttentionRspBuilder*) builderWithPrototype:(IMSubscribeAttentionRsp*) prototype {
  return [[IMSubscribeAttentionRsp builder] mergeFrom:prototype];
}
- (IMSubscribeAttentionRspBuilder*) builder {
  return [IMSubscribeAttentionRsp builder];
}
- (IMSubscribeAttentionRspBuilder*) toBuilder {
  return [IMSubscribeAttentionRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasSbUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sbUuid", self.sbUuid];
  }
  if (self.hasOpt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"opt", NSStringFromSubscribeOpt(self.opt)];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", NSStringFromSubscribeRetCode(self.resultCode)];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasSbUuid) {
    [dictionary setObject: self.sbUuid forKey: @"sbUuid"];
  }
  if (self.hasOpt) {
    [dictionary setObject: @(self.opt) forKey: @"opt"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: @(self.resultCode) forKey: @"resultCode"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSubscribeAttentionRsp class]]) {
    return NO;
  }
  IMSubscribeAttentionRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSbUuid == otherMessage.hasSbUuid &&
      (!self.hasSbUuid || [self.sbUuid isEqual:otherMessage.sbUuid]) &&
      self.hasOpt == otherMessage.hasOpt &&
      (!self.hasOpt || self.opt == otherMessage.opt) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasSbUuid) {
    hashCode = hashCode * 31 + [self.sbUuid hash];
  }
  if (self.hasOpt) {
    hashCode = hashCode * 31 + self.opt;
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + self.resultCode;
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSubscribeAttentionRspBuilder()
@property (strong) IMSubscribeAttentionRsp* resultImsubscribeAttentionRsp;
@end

@implementation IMSubscribeAttentionRspBuilder
@synthesize resultImsubscribeAttentionRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsubscribeAttentionRsp = [[IMSubscribeAttentionRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsubscribeAttentionRsp;
}
- (IMSubscribeAttentionRspBuilder*) clear {
  self.resultImsubscribeAttentionRsp = [[IMSubscribeAttentionRsp alloc] init];
  return self;
}
- (IMSubscribeAttentionRspBuilder*) clone {
  return [IMSubscribeAttentionRsp builderWithPrototype:resultImsubscribeAttentionRsp];
}
- (IMSubscribeAttentionRsp*) defaultInstance {
  return [IMSubscribeAttentionRsp defaultInstance];
}
- (IMSubscribeAttentionRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSubscribeAttentionRsp*) buildPartial {
  IMSubscribeAttentionRsp* returnMe = resultImsubscribeAttentionRsp;
  self.resultImsubscribeAttentionRsp = nil;
  return returnMe;
}
- (IMSubscribeAttentionRspBuilder*) mergeFrom:(IMSubscribeAttentionRsp*) other {
  if (other == [IMSubscribeAttentionRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSbUuid) {
    [self setSbUuid:other.sbUuid];
  }
  if (other.hasOpt) {
    [self setOpt:other.opt];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSubscribeAttentionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSubscribeAttentionRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        [self setSbUuid:[input readString]];
        break;
      }
      case 32: {
        SubscribeOpt value = (SubscribeOpt)[input readEnum];
        if (SubscribeOptIsValidValue(value)) {
          [self setOpt:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        SubscribeRetCode value = (SubscribeRetCode)[input readEnum];
        if (SubscribeRetCodeIsValidValue(value)) {
          [self setResultCode:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImsubscribeAttentionRsp.hasUserId;
}
- (UInt64) userId {
  return resultImsubscribeAttentionRsp.userId;
}
- (IMSubscribeAttentionRspBuilder*) setUserId:(UInt64) value {
  resultImsubscribeAttentionRsp.hasUserId = YES;
  resultImsubscribeAttentionRsp.userId = value;
  return self;
}
- (IMSubscribeAttentionRspBuilder*) clearUserId {
  resultImsubscribeAttentionRsp.hasUserId = NO;
  resultImsubscribeAttentionRsp.userId = 0L;
  return self;
}
- (BOOL) hasSbUuid {
  return resultImsubscribeAttentionRsp.hasSbUuid;
}
- (NSString*) sbUuid {
  return resultImsubscribeAttentionRsp.sbUuid;
}
- (IMSubscribeAttentionRspBuilder*) setSbUuid:(NSString*) value {
  resultImsubscribeAttentionRsp.hasSbUuid = YES;
  resultImsubscribeAttentionRsp.sbUuid = value;
  return self;
}
- (IMSubscribeAttentionRspBuilder*) clearSbUuid {
  resultImsubscribeAttentionRsp.hasSbUuid = NO;
  resultImsubscribeAttentionRsp.sbUuid = @"";
  return self;
}
- (BOOL) hasOpt {
  return resultImsubscribeAttentionRsp.hasOpt;
}
- (SubscribeOpt) opt {
  return resultImsubscribeAttentionRsp.opt;
}
- (IMSubscribeAttentionRspBuilder*) setOpt:(SubscribeOpt) value {
  resultImsubscribeAttentionRsp.hasOpt = YES;
  resultImsubscribeAttentionRsp.opt = value;
  return self;
}
- (IMSubscribeAttentionRspBuilder*) clearOpt {
  resultImsubscribeAttentionRsp.hasOpt = NO;
  resultImsubscribeAttentionRsp.opt = SubscribeOptSubscribe;
  return self;
}
- (BOOL) hasResultCode {
  return resultImsubscribeAttentionRsp.hasResultCode;
}
- (SubscribeRetCode) resultCode {
  return resultImsubscribeAttentionRsp.resultCode;
}
- (IMSubscribeAttentionRspBuilder*) setResultCode:(SubscribeRetCode) value {
  resultImsubscribeAttentionRsp.hasResultCode = YES;
  resultImsubscribeAttentionRsp.resultCode = value;
  return self;
}
- (IMSubscribeAttentionRspBuilder*) clearResultCode {
  resultImsubscribeAttentionRsp.hasResultCode = NO;
  resultImsubscribeAttentionRsp.resultCode = SubscribeRetCodeSubscribeRetOk;
  return self;
}
- (BOOL) hasAttachData {
  return resultImsubscribeAttentionRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImsubscribeAttentionRsp.attachData;
}
- (IMSubscribeAttentionRspBuilder*) setAttachData:(NSData*) value {
  resultImsubscribeAttentionRsp.hasAttachData = YES;
  resultImsubscribeAttentionRsp.attachData = value;
  return self;
}
- (IMSubscribeAttentionRspBuilder*) clearAttachData {
  resultImsubscribeAttentionRsp.hasAttachData = NO;
  resultImsubscribeAttentionRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMListSubscribeInfoReq ()
@property UInt64 userId;
@property (strong) NSData* attachData;
@end

@implementation IMListSubscribeInfoReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMListSubscribeInfoReq* defaultIMListSubscribeInfoReqInstance = nil;
+ (void) initialize {
  if (self == [IMListSubscribeInfoReq class]) {
    defaultIMListSubscribeInfoReqInstance = [[IMListSubscribeInfoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMListSubscribeInfoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMListSubscribeInfoReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMListSubscribeInfoReq*) parseFromData:(NSData*) data {
  return (IMListSubscribeInfoReq*)[[[IMListSubscribeInfoReq builder] mergeFromData:data] build];
}
+ (IMListSubscribeInfoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMListSubscribeInfoReq*)[[[IMListSubscribeInfoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMListSubscribeInfoReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMListSubscribeInfoReq*)[[[IMListSubscribeInfoReq builder] mergeFromInputStream:input] build];
}
+ (IMListSubscribeInfoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMListSubscribeInfoReq*)[[[IMListSubscribeInfoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMListSubscribeInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMListSubscribeInfoReq*)[[[IMListSubscribeInfoReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMListSubscribeInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMListSubscribeInfoReq*)[[[IMListSubscribeInfoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMListSubscribeInfoReqBuilder*) builder {
  return [[IMListSubscribeInfoReqBuilder alloc] init];
}
+ (IMListSubscribeInfoReqBuilder*) builderWithPrototype:(IMListSubscribeInfoReq*) prototype {
  return [[IMListSubscribeInfoReq builder] mergeFrom:prototype];
}
- (IMListSubscribeInfoReqBuilder*) builder {
  return [IMListSubscribeInfoReq builder];
}
- (IMListSubscribeInfoReqBuilder*) toBuilder {
  return [IMListSubscribeInfoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMListSubscribeInfoReq class]]) {
    return NO;
  }
  IMListSubscribeInfoReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMListSubscribeInfoReqBuilder()
@property (strong) IMListSubscribeInfoReq* resultImlistSubscribeInfoReq;
@end

@implementation IMListSubscribeInfoReqBuilder
@synthesize resultImlistSubscribeInfoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImlistSubscribeInfoReq = [[IMListSubscribeInfoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImlistSubscribeInfoReq;
}
- (IMListSubscribeInfoReqBuilder*) clear {
  self.resultImlistSubscribeInfoReq = [[IMListSubscribeInfoReq alloc] init];
  return self;
}
- (IMListSubscribeInfoReqBuilder*) clone {
  return [IMListSubscribeInfoReq builderWithPrototype:resultImlistSubscribeInfoReq];
}
- (IMListSubscribeInfoReq*) defaultInstance {
  return [IMListSubscribeInfoReq defaultInstance];
}
- (IMListSubscribeInfoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMListSubscribeInfoReq*) buildPartial {
  IMListSubscribeInfoReq* returnMe = resultImlistSubscribeInfoReq;
  self.resultImlistSubscribeInfoReq = nil;
  return returnMe;
}
- (IMListSubscribeInfoReqBuilder*) mergeFrom:(IMListSubscribeInfoReq*) other {
  if (other == [IMListSubscribeInfoReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMListSubscribeInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMListSubscribeInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImlistSubscribeInfoReq.hasUserId;
}
- (UInt64) userId {
  return resultImlistSubscribeInfoReq.userId;
}
- (IMListSubscribeInfoReqBuilder*) setUserId:(UInt64) value {
  resultImlistSubscribeInfoReq.hasUserId = YES;
  resultImlistSubscribeInfoReq.userId = value;
  return self;
}
- (IMListSubscribeInfoReqBuilder*) clearUserId {
  resultImlistSubscribeInfoReq.hasUserId = NO;
  resultImlistSubscribeInfoReq.userId = 0L;
  return self;
}
- (BOOL) hasAttachData {
  return resultImlistSubscribeInfoReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImlistSubscribeInfoReq.attachData;
}
- (IMListSubscribeInfoReqBuilder*) setAttachData:(NSData*) value {
  resultImlistSubscribeInfoReq.hasAttachData = YES;
  resultImlistSubscribeInfoReq.attachData = value;
  return self;
}
- (IMListSubscribeInfoReqBuilder*) clearAttachData {
  resultImlistSubscribeInfoReq.hasAttachData = NO;
  resultImlistSubscribeInfoReq.attachData = [NSData data];
  return self;
}
@end

@interface IMListSubscribeInfoRsp ()
@property UInt64 userId;
@property (strong) NSMutableArray * lsSbsArray;
@property (strong) NSData* attachData;
@end

@implementation IMListSubscribeInfoRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize lsSbsArray;
@dynamic lsSbs;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMListSubscribeInfoRsp* defaultIMListSubscribeInfoRspInstance = nil;
+ (void) initialize {
  if (self == [IMListSubscribeInfoRsp class]) {
    defaultIMListSubscribeInfoRspInstance = [[IMListSubscribeInfoRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMListSubscribeInfoRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMListSubscribeInfoRspInstance;
}
- (NSArray *)lsSbs {
  return lsSbsArray;
}
- (SubscribeAttentionInfo*)lsSbsAtIndex:(NSUInteger)index {
  return [lsSbsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInitlsSbs = YES;
   [self.lsSbs enumerateObjectsUsingBlock:^(SubscribeAttentionInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitlsSbs = NO;
      *stop = YES;
    }
  }];
  if (!isInitlsSbs) return isInitlsSbs;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  [self.lsSbsArray enumerateObjectsUsingBlock:^(SubscribeAttentionInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  [self.lsSbsArray enumerateObjectsUsingBlock:^(SubscribeAttentionInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMListSubscribeInfoRsp*) parseFromData:(NSData*) data {
  return (IMListSubscribeInfoRsp*)[[[IMListSubscribeInfoRsp builder] mergeFromData:data] build];
}
+ (IMListSubscribeInfoRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMListSubscribeInfoRsp*)[[[IMListSubscribeInfoRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMListSubscribeInfoRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMListSubscribeInfoRsp*)[[[IMListSubscribeInfoRsp builder] mergeFromInputStream:input] build];
}
+ (IMListSubscribeInfoRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMListSubscribeInfoRsp*)[[[IMListSubscribeInfoRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMListSubscribeInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMListSubscribeInfoRsp*)[[[IMListSubscribeInfoRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMListSubscribeInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMListSubscribeInfoRsp*)[[[IMListSubscribeInfoRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMListSubscribeInfoRspBuilder*) builder {
  return [[IMListSubscribeInfoRspBuilder alloc] init];
}
+ (IMListSubscribeInfoRspBuilder*) builderWithPrototype:(IMListSubscribeInfoRsp*) prototype {
  return [[IMListSubscribeInfoRsp builder] mergeFrom:prototype];
}
- (IMListSubscribeInfoRspBuilder*) builder {
  return [IMListSubscribeInfoRsp builder];
}
- (IMListSubscribeInfoRspBuilder*) toBuilder {
  return [IMListSubscribeInfoRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  [self.lsSbsArray enumerateObjectsUsingBlock:^(SubscribeAttentionInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"lsSbs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  for (SubscribeAttentionInfo* element in self.lsSbsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"lsSbs"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMListSubscribeInfoRsp class]]) {
    return NO;
  }
  IMListSubscribeInfoRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.lsSbsArray isEqualToArray:otherMessage.lsSbsArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  [self.lsSbsArray enumerateObjectsUsingBlock:^(SubscribeAttentionInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMListSubscribeInfoRspBuilder()
@property (strong) IMListSubscribeInfoRsp* resultImlistSubscribeInfoRsp;
@end

@implementation IMListSubscribeInfoRspBuilder
@synthesize resultImlistSubscribeInfoRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImlistSubscribeInfoRsp = [[IMListSubscribeInfoRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImlistSubscribeInfoRsp;
}
- (IMListSubscribeInfoRspBuilder*) clear {
  self.resultImlistSubscribeInfoRsp = [[IMListSubscribeInfoRsp alloc] init];
  return self;
}
- (IMListSubscribeInfoRspBuilder*) clone {
  return [IMListSubscribeInfoRsp builderWithPrototype:resultImlistSubscribeInfoRsp];
}
- (IMListSubscribeInfoRsp*) defaultInstance {
  return [IMListSubscribeInfoRsp defaultInstance];
}
- (IMListSubscribeInfoRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMListSubscribeInfoRsp*) buildPartial {
  IMListSubscribeInfoRsp* returnMe = resultImlistSubscribeInfoRsp;
  self.resultImlistSubscribeInfoRsp = nil;
  return returnMe;
}
- (IMListSubscribeInfoRspBuilder*) mergeFrom:(IMListSubscribeInfoRsp*) other {
  if (other == [IMListSubscribeInfoRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.lsSbsArray.count > 0) {
    if (resultImlistSubscribeInfoRsp.lsSbsArray == nil) {
      resultImlistSubscribeInfoRsp.lsSbsArray = [[NSMutableArray alloc] initWithArray:other.lsSbsArray];
    } else {
      [resultImlistSubscribeInfoRsp.lsSbsArray addObjectsFromArray:other.lsSbsArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMListSubscribeInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMListSubscribeInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        SubscribeAttentionInfoBuilder* subBuilder = [SubscribeAttentionInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLsSbs:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImlistSubscribeInfoRsp.hasUserId;
}
- (UInt64) userId {
  return resultImlistSubscribeInfoRsp.userId;
}
- (IMListSubscribeInfoRspBuilder*) setUserId:(UInt64) value {
  resultImlistSubscribeInfoRsp.hasUserId = YES;
  resultImlistSubscribeInfoRsp.userId = value;
  return self;
}
- (IMListSubscribeInfoRspBuilder*) clearUserId {
  resultImlistSubscribeInfoRsp.hasUserId = NO;
  resultImlistSubscribeInfoRsp.userId = 0L;
  return self;
}
- (NSMutableArray *)lsSbs {
  return resultImlistSubscribeInfoRsp.lsSbsArray;
}
- (SubscribeAttentionInfo*)lsSbsAtIndex:(NSUInteger)index {
  return [resultImlistSubscribeInfoRsp lsSbsAtIndex:index];
}
- (IMListSubscribeInfoRspBuilder *)addLsSbs:(SubscribeAttentionInfo*)value {
  if (resultImlistSubscribeInfoRsp.lsSbsArray == nil) {
    resultImlistSubscribeInfoRsp.lsSbsArray = [[NSMutableArray alloc]init];
  }
  [resultImlistSubscribeInfoRsp.lsSbsArray addObject:value];
  return self;
}
- (IMListSubscribeInfoRspBuilder *)setLsSbsArray:(NSArray *)array {
  resultImlistSubscribeInfoRsp.lsSbsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMListSubscribeInfoRspBuilder *)clearLsSbs {
  resultImlistSubscribeInfoRsp.lsSbsArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImlistSubscribeInfoRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImlistSubscribeInfoRsp.attachData;
}
- (IMListSubscribeInfoRspBuilder*) setAttachData:(NSData*) value {
  resultImlistSubscribeInfoRsp.hasAttachData = YES;
  resultImlistSubscribeInfoRsp.attachData = value;
  return self;
}
- (IMListSubscribeInfoRspBuilder*) clearAttachData {
  resultImlistSubscribeInfoRsp.hasAttachData = NO;
  resultImlistSubscribeInfoRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMSubscribeMenuInfoReq ()
@property UInt64 userId;
@property (strong) NSString* sbUuid;
@property (strong) NSData* attachData;
@end

@implementation IMSubscribeMenuInfoReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSbUuid {
  return !!hasSbUuid_;
}
- (void) setHasSbUuid:(BOOL) _value_ {
  hasSbUuid_ = !!_value_;
}
@synthesize sbUuid;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.sbUuid = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMSubscribeMenuInfoReq* defaultIMSubscribeMenuInfoReqInstance = nil;
+ (void) initialize {
  if (self == [IMSubscribeMenuInfoReq class]) {
    defaultIMSubscribeMenuInfoReqInstance = [[IMSubscribeMenuInfoReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSubscribeMenuInfoReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSubscribeMenuInfoReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSbUuid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasSbUuid) {
    [output writeString:2 value:self.sbUuid];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasSbUuid) {
    size_ += computeStringSize(2, self.sbUuid);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSubscribeMenuInfoReq*) parseFromData:(NSData*) data {
  return (IMSubscribeMenuInfoReq*)[[[IMSubscribeMenuInfoReq builder] mergeFromData:data] build];
}
+ (IMSubscribeMenuInfoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeMenuInfoReq*)[[[IMSubscribeMenuInfoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeMenuInfoReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMSubscribeMenuInfoReq*)[[[IMSubscribeMenuInfoReq builder] mergeFromInputStream:input] build];
}
+ (IMSubscribeMenuInfoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeMenuInfoReq*)[[[IMSubscribeMenuInfoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeMenuInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSubscribeMenuInfoReq*)[[[IMSubscribeMenuInfoReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMSubscribeMenuInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeMenuInfoReq*)[[[IMSubscribeMenuInfoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeMenuInfoReqBuilder*) builder {
  return [[IMSubscribeMenuInfoReqBuilder alloc] init];
}
+ (IMSubscribeMenuInfoReqBuilder*) builderWithPrototype:(IMSubscribeMenuInfoReq*) prototype {
  return [[IMSubscribeMenuInfoReq builder] mergeFrom:prototype];
}
- (IMSubscribeMenuInfoReqBuilder*) builder {
  return [IMSubscribeMenuInfoReq builder];
}
- (IMSubscribeMenuInfoReqBuilder*) toBuilder {
  return [IMSubscribeMenuInfoReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasSbUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sbUuid", self.sbUuid];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasSbUuid) {
    [dictionary setObject: self.sbUuid forKey: @"sbUuid"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSubscribeMenuInfoReq class]]) {
    return NO;
  }
  IMSubscribeMenuInfoReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSbUuid == otherMessage.hasSbUuid &&
      (!self.hasSbUuid || [self.sbUuid isEqual:otherMessage.sbUuid]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasSbUuid) {
    hashCode = hashCode * 31 + [self.sbUuid hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSubscribeMenuInfoReqBuilder()
@property (strong) IMSubscribeMenuInfoReq* resultImsubscribeMenuInfoReq;
@end

@implementation IMSubscribeMenuInfoReqBuilder
@synthesize resultImsubscribeMenuInfoReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsubscribeMenuInfoReq = [[IMSubscribeMenuInfoReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsubscribeMenuInfoReq;
}
- (IMSubscribeMenuInfoReqBuilder*) clear {
  self.resultImsubscribeMenuInfoReq = [[IMSubscribeMenuInfoReq alloc] init];
  return self;
}
- (IMSubscribeMenuInfoReqBuilder*) clone {
  return [IMSubscribeMenuInfoReq builderWithPrototype:resultImsubscribeMenuInfoReq];
}
- (IMSubscribeMenuInfoReq*) defaultInstance {
  return [IMSubscribeMenuInfoReq defaultInstance];
}
- (IMSubscribeMenuInfoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSubscribeMenuInfoReq*) buildPartial {
  IMSubscribeMenuInfoReq* returnMe = resultImsubscribeMenuInfoReq;
  self.resultImsubscribeMenuInfoReq = nil;
  return returnMe;
}
- (IMSubscribeMenuInfoReqBuilder*) mergeFrom:(IMSubscribeMenuInfoReq*) other {
  if (other == [IMSubscribeMenuInfoReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSbUuid) {
    [self setSbUuid:other.sbUuid];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSubscribeMenuInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSubscribeMenuInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        [self setSbUuid:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImsubscribeMenuInfoReq.hasUserId;
}
- (UInt64) userId {
  return resultImsubscribeMenuInfoReq.userId;
}
- (IMSubscribeMenuInfoReqBuilder*) setUserId:(UInt64) value {
  resultImsubscribeMenuInfoReq.hasUserId = YES;
  resultImsubscribeMenuInfoReq.userId = value;
  return self;
}
- (IMSubscribeMenuInfoReqBuilder*) clearUserId {
  resultImsubscribeMenuInfoReq.hasUserId = NO;
  resultImsubscribeMenuInfoReq.userId = 0L;
  return self;
}
- (BOOL) hasSbUuid {
  return resultImsubscribeMenuInfoReq.hasSbUuid;
}
- (NSString*) sbUuid {
  return resultImsubscribeMenuInfoReq.sbUuid;
}
- (IMSubscribeMenuInfoReqBuilder*) setSbUuid:(NSString*) value {
  resultImsubscribeMenuInfoReq.hasSbUuid = YES;
  resultImsubscribeMenuInfoReq.sbUuid = value;
  return self;
}
- (IMSubscribeMenuInfoReqBuilder*) clearSbUuid {
  resultImsubscribeMenuInfoReq.hasSbUuid = NO;
  resultImsubscribeMenuInfoReq.sbUuid = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImsubscribeMenuInfoReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImsubscribeMenuInfoReq.attachData;
}
- (IMSubscribeMenuInfoReqBuilder*) setAttachData:(NSData*) value {
  resultImsubscribeMenuInfoReq.hasAttachData = YES;
  resultImsubscribeMenuInfoReq.attachData = value;
  return self;
}
- (IMSubscribeMenuInfoReqBuilder*) clearAttachData {
  resultImsubscribeMenuInfoReq.hasAttachData = NO;
  resultImsubscribeMenuInfoReq.attachData = [NSData data];
  return self;
}
@end

@interface IMSubscribeMenuInfoRsp ()
@property UInt64 userId;
@property (strong) NSString* sbUuid;
@property (strong) NSString* menu;
@property SubscribeRetCode resultCode;
@property (strong) NSData* attachData;
@end

@implementation IMSubscribeMenuInfoRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSbUuid {
  return !!hasSbUuid_;
}
- (void) setHasSbUuid:(BOOL) _value_ {
  hasSbUuid_ = !!_value_;
}
@synthesize sbUuid;
- (BOOL) hasMenu {
  return !!hasMenu_;
}
- (void) setHasMenu:(BOOL) _value_ {
  hasMenu_ = !!_value_;
}
@synthesize menu;
- (BOOL) hasResultCode {
  return !!hasResultCode_;
}
- (void) setHasResultCode:(BOOL) _value_ {
  hasResultCode_ = !!_value_;
}
@synthesize resultCode;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.sbUuid = @"";
    self.menu = @"";
    self.resultCode = SubscribeRetCodeSubscribeRetOk;
    self.attachData = [NSData data];
  }
  return self;
}
static IMSubscribeMenuInfoRsp* defaultIMSubscribeMenuInfoRspInstance = nil;
+ (void) initialize {
  if (self == [IMSubscribeMenuInfoRsp class]) {
    defaultIMSubscribeMenuInfoRspInstance = [[IMSubscribeMenuInfoRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSubscribeMenuInfoRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSubscribeMenuInfoRspInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSbUuid) {
    return NO;
  }
  if (!self.hasMenu) {
    return NO;
  }
  if (!self.hasResultCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasSbUuid) {
    [output writeString:2 value:self.sbUuid];
  }
  if (self.hasMenu) {
    [output writeString:3 value:self.menu];
  }
  if (self.hasResultCode) {
    [output writeEnum:4 value:self.resultCode];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasSbUuid) {
    size_ += computeStringSize(2, self.sbUuid);
  }
  if (self.hasMenu) {
    size_ += computeStringSize(3, self.menu);
  }
  if (self.hasResultCode) {
    size_ += computeEnumSize(4, self.resultCode);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSubscribeMenuInfoRsp*) parseFromData:(NSData*) data {
  return (IMSubscribeMenuInfoRsp*)[[[IMSubscribeMenuInfoRsp builder] mergeFromData:data] build];
}
+ (IMSubscribeMenuInfoRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeMenuInfoRsp*)[[[IMSubscribeMenuInfoRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeMenuInfoRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMSubscribeMenuInfoRsp*)[[[IMSubscribeMenuInfoRsp builder] mergeFromInputStream:input] build];
}
+ (IMSubscribeMenuInfoRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeMenuInfoRsp*)[[[IMSubscribeMenuInfoRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeMenuInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSubscribeMenuInfoRsp*)[[[IMSubscribeMenuInfoRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMSubscribeMenuInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSubscribeMenuInfoRsp*)[[[IMSubscribeMenuInfoRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSubscribeMenuInfoRspBuilder*) builder {
  return [[IMSubscribeMenuInfoRspBuilder alloc] init];
}
+ (IMSubscribeMenuInfoRspBuilder*) builderWithPrototype:(IMSubscribeMenuInfoRsp*) prototype {
  return [[IMSubscribeMenuInfoRsp builder] mergeFrom:prototype];
}
- (IMSubscribeMenuInfoRspBuilder*) builder {
  return [IMSubscribeMenuInfoRsp builder];
}
- (IMSubscribeMenuInfoRspBuilder*) toBuilder {
  return [IMSubscribeMenuInfoRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasSbUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sbUuid", self.sbUuid];
  }
  if (self.hasMenu) {
    [output appendFormat:@"%@%@: %@\n", indent, @"menu", self.menu];
  }
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", NSStringFromSubscribeRetCode(self.resultCode)];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasSbUuid) {
    [dictionary setObject: self.sbUuid forKey: @"sbUuid"];
  }
  if (self.hasMenu) {
    [dictionary setObject: self.menu forKey: @"menu"];
  }
  if (self.hasResultCode) {
    [dictionary setObject: @(self.resultCode) forKey: @"resultCode"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSubscribeMenuInfoRsp class]]) {
    return NO;
  }
  IMSubscribeMenuInfoRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSbUuid == otherMessage.hasSbUuid &&
      (!self.hasSbUuid || [self.sbUuid isEqual:otherMessage.sbUuid]) &&
      self.hasMenu == otherMessage.hasMenu &&
      (!self.hasMenu || [self.menu isEqual:otherMessage.menu]) &&
      self.hasResultCode == otherMessage.hasResultCode &&
      (!self.hasResultCode || self.resultCode == otherMessage.resultCode) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasSbUuid) {
    hashCode = hashCode * 31 + [self.sbUuid hash];
  }
  if (self.hasMenu) {
    hashCode = hashCode * 31 + [self.menu hash];
  }
  if (self.hasResultCode) {
    hashCode = hashCode * 31 + self.resultCode;
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSubscribeMenuInfoRspBuilder()
@property (strong) IMSubscribeMenuInfoRsp* resultImsubscribeMenuInfoRsp;
@end

@implementation IMSubscribeMenuInfoRspBuilder
@synthesize resultImsubscribeMenuInfoRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsubscribeMenuInfoRsp = [[IMSubscribeMenuInfoRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsubscribeMenuInfoRsp;
}
- (IMSubscribeMenuInfoRspBuilder*) clear {
  self.resultImsubscribeMenuInfoRsp = [[IMSubscribeMenuInfoRsp alloc] init];
  return self;
}
- (IMSubscribeMenuInfoRspBuilder*) clone {
  return [IMSubscribeMenuInfoRsp builderWithPrototype:resultImsubscribeMenuInfoRsp];
}
- (IMSubscribeMenuInfoRsp*) defaultInstance {
  return [IMSubscribeMenuInfoRsp defaultInstance];
}
- (IMSubscribeMenuInfoRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSubscribeMenuInfoRsp*) buildPartial {
  IMSubscribeMenuInfoRsp* returnMe = resultImsubscribeMenuInfoRsp;
  self.resultImsubscribeMenuInfoRsp = nil;
  return returnMe;
}
- (IMSubscribeMenuInfoRspBuilder*) mergeFrom:(IMSubscribeMenuInfoRsp*) other {
  if (other == [IMSubscribeMenuInfoRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSbUuid) {
    [self setSbUuid:other.sbUuid];
  }
  if (other.hasMenu) {
    [self setMenu:other.menu];
  }
  if (other.hasResultCode) {
    [self setResultCode:other.resultCode];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSubscribeMenuInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSubscribeMenuInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        [self setSbUuid:[input readString]];
        break;
      }
      case 26: {
        [self setMenu:[input readString]];
        break;
      }
      case 32: {
        SubscribeRetCode value = (SubscribeRetCode)[input readEnum];
        if (SubscribeRetCodeIsValidValue(value)) {
          [self setResultCode:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImsubscribeMenuInfoRsp.hasUserId;
}
- (UInt64) userId {
  return resultImsubscribeMenuInfoRsp.userId;
}
- (IMSubscribeMenuInfoRspBuilder*) setUserId:(UInt64) value {
  resultImsubscribeMenuInfoRsp.hasUserId = YES;
  resultImsubscribeMenuInfoRsp.userId = value;
  return self;
}
- (IMSubscribeMenuInfoRspBuilder*) clearUserId {
  resultImsubscribeMenuInfoRsp.hasUserId = NO;
  resultImsubscribeMenuInfoRsp.userId = 0L;
  return self;
}
- (BOOL) hasSbUuid {
  return resultImsubscribeMenuInfoRsp.hasSbUuid;
}
- (NSString*) sbUuid {
  return resultImsubscribeMenuInfoRsp.sbUuid;
}
- (IMSubscribeMenuInfoRspBuilder*) setSbUuid:(NSString*) value {
  resultImsubscribeMenuInfoRsp.hasSbUuid = YES;
  resultImsubscribeMenuInfoRsp.sbUuid = value;
  return self;
}
- (IMSubscribeMenuInfoRspBuilder*) clearSbUuid {
  resultImsubscribeMenuInfoRsp.hasSbUuid = NO;
  resultImsubscribeMenuInfoRsp.sbUuid = @"";
  return self;
}
- (BOOL) hasMenu {
  return resultImsubscribeMenuInfoRsp.hasMenu;
}
- (NSString*) menu {
  return resultImsubscribeMenuInfoRsp.menu;
}
- (IMSubscribeMenuInfoRspBuilder*) setMenu:(NSString*) value {
  resultImsubscribeMenuInfoRsp.hasMenu = YES;
  resultImsubscribeMenuInfoRsp.menu = value;
  return self;
}
- (IMSubscribeMenuInfoRspBuilder*) clearMenu {
  resultImsubscribeMenuInfoRsp.hasMenu = NO;
  resultImsubscribeMenuInfoRsp.menu = @"";
  return self;
}
- (BOOL) hasResultCode {
  return resultImsubscribeMenuInfoRsp.hasResultCode;
}
- (SubscribeRetCode) resultCode {
  return resultImsubscribeMenuInfoRsp.resultCode;
}
- (IMSubscribeMenuInfoRspBuilder*) setResultCode:(SubscribeRetCode) value {
  resultImsubscribeMenuInfoRsp.hasResultCode = YES;
  resultImsubscribeMenuInfoRsp.resultCode = value;
  return self;
}
- (IMSubscribeMenuInfoRspBuilder*) clearResultCode {
  resultImsubscribeMenuInfoRsp.hasResultCode = NO;
  resultImsubscribeMenuInfoRsp.resultCode = SubscribeRetCodeSubscribeRetOk;
  return self;
}
- (BOOL) hasAttachData {
  return resultImsubscribeMenuInfoRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImsubscribeMenuInfoRsp.attachData;
}
- (IMSubscribeMenuInfoRspBuilder*) setAttachData:(NSData*) value {
  resultImsubscribeMenuInfoRsp.hasAttachData = YES;
  resultImsubscribeMenuInfoRsp.attachData = value;
  return self;
}
- (IMSubscribeMenuInfoRspBuilder*) clearAttachData {
  resultImsubscribeMenuInfoRsp.hasAttachData = NO;
  resultImsubscribeMenuInfoRsp.attachData = [NSData data];
  return self;
}
@end

@interface IMSearchSubscribeReq ()
@property UInt64 userId;
@property (strong) NSString* searchkey;
@property (strong) NSData* attachData;
@end

@implementation IMSearchSubscribeReq

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
- (BOOL) hasSearchkey {
  return !!hasSearchkey_;
}
- (void) setHasSearchkey:(BOOL) _value_ {
  hasSearchkey_ = !!_value_;
}
@synthesize searchkey;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.searchkey = @"";
    self.attachData = [NSData data];
  }
  return self;
}
static IMSearchSubscribeReq* defaultIMSearchSubscribeReqInstance = nil;
+ (void) initialize {
  if (self == [IMSearchSubscribeReq class]) {
    defaultIMSearchSubscribeReqInstance = [[IMSearchSubscribeReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSearchSubscribeReqInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSearchSubscribeReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  if (!self.hasSearchkey) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  if (self.hasSearchkey) {
    [output writeString:2 value:self.searchkey];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  if (self.hasSearchkey) {
    size_ += computeStringSize(2, self.searchkey);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSearchSubscribeReq*) parseFromData:(NSData*) data {
  return (IMSearchSubscribeReq*)[[[IMSearchSubscribeReq builder] mergeFromData:data] build];
}
+ (IMSearchSubscribeReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSearchSubscribeReq*)[[[IMSearchSubscribeReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSearchSubscribeReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMSearchSubscribeReq*)[[[IMSearchSubscribeReq builder] mergeFromInputStream:input] build];
}
+ (IMSearchSubscribeReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSearchSubscribeReq*)[[[IMSearchSubscribeReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSearchSubscribeReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSearchSubscribeReq*)[[[IMSearchSubscribeReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMSearchSubscribeReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSearchSubscribeReq*)[[[IMSearchSubscribeReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSearchSubscribeReqBuilder*) builder {
  return [[IMSearchSubscribeReqBuilder alloc] init];
}
+ (IMSearchSubscribeReqBuilder*) builderWithPrototype:(IMSearchSubscribeReq*) prototype {
  return [[IMSearchSubscribeReq builder] mergeFrom:prototype];
}
- (IMSearchSubscribeReqBuilder*) builder {
  return [IMSearchSubscribeReq builder];
}
- (IMSearchSubscribeReqBuilder*) toBuilder {
  return [IMSearchSubscribeReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  if (self.hasSearchkey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchkey", self.searchkey];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  if (self.hasSearchkey) {
    [dictionary setObject: self.searchkey forKey: @"searchkey"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSearchSubscribeReq class]]) {
    return NO;
  }
  IMSearchSubscribeReq *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasSearchkey == otherMessage.hasSearchkey &&
      (!self.hasSearchkey || [self.searchkey isEqual:otherMessage.searchkey]) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  if (self.hasSearchkey) {
    hashCode = hashCode * 31 + [self.searchkey hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSearchSubscribeReqBuilder()
@property (strong) IMSearchSubscribeReq* resultImsearchSubscribeReq;
@end

@implementation IMSearchSubscribeReqBuilder
@synthesize resultImsearchSubscribeReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsearchSubscribeReq = [[IMSearchSubscribeReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsearchSubscribeReq;
}
- (IMSearchSubscribeReqBuilder*) clear {
  self.resultImsearchSubscribeReq = [[IMSearchSubscribeReq alloc] init];
  return self;
}
- (IMSearchSubscribeReqBuilder*) clone {
  return [IMSearchSubscribeReq builderWithPrototype:resultImsearchSubscribeReq];
}
- (IMSearchSubscribeReq*) defaultInstance {
  return [IMSearchSubscribeReq defaultInstance];
}
- (IMSearchSubscribeReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSearchSubscribeReq*) buildPartial {
  IMSearchSubscribeReq* returnMe = resultImsearchSubscribeReq;
  self.resultImsearchSubscribeReq = nil;
  return returnMe;
}
- (IMSearchSubscribeReqBuilder*) mergeFrom:(IMSearchSubscribeReq*) other {
  if (other == [IMSearchSubscribeReq defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasSearchkey) {
    [self setSearchkey:other.searchkey];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSearchSubscribeReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSearchSubscribeReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        [self setSearchkey:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImsearchSubscribeReq.hasUserId;
}
- (UInt64) userId {
  return resultImsearchSubscribeReq.userId;
}
- (IMSearchSubscribeReqBuilder*) setUserId:(UInt64) value {
  resultImsearchSubscribeReq.hasUserId = YES;
  resultImsearchSubscribeReq.userId = value;
  return self;
}
- (IMSearchSubscribeReqBuilder*) clearUserId {
  resultImsearchSubscribeReq.hasUserId = NO;
  resultImsearchSubscribeReq.userId = 0L;
  return self;
}
- (BOOL) hasSearchkey {
  return resultImsearchSubscribeReq.hasSearchkey;
}
- (NSString*) searchkey {
  return resultImsearchSubscribeReq.searchkey;
}
- (IMSearchSubscribeReqBuilder*) setSearchkey:(NSString*) value {
  resultImsearchSubscribeReq.hasSearchkey = YES;
  resultImsearchSubscribeReq.searchkey = value;
  return self;
}
- (IMSearchSubscribeReqBuilder*) clearSearchkey {
  resultImsearchSubscribeReq.hasSearchkey = NO;
  resultImsearchSubscribeReq.searchkey = @"";
  return self;
}
- (BOOL) hasAttachData {
  return resultImsearchSubscribeReq.hasAttachData;
}
- (NSData*) attachData {
  return resultImsearchSubscribeReq.attachData;
}
- (IMSearchSubscribeReqBuilder*) setAttachData:(NSData*) value {
  resultImsearchSubscribeReq.hasAttachData = YES;
  resultImsearchSubscribeReq.attachData = value;
  return self;
}
- (IMSearchSubscribeReqBuilder*) clearAttachData {
  resultImsearchSubscribeReq.hasAttachData = NO;
  resultImsearchSubscribeReq.attachData = [NSData data];
  return self;
}
@end

@interface IMSearchSubscribeRsp ()
@property UInt64 userId;
@property (strong) NSMutableArray * sbListArray;
@property (strong) NSData* attachData;
@end

@implementation IMSearchSubscribeRsp

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) _value_ {
  hasUserId_ = !!_value_;
}
@synthesize userId;
@synthesize sbListArray;
@dynamic sbList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.userId = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMSearchSubscribeRsp* defaultIMSearchSubscribeRspInstance = nil;
+ (void) initialize {
  if (self == [IMSearchSubscribeRsp class]) {
    defaultIMSearchSubscribeRspInstance = [[IMSearchSubscribeRsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMSearchSubscribeRspInstance;
}
- (instancetype) defaultInstance {
  return defaultIMSearchSubscribeRspInstance;
}
- (NSArray *)sbList {
  return sbListArray;
}
- (SubscribeInfo*)sbListAtIndex:(NSUInteger)index {
  return [sbListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserId) {
    return NO;
  }
  __block BOOL isInitsbList = YES;
   [self.sbList enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitsbList = NO;
      *stop = YES;
    }
  }];
  if (!isInitsbList) return isInitsbList;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeUInt64:1 value:self.userId];
  }
  [self.sbListArray enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeUInt64Size(1, self.userId);
  }
  [self.sbListArray enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMSearchSubscribeRsp*) parseFromData:(NSData*) data {
  return (IMSearchSubscribeRsp*)[[[IMSearchSubscribeRsp builder] mergeFromData:data] build];
}
+ (IMSearchSubscribeRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSearchSubscribeRsp*)[[[IMSearchSubscribeRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSearchSubscribeRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMSearchSubscribeRsp*)[[[IMSearchSubscribeRsp builder] mergeFromInputStream:input] build];
}
+ (IMSearchSubscribeRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSearchSubscribeRsp*)[[[IMSearchSubscribeRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSearchSubscribeRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSearchSubscribeRsp*)[[[IMSearchSubscribeRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMSearchSubscribeRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSearchSubscribeRsp*)[[[IMSearchSubscribeRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSearchSubscribeRspBuilder*) builder {
  return [[IMSearchSubscribeRspBuilder alloc] init];
}
+ (IMSearchSubscribeRspBuilder*) builderWithPrototype:(IMSearchSubscribeRsp*) prototype {
  return [[IMSearchSubscribeRsp builder] mergeFrom:prototype];
}
- (IMSearchSubscribeRspBuilder*) builder {
  return [IMSearchSubscribeRsp builder];
}
- (IMSearchSubscribeRspBuilder*) toBuilder {
  return [IMSearchSubscribeRsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithLongLong:self.userId]];
  }
  [self.sbListArray enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sbList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.userId] forKey: @"userId"];
  }
  for (SubscribeInfo* element in self.sbListArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"sbList"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMSearchSubscribeRsp class]]) {
    return NO;
  }
  IMSearchSubscribeRsp *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      [self.sbListArray isEqualToArray:otherMessage.sbListArray] &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userId] hash];
  }
  [self.sbListArray enumerateObjectsUsingBlock:^(SubscribeInfo *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMSearchSubscribeRspBuilder()
@property (strong) IMSearchSubscribeRsp* resultImsearchSubscribeRsp;
@end

@implementation IMSearchSubscribeRspBuilder
@synthesize resultImsearchSubscribeRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImsearchSubscribeRsp = [[IMSearchSubscribeRsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImsearchSubscribeRsp;
}
- (IMSearchSubscribeRspBuilder*) clear {
  self.resultImsearchSubscribeRsp = [[IMSearchSubscribeRsp alloc] init];
  return self;
}
- (IMSearchSubscribeRspBuilder*) clone {
  return [IMSearchSubscribeRsp builderWithPrototype:resultImsearchSubscribeRsp];
}
- (IMSearchSubscribeRsp*) defaultInstance {
  return [IMSearchSubscribeRsp defaultInstance];
}
- (IMSearchSubscribeRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSearchSubscribeRsp*) buildPartial {
  IMSearchSubscribeRsp* returnMe = resultImsearchSubscribeRsp;
  self.resultImsearchSubscribeRsp = nil;
  return returnMe;
}
- (IMSearchSubscribeRspBuilder*) mergeFrom:(IMSearchSubscribeRsp*) other {
  if (other == [IMSearchSubscribeRsp defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.sbListArray.count > 0) {
    if (resultImsearchSubscribeRsp.sbListArray == nil) {
      resultImsearchSubscribeRsp.sbListArray = [[NSMutableArray alloc] initWithArray:other.sbListArray];
    } else {
      [resultImsearchSubscribeRsp.sbListArray addObjectsFromArray:other.sbListArray];
    }
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSearchSubscribeRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSearchSubscribeRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readUInt64]];
        break;
      }
      case 18: {
        SubscribeInfoBuilder* subBuilder = [SubscribeInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSbList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return resultImsearchSubscribeRsp.hasUserId;
}
- (UInt64) userId {
  return resultImsearchSubscribeRsp.userId;
}
- (IMSearchSubscribeRspBuilder*) setUserId:(UInt64) value {
  resultImsearchSubscribeRsp.hasUserId = YES;
  resultImsearchSubscribeRsp.userId = value;
  return self;
}
- (IMSearchSubscribeRspBuilder*) clearUserId {
  resultImsearchSubscribeRsp.hasUserId = NO;
  resultImsearchSubscribeRsp.userId = 0L;
  return self;
}
- (NSMutableArray *)sbList {
  return resultImsearchSubscribeRsp.sbListArray;
}
- (SubscribeInfo*)sbListAtIndex:(NSUInteger)index {
  return [resultImsearchSubscribeRsp sbListAtIndex:index];
}
- (IMSearchSubscribeRspBuilder *)addSbList:(SubscribeInfo*)value {
  if (resultImsearchSubscribeRsp.sbListArray == nil) {
    resultImsearchSubscribeRsp.sbListArray = [[NSMutableArray alloc]init];
  }
  [resultImsearchSubscribeRsp.sbListArray addObject:value];
  return self;
}
- (IMSearchSubscribeRspBuilder *)setSbListArray:(NSArray *)array {
  resultImsearchSubscribeRsp.sbListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (IMSearchSubscribeRspBuilder *)clearSbList {
  resultImsearchSubscribeRsp.sbListArray = nil;
  return self;
}
- (BOOL) hasAttachData {
  return resultImsearchSubscribeRsp.hasAttachData;
}
- (NSData*) attachData {
  return resultImsearchSubscribeRsp.attachData;
}
- (IMSearchSubscribeRspBuilder*) setAttachData:(NSData*) value {
  resultImsearchSubscribeRsp.hasAttachData = YES;
  resultImsearchSubscribeRsp.attachData = value;
  return self;
}
- (IMSearchSubscribeRspBuilder*) clearAttachData {
  resultImsearchSubscribeRsp.hasAttachData = NO;
  resultImsearchSubscribeRsp.attachData = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
