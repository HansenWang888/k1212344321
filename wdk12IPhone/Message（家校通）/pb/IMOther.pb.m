// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMOther.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImotherRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImotherRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMHeartBeat ()
@end

@implementation IMHeartBeat

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static IMHeartBeat* defaultIMHeartBeatInstance = nil;
+ (void) initialize {
  if (self == [IMHeartBeat class]) {
    defaultIMHeartBeatInstance = [[IMHeartBeat alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMHeartBeatInstance;
}
- (instancetype) defaultInstance {
  return defaultIMHeartBeatInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMHeartBeat*) parseFromData:(NSData*) data {
  return (IMHeartBeat*)[[[IMHeartBeat builder] mergeFromData:data] build];
}
+ (IMHeartBeat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMHeartBeat*)[[[IMHeartBeat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMHeartBeat*) parseFromInputStream:(NSInputStream*) input {
  return (IMHeartBeat*)[[[IMHeartBeat builder] mergeFromInputStream:input] build];
}
+ (IMHeartBeat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMHeartBeat*)[[[IMHeartBeat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMHeartBeat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMHeartBeat*)[[[IMHeartBeat builder] mergeFromCodedInputStream:input] build];
}
+ (IMHeartBeat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMHeartBeat*)[[[IMHeartBeat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMHeartBeatBuilder*) builder {
  return [[IMHeartBeatBuilder alloc] init];
}
+ (IMHeartBeatBuilder*) builderWithPrototype:(IMHeartBeat*) prototype {
  return [[IMHeartBeat builder] mergeFrom:prototype];
}
- (IMHeartBeatBuilder*) builder {
  return [IMHeartBeat builder];
}
- (IMHeartBeatBuilder*) toBuilder {
  return [IMHeartBeat builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMHeartBeat class]]) {
    return NO;
  }
  IMHeartBeat *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMHeartBeatBuilder()
@property (strong) IMHeartBeat* resultImheartBeat;
@end

@implementation IMHeartBeatBuilder
@synthesize resultImheartBeat;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImheartBeat = [[IMHeartBeat alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImheartBeat;
}
- (IMHeartBeatBuilder*) clear {
  self.resultImheartBeat = [[IMHeartBeat alloc] init];
  return self;
}
- (IMHeartBeatBuilder*) clone {
  return [IMHeartBeat builderWithPrototype:resultImheartBeat];
}
- (IMHeartBeat*) defaultInstance {
  return [IMHeartBeat defaultInstance];
}
- (IMHeartBeat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMHeartBeat*) buildPartial {
  IMHeartBeat* returnMe = resultImheartBeat;
  self.resultImheartBeat = nil;
  return returnMe;
}
- (IMHeartBeatBuilder*) mergeFrom:(IMHeartBeat*) other {
  if (other == [IMHeartBeat defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMHeartBeatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMHeartBeatBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface IMPing ()
@property SInt64 localPingStart;
@property SInt64 msgServerArrive;
@property SInt64 dbproxyArrive;
@property SInt64 sqlStartTime;
@property SInt64 sqlEndTime;
@property SInt64 msgServerRspArrive;
@property SInt64 localArrive;
@property (strong) NSData* attachData;
@end

@implementation IMPing

- (BOOL) hasLocalPingStart {
  return !!hasLocalPingStart_;
}
- (void) setHasLocalPingStart:(BOOL) _value_ {
  hasLocalPingStart_ = !!_value_;
}
@synthesize localPingStart;
- (BOOL) hasMsgServerArrive {
  return !!hasMsgServerArrive_;
}
- (void) setHasMsgServerArrive:(BOOL) _value_ {
  hasMsgServerArrive_ = !!_value_;
}
@synthesize msgServerArrive;
- (BOOL) hasDbproxyArrive {
  return !!hasDbproxyArrive_;
}
- (void) setHasDbproxyArrive:(BOOL) _value_ {
  hasDbproxyArrive_ = !!_value_;
}
@synthesize dbproxyArrive;
- (BOOL) hasSqlStartTime {
  return !!hasSqlStartTime_;
}
- (void) setHasSqlStartTime:(BOOL) _value_ {
  hasSqlStartTime_ = !!_value_;
}
@synthesize sqlStartTime;
- (BOOL) hasSqlEndTime {
  return !!hasSqlEndTime_;
}
- (void) setHasSqlEndTime:(BOOL) _value_ {
  hasSqlEndTime_ = !!_value_;
}
@synthesize sqlEndTime;
- (BOOL) hasMsgServerRspArrive {
  return !!hasMsgServerRspArrive_;
}
- (void) setHasMsgServerRspArrive:(BOOL) _value_ {
  hasMsgServerRspArrive_ = !!_value_;
}
@synthesize msgServerRspArrive;
- (BOOL) hasLocalArrive {
  return !!hasLocalArrive_;
}
- (void) setHasLocalArrive:(BOOL) _value_ {
  hasLocalArrive_ = !!_value_;
}
@synthesize localArrive;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) _value_ {
  hasAttachData_ = !!_value_;
}
@synthesize attachData;
- (instancetype) init {
  if ((self = [super init])) {
    self.localPingStart = 0L;
    self.msgServerArrive = 0L;
    self.dbproxyArrive = 0L;
    self.sqlStartTime = 0L;
    self.sqlEndTime = 0L;
    self.msgServerRspArrive = 0L;
    self.localArrive = 0L;
    self.attachData = [NSData data];
  }
  return self;
}
static IMPing* defaultIMPingInstance = nil;
+ (void) initialize {
  if (self == [IMPing class]) {
    defaultIMPingInstance = [[IMPing alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMPingInstance;
}
- (instancetype) defaultInstance {
  return defaultIMPingInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLocalPingStart) {
    [output writeInt64:1 value:self.localPingStart];
  }
  if (self.hasMsgServerArrive) {
    [output writeInt64:2 value:self.msgServerArrive];
  }
  if (self.hasDbproxyArrive) {
    [output writeInt64:3 value:self.dbproxyArrive];
  }
  if (self.hasSqlStartTime) {
    [output writeInt64:4 value:self.sqlStartTime];
  }
  if (self.hasSqlEndTime) {
    [output writeInt64:5 value:self.sqlEndTime];
  }
  if (self.hasMsgServerRspArrive) {
    [output writeInt64:6 value:self.msgServerRspArrive];
  }
  if (self.hasLocalArrive) {
    [output writeInt64:7 value:self.localArrive];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLocalPingStart) {
    size_ += computeInt64Size(1, self.localPingStart);
  }
  if (self.hasMsgServerArrive) {
    size_ += computeInt64Size(2, self.msgServerArrive);
  }
  if (self.hasDbproxyArrive) {
    size_ += computeInt64Size(3, self.dbproxyArrive);
  }
  if (self.hasSqlStartTime) {
    size_ += computeInt64Size(4, self.sqlStartTime);
  }
  if (self.hasSqlEndTime) {
    size_ += computeInt64Size(5, self.sqlEndTime);
  }
  if (self.hasMsgServerRspArrive) {
    size_ += computeInt64Size(6, self.msgServerRspArrive);
  }
  if (self.hasLocalArrive) {
    size_ += computeInt64Size(7, self.localArrive);
  }
  if (self.hasAttachData) {
    size_ += computeDataSize(20, self.attachData);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMPing*) parseFromData:(NSData*) data {
  return (IMPing*)[[[IMPing builder] mergeFromData:data] build];
}
+ (IMPing*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPing*)[[[IMPing builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMPing*) parseFromInputStream:(NSInputStream*) input {
  return (IMPing*)[[[IMPing builder] mergeFromInputStream:input] build];
}
+ (IMPing*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPing*)[[[IMPing builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPing*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMPing*)[[[IMPing builder] mergeFromCodedInputStream:input] build];
}
+ (IMPing*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMPing*)[[[IMPing builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMPingBuilder*) builder {
  return [[IMPingBuilder alloc] init];
}
+ (IMPingBuilder*) builderWithPrototype:(IMPing*) prototype {
  return [[IMPing builder] mergeFrom:prototype];
}
- (IMPingBuilder*) builder {
  return [IMPing builder];
}
- (IMPingBuilder*) toBuilder {
  return [IMPing builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLocalPingStart) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localPingStart", [NSNumber numberWithLongLong:self.localPingStart]];
  }
  if (self.hasMsgServerArrive) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgServerArrive", [NSNumber numberWithLongLong:self.msgServerArrive]];
  }
  if (self.hasDbproxyArrive) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dbproxyArrive", [NSNumber numberWithLongLong:self.dbproxyArrive]];
  }
  if (self.hasSqlStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sqlStartTime", [NSNumber numberWithLongLong:self.sqlStartTime]];
  }
  if (self.hasSqlEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sqlEndTime", [NSNumber numberWithLongLong:self.sqlEndTime]];
  }
  if (self.hasMsgServerRspArrive) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgServerRspArrive", [NSNumber numberWithLongLong:self.msgServerRspArrive]];
  }
  if (self.hasLocalArrive) {
    [output appendFormat:@"%@%@: %@\n", indent, @"localArrive", [NSNumber numberWithLongLong:self.localArrive]];
  }
  if (self.hasAttachData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attachData", self.attachData];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLocalPingStart) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.localPingStart] forKey: @"localPingStart"];
  }
  if (self.hasMsgServerArrive) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.msgServerArrive] forKey: @"msgServerArrive"];
  }
  if (self.hasDbproxyArrive) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.dbproxyArrive] forKey: @"dbproxyArrive"];
  }
  if (self.hasSqlStartTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sqlStartTime] forKey: @"sqlStartTime"];
  }
  if (self.hasSqlEndTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sqlEndTime] forKey: @"sqlEndTime"];
  }
  if (self.hasMsgServerRspArrive) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.msgServerRspArrive] forKey: @"msgServerRspArrive"];
  }
  if (self.hasLocalArrive) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.localArrive] forKey: @"localArrive"];
  }
  if (self.hasAttachData) {
    [dictionary setObject: self.attachData forKey: @"attachData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMPing class]]) {
    return NO;
  }
  IMPing *otherMessage = other;
  return
      self.hasLocalPingStart == otherMessage.hasLocalPingStart &&
      (!self.hasLocalPingStart || self.localPingStart == otherMessage.localPingStart) &&
      self.hasMsgServerArrive == otherMessage.hasMsgServerArrive &&
      (!self.hasMsgServerArrive || self.msgServerArrive == otherMessage.msgServerArrive) &&
      self.hasDbproxyArrive == otherMessage.hasDbproxyArrive &&
      (!self.hasDbproxyArrive || self.dbproxyArrive == otherMessage.dbproxyArrive) &&
      self.hasSqlStartTime == otherMessage.hasSqlStartTime &&
      (!self.hasSqlStartTime || self.sqlStartTime == otherMessage.sqlStartTime) &&
      self.hasSqlEndTime == otherMessage.hasSqlEndTime &&
      (!self.hasSqlEndTime || self.sqlEndTime == otherMessage.sqlEndTime) &&
      self.hasMsgServerRspArrive == otherMessage.hasMsgServerRspArrive &&
      (!self.hasMsgServerRspArrive || self.msgServerRspArrive == otherMessage.msgServerRspArrive) &&
      self.hasLocalArrive == otherMessage.hasLocalArrive &&
      (!self.hasLocalArrive || self.localArrive == otherMessage.localArrive) &&
      self.hasAttachData == otherMessage.hasAttachData &&
      (!self.hasAttachData || [self.attachData isEqual:otherMessage.attachData]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLocalPingStart) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.localPingStart] hash];
  }
  if (self.hasMsgServerArrive) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.msgServerArrive] hash];
  }
  if (self.hasDbproxyArrive) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.dbproxyArrive] hash];
  }
  if (self.hasSqlStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sqlStartTime] hash];
  }
  if (self.hasSqlEndTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sqlEndTime] hash];
  }
  if (self.hasMsgServerRspArrive) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.msgServerRspArrive] hash];
  }
  if (self.hasLocalArrive) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.localArrive] hash];
  }
  if (self.hasAttachData) {
    hashCode = hashCode * 31 + [self.attachData hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMPingBuilder()
@property (strong) IMPing* resultImping;
@end

@implementation IMPingBuilder
@synthesize resultImping;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImping = [[IMPing alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImping;
}
- (IMPingBuilder*) clear {
  self.resultImping = [[IMPing alloc] init];
  return self;
}
- (IMPingBuilder*) clone {
  return [IMPing builderWithPrototype:resultImping];
}
- (IMPing*) defaultInstance {
  return [IMPing defaultInstance];
}
- (IMPing*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMPing*) buildPartial {
  IMPing* returnMe = resultImping;
  self.resultImping = nil;
  return returnMe;
}
- (IMPingBuilder*) mergeFrom:(IMPing*) other {
  if (other == [IMPing defaultInstance]) {
    return self;
  }
  if (other.hasLocalPingStart) {
    [self setLocalPingStart:other.localPingStart];
  }
  if (other.hasMsgServerArrive) {
    [self setMsgServerArrive:other.msgServerArrive];
  }
  if (other.hasDbproxyArrive) {
    [self setDbproxyArrive:other.dbproxyArrive];
  }
  if (other.hasSqlStartTime) {
    [self setSqlStartTime:other.sqlStartTime];
  }
  if (other.hasSqlEndTime) {
    [self setSqlEndTime:other.sqlEndTime];
  }
  if (other.hasMsgServerRspArrive) {
    [self setMsgServerRspArrive:other.msgServerRspArrive];
  }
  if (other.hasLocalArrive) {
    [self setLocalArrive:other.localArrive];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMPingBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMPingBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLocalPingStart:[input readInt64]];
        break;
      }
      case 16: {
        [self setMsgServerArrive:[input readInt64]];
        break;
      }
      case 24: {
        [self setDbproxyArrive:[input readInt64]];
        break;
      }
      case 32: {
        [self setSqlStartTime:[input readInt64]];
        break;
      }
      case 40: {
        [self setSqlEndTime:[input readInt64]];
        break;
      }
      case 48: {
        [self setMsgServerRspArrive:[input readInt64]];
        break;
      }
      case 56: {
        [self setLocalArrive:[input readInt64]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasLocalPingStart {
  return resultImping.hasLocalPingStart;
}
- (SInt64) localPingStart {
  return resultImping.localPingStart;
}
- (IMPingBuilder*) setLocalPingStart:(SInt64) value {
  resultImping.hasLocalPingStart = YES;
  resultImping.localPingStart = value;
  return self;
}
- (IMPingBuilder*) clearLocalPingStart {
  resultImping.hasLocalPingStart = NO;
  resultImping.localPingStart = 0L;
  return self;
}
- (BOOL) hasMsgServerArrive {
  return resultImping.hasMsgServerArrive;
}
- (SInt64) msgServerArrive {
  return resultImping.msgServerArrive;
}
- (IMPingBuilder*) setMsgServerArrive:(SInt64) value {
  resultImping.hasMsgServerArrive = YES;
  resultImping.msgServerArrive = value;
  return self;
}
- (IMPingBuilder*) clearMsgServerArrive {
  resultImping.hasMsgServerArrive = NO;
  resultImping.msgServerArrive = 0L;
  return self;
}
- (BOOL) hasDbproxyArrive {
  return resultImping.hasDbproxyArrive;
}
- (SInt64) dbproxyArrive {
  return resultImping.dbproxyArrive;
}
- (IMPingBuilder*) setDbproxyArrive:(SInt64) value {
  resultImping.hasDbproxyArrive = YES;
  resultImping.dbproxyArrive = value;
  return self;
}
- (IMPingBuilder*) clearDbproxyArrive {
  resultImping.hasDbproxyArrive = NO;
  resultImping.dbproxyArrive = 0L;
  return self;
}
- (BOOL) hasSqlStartTime {
  return resultImping.hasSqlStartTime;
}
- (SInt64) sqlStartTime {
  return resultImping.sqlStartTime;
}
- (IMPingBuilder*) setSqlStartTime:(SInt64) value {
  resultImping.hasSqlStartTime = YES;
  resultImping.sqlStartTime = value;
  return self;
}
- (IMPingBuilder*) clearSqlStartTime {
  resultImping.hasSqlStartTime = NO;
  resultImping.sqlStartTime = 0L;
  return self;
}
- (BOOL) hasSqlEndTime {
  return resultImping.hasSqlEndTime;
}
- (SInt64) sqlEndTime {
  return resultImping.sqlEndTime;
}
- (IMPingBuilder*) setSqlEndTime:(SInt64) value {
  resultImping.hasSqlEndTime = YES;
  resultImping.sqlEndTime = value;
  return self;
}
- (IMPingBuilder*) clearSqlEndTime {
  resultImping.hasSqlEndTime = NO;
  resultImping.sqlEndTime = 0L;
  return self;
}
- (BOOL) hasMsgServerRspArrive {
  return resultImping.hasMsgServerRspArrive;
}
- (SInt64) msgServerRspArrive {
  return resultImping.msgServerRspArrive;
}
- (IMPingBuilder*) setMsgServerRspArrive:(SInt64) value {
  resultImping.hasMsgServerRspArrive = YES;
  resultImping.msgServerRspArrive = value;
  return self;
}
- (IMPingBuilder*) clearMsgServerRspArrive {
  resultImping.hasMsgServerRspArrive = NO;
  resultImping.msgServerRspArrive = 0L;
  return self;
}
- (BOOL) hasLocalArrive {
  return resultImping.hasLocalArrive;
}
- (SInt64) localArrive {
  return resultImping.localArrive;
}
- (IMPingBuilder*) setLocalArrive:(SInt64) value {
  resultImping.hasLocalArrive = YES;
  resultImping.localArrive = value;
  return self;
}
- (IMPingBuilder*) clearLocalArrive {
  resultImping.hasLocalArrive = NO;
  resultImping.localArrive = 0L;
  return self;
}
- (BOOL) hasAttachData {
  return resultImping.hasAttachData;
}
- (NSData*) attachData {
  return resultImping.attachData;
}
- (IMPingBuilder*) setAttachData:(NSData*) value {
  resultImping.hasAttachData = YES;
  resultImping.attachData = value;
  return self;
}
- (IMPingBuilder*) clearAttachData {
  resultImping.hasAttachData = NO;
  resultImping.attachData = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
